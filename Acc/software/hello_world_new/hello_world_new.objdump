
hello_world_new.elf:     file format elf32-littlenios2
hello_world_new.elf
architecture: nios2:r1, flags 0x00000112:
EXEC_P, HAS_SYMS, D_PAGED
start address 0x00010228

Program Header:
    LOAD off    0x00001000 vaddr 0x00010000 paddr 0x00010000 align 2**12
         filesz 0x00000020 memsz 0x00000020 flags r-x
    LOAD off    0x00001020 vaddr 0x00010020 paddr 0x00010020 align 2**12
         filesz 0x00006244 memsz 0x00006244 flags r-x
    LOAD off    0x00007264 vaddr 0x00016264 paddr 0x00017cfc align 2**12
         filesz 0x00001a98 memsz 0x00001a98 flags rw-
    LOAD off    0x00000794 vaddr 0x00019794 paddr 0x00019794 align 2**12
         filesz 0x00000000 memsz 0x00000164 flags rw-

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .entry        00000020  00010000  00010000  00001000  2**5
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .exceptions   00000208  00010020  00010020  00001020  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .text         00005e0c  00010228  00010228  00001228  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  3 .rodata       00000230  00016034  00016034  00007034  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .rwdata       00001a98  00016264  00017cfc  00007264  2**2
                  CONTENTS, ALLOC, LOAD, DATA, SMALL_DATA
  5 .bss          00000164  00019794  00019794  00009794  2**2
                  ALLOC, SMALL_DATA
  6 .onchip_memory 00000000  000198f8  000198f8  00008cfc  2**0
                  CONTENTS
  7 .comment      0000002d  00000000  00000000  00008cfc  2**0
                  CONTENTS, READONLY
  8 .debug_aranges 00000b00  00000000  00000000  00008d30  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
  9 .debug_info   00018b34  00000000  00000000  00009830  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 10 .debug_abbrev 000076a3  00000000  00000000  00022364  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 11 .debug_line   0000617a  00000000  00000000  00029a07  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 12 .debug_frame  000017c4  00000000  00000000  0002fb84  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_str    00001d48  00000000  00000000  00031348  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_alt_sim_info 00000010  00000000  00000000  00033090  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000070  00000000  00000000  000330a0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_line_str 000017e7  00000000  00000000  00033110  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_loclists 000035f3  00000000  00000000  000348f7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_rnglists 000005aa  00000000  00000000  00037eea  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .thread_model 00000003  00000000  00000000  0003adc9  2**0
                  CONTENTS, READONLY
 20 .cpu          00000003  00000000  00000000  0003adcc  2**0
                  CONTENTS, READONLY
 21 .qsys         00000001  00000000  00000000  0003adcf  2**0
                  CONTENTS, READONLY
 22 .simulation_enabled 00000001  00000000  00000000  0003add0  2**0
                  CONTENTS, READONLY
 23 .sysid_hash   00000004  00000000  00000000  0003add1  2**0
                  CONTENTS, READONLY
 24 .sysid_base   00000004  00000000  00000000  0003add5  2**0
                  CONTENTS, READONLY
 25 .sysid_time   00000004  00000000  00000000  0003add9  2**0
                  CONTENTS, READONLY
 26 .stderr_dev   00000009  00000000  00000000  0003addd  2**0
                  CONTENTS, READONLY
 27 .stdin_dev    00000009  00000000  00000000  0003ade6  2**0
                  CONTENTS, READONLY
 28 .stdout_dev   00000009  00000000  00000000  0003adef  2**0
                  CONTENTS, READONLY
 29 .sopc_system_name 00000012  00000000  00000000  0003adf8  2**0
                  CONTENTS, READONLY
 30 .quartus_project_dir 00000038  00000000  00000000  0003ae0a  2**0
                  CONTENTS, READONLY
 31 .sopcinfo     000542f6  00000000  00000000  0003ae42  2**0
                  CONTENTS, READONLY
SYMBOL TABLE:
00010000 l    d  .entry	00000000 .entry
00010020 l    d  .exceptions	00000000 .exceptions
00010228 l    d  .text	00000000 .text
00016034 l    d  .rodata	00000000 .rodata
00016264 l    d  .rwdata	00000000 .rwdata
00019794 l    d  .bss	00000000 .bss
000198f8 l    d  .onchip_memory	00000000 .onchip_memory
00000000 l    d  .comment	00000000 .comment
00000000 l    d  .debug_aranges	00000000 .debug_aranges
00000000 l    d  .debug_info	00000000 .debug_info
00000000 l    d  .debug_abbrev	00000000 .debug_abbrev
00000000 l    d  .debug_line	00000000 .debug_line
00000000 l    d  .debug_frame	00000000 .debug_frame
00000000 l    d  .debug_str	00000000 .debug_str
00000000 l    d  .debug_alt_sim_info	00000000 .debug_alt_sim_info
00000000 l    d  .debug_ranges	00000000 .debug_ranges
00000000 l    d  .debug_line_str	00000000 .debug_line_str
00000000 l    d  .debug_loclists	00000000 .debug_loclists
00000000 l    d  .debug_rnglists	00000000 .debug_rnglists
00000000 l    df *ABS*	00000000 crt0.o
00010260 l       .text	00000000 alt_after_alt_main
00000000 l    df *ABS*	00000000 alt_irq_handler.c
00000000 l    df *ABS*	00000000 alt_instruction_exception_entry.c
00000000 l    df *ABS*	00000000 hello_world.c
00000000 l    df *ABS*	00000000 lib2-divmod.c
00000000 l    df *ABS*	00000000 lib2-mul.c
00000000 l    df *ABS*	00000000 mulsf3.c
00000000 l    df *ABS*	00000000 fixsfsi.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 malloc.c
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 memcpy.c
00000000 l    df *ABS*	00000000 sbrkr.c
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 impure.c
0001666c l     O .rwdata	00000424 impure_data
00000000 l    df *ABS*	00000000 int_errno.c
00000000 l    df *ABS*	00000000 alt_irq_register.c
00000000 l    df *ABS*	00000000 alt_irq_vars.c
00000000 l    df *ABS*	00000000 alt_load.c
000120e4 l     F .text	00000068 alt_load_section
00000000 l    df *ABS*	00000000 alt_main.c
00000000 l    df *ABS*	00000000 alt_malloc_lock.c
00000000 l    df *ABS*	00000000 alt_printf.c
00000000 l    df *ABS*	00000000 alt_putchar.c
00000000 l    df *ABS*	00000000 alt_sbrk.c
00017cd8 l     O .rwdata	00000004 heap_end
00000000 l    df *ABS*	00000000 alt_sys_init.c
000125a8 l     F .text	00000034 alt_dev_reg
00016a90 l     O .rwdata	00001060 jtag_uart
00017af0 l     O .rwdata	0000002c accelerometer_spi
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_fd.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_init.c
000128a0 l     F .text	00000218 altera_avalon_jtag_uart_irq
00012ab8 l     F .text	000000a8 altera_avalon_jtag_uart_timeout
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_ioctl.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_read.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_write.c
00000000 l    df *ABS*	00000000 altera_avalon_timer_sc.c
00013104 l     F .text	00000080 alt_avalon_timer_sc_irq
00000000 l    df *ABS*	00000000 altera_up_avalon_accelerometer_spi.c
00000000 l    df *ABS*	00000000 alt_alarm_start.c
00000000 l    df *ABS*	00000000 alt_close.c
0001372c l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_dcache_flush_all.c
00000000 l    df *ABS*	00000000 alt_dev.c
00013864 l     F .text	0000002c alt_dev_null_write
00000000 l    df *ABS*	00000000 alt_dev_llist_insert.c
00013890 l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_do_ctors.c
00000000 l    df *ABS*	00000000 alt_do_dtors.c
00000000 l    df *ABS*	00000000 alt_errno.c
00000000 l    df *ABS*	00000000 alt_find_dev.c
00000000 l    df *ABS*	00000000 alt_icache_flush_all.c
00000000 l    df *ABS*	00000000 alt_io_redirect.c
00013aec l     F .text	000000d4 alt_open_fd
00000000 l    df *ABS*	00000000 alt_open.c
00013c3c l     F .text	0000003c alt_get_errno
00013c78 l     F .text	000000dc alt_file_locked
00000000 l    df *ABS*	00000000 alt_release_fd.c
00000000 l    df *ABS*	00000000 alt_tick.c
00000000 l    df *ABS*	00000000 altera_nios2_gen2_irq.c
00000000 l    df *ABS*	00000000 alt_find_file.c
00000000 l    df *ABS*	00000000 alt_get_fd.c
00000000 l    df *ABS*	00000000 atexit.c
00000000 l    df *ABS*	00000000 exit.c
00000000 l    df *ABS*	00000000 memcmp.c
00000000 l    df *ABS*	00000000 putchar.c
00000000 l    df *ABS*	00000000 strlen.c
00000000 l    df *ABS*	00000000 __atexit.c
00000000 l    df *ABS*	00000000 __call_atexit.c
00000000 l    df *ABS*	00000000 putc.c
00000000 l    df *ABS*	00000000 wbuf.c
00000000 l    df *ABS*	00000000 wsetup.c
00000000 l    df *ABS*	00000000 fflush.c
00000000 l    df *ABS*	00000000 findfp.c
00014db8 l     F .text	00000008 __fp_lock
00014dcc l     F .text	00000008 __fp_unlock
00014dd4 l     F .text	00000168 __sinit.part.0
00000000 l    df *ABS*	00000000 fwalk.c
00000000 l    df *ABS*	00000000 makebuf.c
00000000 l    df *ABS*	00000000 memset.c
00000000 l    df *ABS*	00000000 stdio.c
00000000 l    df *ABS*	00000000 writer.c
00000000 l    df *ABS*	00000000 closer.c
00000000 l    df *ABS*	00000000 fclose.c
00000000 l    df *ABS*	00000000 fstatr.c
00000000 l    df *ABS*	00000000 isattyr.c
00000000 l    df *ABS*	00000000 lseekr.c
00000000 l    df *ABS*	00000000 readr.c
00000000 l    df *ABS*	00000000 alt_exit.c
00000000 l    df *ABS*	00000000 alt_fstat.c
00015ab0 l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_isatty.c
00015ba8 l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_lseek.c
00015c94 l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_read.c
00015db0 l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_write.c
00015ef4 l     F .text	0000003c alt_get_errno
000197cc g     O .bss	00000004 alt_instruction_exception_handler
00014414 g     F .text	00000018 putchar
00015954 g     F .text	00000058 _isatty_r
000121d0 g     F .text	0000007c alt_main
00010264 g     F .text	00000034 led_write
000197f8 g     O .bss	00000100 alt_irq
000159ac g     F .text	00000064 _lseek_r
00017cfc g       *ABS*	00000000 __flash_rwdata_start
000198f8 g       *ABS*	00000000 __alt_heap_start
000156cc g     F .text	0000005c __sseek
000150fc g     F .text	00000010 __sinit
00014820 g     F .text	00000148 __swbuf_r
00014f3c g     F .text	00000078 __sfmoreglue
00012270 g     F .text	00000024 __malloc_unlock
000150e8 g     F .text	00000014 _cleanup
0001114c g     F .text	00000070 .hidden __fixsfsi
0001035c g     F .text	00000108 sys_timer_isr
000140f4 g     F .text	00000024 altera_nios2_gen2_irq_init
00010000 g     F .entry	0000000c __reset
00013350 g     F .text	000000d4 alt_up_accelerometer_spi_read_x_axis
00010020 g       *ABS*	00000000 __flash_exceptions_start
000158f4 g     F .text	00000060 _fstat_r
000197ac g     O .bss	00000004 errno
00015644 g     F .text	00000008 __seofread
000197b8 g     O .bss	00000004 alt_argv
0001fcc4 g       *ABS*	00000000 _gp
000104e0 g     F .text	000000a8 average
00017b44 g     O .rwdata	00000180 alt_fd_list
0001440c g     F .text	00000008 _putchar_r
00013a3c g     F .text	00000090 alt_find_dev
000119e0 g     F .text	00000100 memcpy
00014dc0 g     F .text	0000000c _cleanup_r
00013bc0 g     F .text	0000007c alt_io_redirect
00016034 g       *ABS*	00000000 __DTOR_END__
000142d8 g     F .text	00000074 alt_exception_cause_generated_bad_addr
00012cbc g     F .text	00000220 altera_avalon_jtag_uart_read
0001120c g     F .text	00000010 malloc
00010c48 g     F .text	00000064 .hidden __udivsi3
00015be4 g     F .text	000000b0 isatty
000197a8 g     O .bss	00000004 __malloc_top_pad
00011ae0 g     F .text	00000058 _sbrk_r
00015a10 g     F .text	00000064 _read_r
00017cec g     O .rwdata	00000004 alt_max_fd
000157ec g     F .text	000000f8 _fclose_r
00014d34 g     F .text	00000084 fflush
000197a4 g     O .bss	00000004 __malloc_max_sbrked_mem
00011f64 g     F .text	00000180 alt_irq_register
00015cd0 g     F .text	000000e0 lseek
00017ccc g     O .rwdata	00000004 _global_impure_ptr
000198f8 g       *ABS*	00000000 __bss_end
00013fc8 g     F .text	0000012c alt_tick
0001511c g     F .text	00000014 __fp_lock_all
00013f24 g     F .text	000000a4 alt_alarm_stop
000197b0 g     O .bss	00000004 alt_irq_active
000100fc g     F .exceptions	000000cc alt_irq_handler
00017b1c g     O .rwdata	00000028 alt_dev_null
00013844 g     F .text	00000020 alt_dcache_flush_all
00017cfc g       *ABS*	00000000 __ram_rwdata_end
00010464 g     F .text	0000007c timer_init
00010000 g       *ABS*	00000000 __alt_mem_onchip_memory
00017ce4 g     O .rwdata	00000008 alt_dev_list
00015f30 g     F .text	00000104 write
00014674 g     F .text	000000cc _putc_r
00016264 g       *ABS*	00000000 __ram_rodata_end
00015aec g     F .text	000000bc fstat
00019795 g     O .bss	00000001 led
00010cac g     F .text	0000005c .hidden __umodsi3
000198f8 g       *ABS*	00000000 end
000127ec g     F .text	000000b4 altera_avalon_jtag_uart_init
000101c8 g     F .exceptions	00000060 alt_instruction_exception_entry
00016034 g       *ABS*	00000000 __CTOR_LIST__
00020000 g       *ABS*	00000000 __alt_stack_pointer
00013184 g     F .text	0000007c alt_avalon_timer_sc_init
000111bc g     F .text	00000050 .hidden __clzsi2
00012edc g     F .text	00000228 altera_avalon_jtag_uart_write
0001510c g     F .text	00000004 __sfp_lock_acquire
00019798 g     O .bss	00000004 level_x
00011c5c g     F .text	00000308 _free_r
00012294 g     F .text	0000022c alt_printf
00014554 g     F .text	00000120 __call_exitprocs
00017cc4 g     O .rwdata	00000004 __malloc_sbrk_base
00010228 g     F .text	0000003c _start
000197c0 g     O .bss	00000004 _alt_tick_rate
000197c4 g     O .bss	00000008 _alt_nticks
00015dec g     F .text	00000108 read
00012618 g     F .text	00000070 alt_sys_init
0001323c g     F .text	00000044 alt_up_accelerometer_spi_read_address_register
000144c4 g     F .text	00000090 __register_exitproc
00012b60 g     F .text	00000068 altera_avalon_jtag_uart_close
00010d08 g     F .text	00000028 .hidden __mulsi3
00016264 g       *ABS*	00000000 __ram_rwdata_start
00016034 g       *ABS*	00000000 __ram_rodata_start
000197d0 g     O .bss	00000028 __malloc_current_mallinfo
00012688 g     F .text	00000060 altera_avalon_jtag_uart_read_fd
00014220 g     F .text	000000b8 alt_get_fd
00013424 g     F .text	000000d4 alt_up_accelerometer_spi_read_y_axis
00015794 g     F .text	00000058 _close_r
00014394 g     F .text	00000078 memcmp
00012748 g     F .text	00000050 altera_avalon_jtag_uart_close_fd
000198f8 g       *ABS*	00000000 __alt_stack_base
00012798 g     F .text	00000054 altera_avalon_jtag_uart_ioctl_fd
00014980 g     F .text	0000014c __swsetup_r
00014fb4 g     F .text	00000134 __sfp
00016264 g     O .rwdata	00000408 __malloc_av_
00015118 g     F .text	00000004 __sinit_lock_release
000155f0 g     F .text	00000054 __sread
00014118 g     F .text	00000108 alt_find_file
000138cc g     F .text	000000a8 alt_dev_llist_insert
0001224c g     F .text	00000024 __malloc_lock
000124f0 g     F .text	000000b8 sbrk
00014cd4 g     F .text	00000060 _fflush_r
00019794 g       *ABS*	00000000 __bss_start
000154b0 g     F .text	00000140 memset
00010974 g     F .text	000001e0 main
000197bc g     O .bss	00000004 alt_envp
000197a0 g     O .bss	00000004 __malloc_max_total_mem
000126e8 g     F .text	00000060 altera_avalon_jtag_uart_write_fd
00014968 g     F .text	00000018 __swbuf
00015728 g     F .text	00000008 __sclose
00020000 g       *ABS*	00000000 __alt_heap_limit
000158e4 g     F .text	00000010 fclose
0001122c g     F .text	000007b4 _malloc_r
00017cf0 g     O .rwdata	00000004 alt_errno
00015144 g     F .text	00000098 _fwalk
00014740 g     F .text	000000e0 putc
00010b54 g     F .text	00000080 .hidden __divsi3
00011b38 g     F .text	00000124 _malloc_trim_r
00016034 g       *ABS*	00000000 __CTOR_END__
00010d30 g     F .text	0000041c .hidden __mulsf3
00016034 g       *ABS*	00000000 __flash_rodata_start
00016034 g       *ABS*	00000000 __DTOR_LIST__
000125dc g     F .text	0000003c alt_irq_init
00013eb4 g     F .text	00000070 alt_release_fd
00016120 g     O .rodata	00000100 .hidden __clz_tab
0001434c g     F .text	00000014 atexit
00015730 g     F .text	00000064 _write_r
00017cd0 g     O .rwdata	00000004 _impure_ptr
000197b4 g     O .bss	00000004 alt_argc
0001979c g     O .bss	00000004 level_y
00014acc g     F .text	00000208 __sflush_r
000139d8 g     F .text	00000064 _do_dtors
00010020 g       .exceptions	00000000 alt_irq_entry
00015130 g     F .text	00000014 __fp_unlock_all
00019794 g     O .bss	00000001 pwm
00017cdc g     O .rwdata	00000008 alt_fs_list
0001062c g     F .text	00000348 BCD
00010020 g       *ABS*	00000000 __ram_exceptions_start
00013200 g     F .text	0000003c alt_up_accelerometer_spi_open_dev
00015424 g     F .text	0000008c __swhatbuf_r
00010588 g     F .text	000000a4 fixed
00017cfc g       *ABS*	00000000 _edata
000198f8 g       *ABS*	00000000 _end
00010228 g       *ABS*	00000000 __ram_exceptions_end
00012bc8 g     F .text	000000f4 altera_avalon_jtag_uart_ioctl
0001564c g     F .text	00000080 __swrite
00017cc8 g     O .rwdata	00000004 __malloc_trim_threshold
00014360 g     F .text	00000034 exit
000151dc g     F .text	000000a8 _fwalk_reent
00010bd4 g     F .text	00000074 .hidden __modsi3
000134f8 g     F .text	000000d4 alt_up_accelerometer_spi_read_z_axis
00020000 g       *ABS*	00000000 __alt_data_end
00010020 g     F .exceptions	00000000 alt_exception
00015110 g     F .text	00000004 __sfp_lock_release
00010298 g     F .text	000000c4 convert_read
00015a74 g     F .text	0000003c _exit
000135cc g     F .text	00000160 alt_alarm_start
00013280 g     F .text	00000068 alt_up_accelerometer_spi_read
000132e8 g     F .text	00000068 alt_up_accelerometer_spi_write
00015284 g     F .text	000001a0 __smakebuf_r
0001442c g     F .text	00000098 strlen
00013d54 g     F .text	00000160 open
000124c0 g     F .text	00000030 alt_putchar
00013acc g     F .text	00000020 alt_icache_flush_all
00017cd4 g     O .rwdata	00000004 alt_priority_mask
00017cf4 g     O .rwdata	00000008 alt_alarm_list
00013974 g     F .text	00000064 _do_ctors
00013768 g     F .text	000000dc close
0001214c g     F .text	00000084 alt_load
0001121c g     F .text	00000010 free
00015114 g     F .text	00000004 __sinit_lock_acquire



Disassembly of section .entry:

00010000 <__reset>:
 * Jump to the _start entry point in the .text section if reset code
 * is allowed or if optimizing for RTL simulation.
 */
#if defined(ALT_ALLOW_CODE_AT_RESET) || defined(ALT_SIM_OPTIMIZE)
    /* Jump to the _start entry point in the .text section. */
    movhi r1, %hi(_start)
   10000:	00400074 	movhi	at,1
    ori r1, r1, %lo(_start)
   10004:	08408a14 	ori	at,at,552
    jmp r1
   10008:	0800683a 	jmp	at
	...

Disassembly of section .exceptions:

00010020 <alt_exception>:

#else /* ALT_EXCEPTION_STACK disabled */
        /* 
         * Reserve space on normal stack for registers about to be pushed.
         */
        addi  sp, sp, -76
   10020:	deffed04 	addi	sp,sp,-76
         * documentation for details).
         *
         * Leave a gap in the stack frame at 4(sp) for the muldiv handler to
         * store zero into.
         */
        stw   ra,  0(sp)
   10024:	dfc00015 	stw	ra,0(sp)
        stw   r1,   8(sp)
   10028:	d8400215 	stw	at,8(sp)
        stw   r2,  12(sp)
   1002c:	d8800315 	stw	r2,12(sp)
        stw   r3,  16(sp)
   10030:	d8c00415 	stw	r3,16(sp)
        stw   r4,  20(sp)
   10034:	d9000515 	stw	r4,20(sp)
        stw   r5,  24(sp)
   10038:	d9400615 	stw	r5,24(sp)
        stw   r6,  28(sp)
   1003c:	d9800715 	stw	r6,28(sp)
        stw   r7,  32(sp)
   10040:	d9c00815 	stw	r7,32(sp)
        rdctl r5, estatus   /* Read early to avoid usage stall */
   10044:	000b307a 	rdctl	r5,estatus
        stw   r8,  36(sp)
   10048:	da000915 	stw	r8,36(sp)
        stw   r9,  40(sp)
   1004c:	da400a15 	stw	r9,40(sp)
        stw   r10, 44(sp)
   10050:	da800b15 	stw	r10,44(sp)
        stw   r11, 48(sp)
   10054:	dac00c15 	stw	r11,48(sp)
        stw   r12, 52(sp)
   10058:	db000d15 	stw	r12,52(sp)
        stw   r13, 56(sp)
   1005c:	db400e15 	stw	r13,56(sp)
        stw   r14, 60(sp)
   10060:	db800f15 	stw	r14,60(sp)
        stw   r15, 64(sp)
   10064:	dbc01015 	stw	r15,64(sp)
        /*
         * ea-4 contains the address of the instruction being executed
         * when the exception occured. For interrupt exceptions, we will
         * will be re-issue the isntruction. Store it in 72(sp)
         */
        stw   r5,  68(sp)  /* estatus */
   10068:	d9401115 	stw	r5,68(sp)
        addi  r15, ea, -4  /* instruction that caused exception */
   1006c:	ebffff04 	addi	r15,ea,-4
        stw   r15,  72(sp)
   10070:	dbc01215 	stw	r15,72(sp)
#else
        /*
         * Test to see if the exception was a software exception or caused 
         * by an external interrupt, and vector accordingly.
         */
        rdctl r4, ipending
   10074:	0009313a 	rdctl	r4,ipending
        andi  r2, r5, 1
   10078:	2880004c 	andi	r2,r5,1
        beq   r2, zero, .Lnot_irq
   1007c:	10000326 	beq	r2,zero,1008c <alt_exception+0x6c>
        beq   r4, zero, .Lnot_irq
   10080:	20000226 	beq	r4,zero,1008c <alt_exception+0x6c>
        /*
         * Now that all necessary registers have been preserved, call 
         * alt_irq_handler() to process the interrupts.
         */

        call alt_irq_handler
   10084:	00100fc0 	call	100fc <alt_irq_handler>

        .section .exceptions.irqreturn, "xa"

        br    .Lexception_exit
   10088:	00000706 	br	100a8 <alt_exception+0x88>
         * upon completion, so we write ea (address of instruction *after*
         * the one where the exception occured) into 72(sp). The actual
         * instruction that caused the exception is written in r2, which these
         * handlers will utilize.
         */
        stw ea, 72(sp) /* EA is PC+4 so will skip over instruction causing exception */
   1008c:	df401215 	stw	ea,72(sp)
.Lunknown_16bit:
        addi.n r4, r4, 2 /* Need PC+2 to skip over instruction causing exception */
        stw r4, 72(sp)

#else /* CDX is not Enabled and all instructions are 32bits */
        ldw r2, -4(ea) /* Instruction value that caused exception */
   10090:	e8bfff17 	ldw	r2,-4(ea)
   10094:	e93fff04 	addi	r4,ea,-4
   10098:	00101c80 	call	101c8 <alt_instruction_exception_entry>
   1009c:	1000021e 	bne	r2,zero,100a8 <alt_exception+0x88>
   100a0:	ebffff04 	addi	r15,ea,-4
   100a4:	dbc01215 	stw	r15,72(sp)
        /* 
         * Restore the saved registers, so that all general purpose registers 
         * have been restored to their state at the time the interrupt occured.
         */

        ldw   r5,  68(sp)
   100a8:	d9401117 	ldw	r5,68(sp)
        ldw   ea,  72(sp)  /* This becomes the PC once eret is executed */
   100ac:	df401217 	ldw	ea,72(sp)
        ldw   ra,   0(sp)
   100b0:	dfc00017 	ldw	ra,0(sp)

        wrctl estatus, r5
   100b4:	2801707a 	wrctl	estatus,r5

        ldw   r1,   8(sp)
   100b8:	d8400217 	ldw	at,8(sp)
        ldw   r2,  12(sp)
   100bc:	d8800317 	ldw	r2,12(sp)
        ldw   r3,  16(sp)
   100c0:	d8c00417 	ldw	r3,16(sp)
        ldw   r4,  20(sp)
   100c4:	d9000517 	ldw	r4,20(sp)
        ldw   r5,  24(sp)
   100c8:	d9400617 	ldw	r5,24(sp)
        ldw   r6,  28(sp)
   100cc:	d9800717 	ldw	r6,28(sp)
        ldw   r7,  32(sp)
   100d0:	d9c00817 	ldw	r7,32(sp)

#if defined(ALT_EXCEPTION_STACK) && defined(ALT_STACK_CHECK)
        ldw   et, %gprel(alt_exception_old_stack_limit)(gp)
#endif

        ldw   r8,  36(sp)
   100d4:	da000917 	ldw	r8,36(sp)
        ldw   r9,  40(sp)
   100d8:	da400a17 	ldw	r9,40(sp)
        ldw   r10, 44(sp)
   100dc:	da800b17 	ldw	r10,44(sp)
        ldw   r11, 48(sp)
   100e0:	dac00c17 	ldw	r11,48(sp)
        ldw   r12, 52(sp)
   100e4:	db000d17 	ldw	r12,52(sp)
        ldw   r13, 56(sp)
   100e8:	db400e17 	ldw	r13,56(sp)
        ldw   r14, 60(sp)
   100ec:	db800f17 	ldw	r14,60(sp)
        ldw   r15, 64(sp)
   100f0:	dbc01017 	ldw	r15,64(sp)
        stw   et, %gprel(alt_stack_limit_value)(gp)
        stw   zero, %gprel(alt_exception_old_stack_limit)(gp)
#endif /* ALT_STACK_CHECK */
        ldw   sp,  76(sp)
#else /* ALT_EXCEPTION_STACK disabled */
        addi  sp, sp, 76
   100f4:	dec01304 	addi	sp,sp,76

        /*
         * Return to the interrupted instruction.
         */

        eret
   100f8:	ef80083a 	eret

000100fc <alt_irq_handler>:
 * instruction is present if the macro ALT_CI_INTERRUPT_VECTOR defined.
 */

void alt_irq_handler (void) __attribute__ ((section (".exceptions")));
void alt_irq_handler (void)
{
   100fc:	defff904 	addi	sp,sp,-28
   10100:	dfc00615 	stw	ra,24(sp)
   10104:	df000515 	stw	fp,20(sp)
   10108:	df000504 	addi	fp,sp,20
  
  /*
   * Notify the operating system that we are at interrupt level.
   */ 
  
  ALT_OS_INT_ENTER();
   1010c:	0001883a 	nop
#ifndef NIOS2_EIC_PRESENT
static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_irq_pending (void)
{
  alt_u32 active;

  NIOS2_READ_IPENDING (active);
   10110:	0005313a 	rdctl	r2,ipending
   10114:	e0bffc15 	stw	r2,-16(fp)

  return active;
   10118:	e0bffc17 	ldw	r2,-16(fp)
   * Consider the case where the high priority interupt is asserted during
   * the interrupt entry sequence for a lower priority interrupt to see why
   * this is the case.
   */

  active = alt_irq_pending ();
   1011c:	e0bfff15 	stw	r2,-4(fp)

  do
  {
    i = 0;
   10120:	e03ffd15 	stw	zero,-12(fp)
    mask = 1;
   10124:	00800044 	movi	r2,1
   10128:	e0bffe15 	stw	r2,-8(fp)
     * called to clear the interrupt condition.
     */

    do
    {
      if (active & mask)
   1012c:	e0ffff17 	ldw	r3,-4(fp)
   10130:	e0bffe17 	ldw	r2,-8(fp)
   10134:	1884703a 	and	r2,r3,r2
   10138:	10001226 	beq	r2,zero,10184 <alt_irq_handler+0x88>
      { 
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
        alt_irq[i].handler(alt_irq[i].context); 
#else
        alt_irq[i].handler(alt_irq[i].context, i); 
   1013c:	e0bffd17 	ldw	r2,-12(fp)
   10140:	100690fa 	slli	r3,r2,3
   10144:	008000b4 	movhi	r2,2
   10148:	1885883a 	add	r2,r3,r2
   1014c:	10e5fe17 	ldw	r3,-26632(r2)
   10150:	e0bffd17 	ldw	r2,-12(fp)
   10154:	100890fa 	slli	r4,r2,3
   10158:	008000b4 	movhi	r2,2
   1015c:	2085883a 	add	r2,r4,r2
   10160:	10a5ff17 	ldw	r2,-26628(r2)
   10164:	e17ffd17 	ldw	r5,-12(fp)
   10168:	1009883a 	mov	r4,r2
   1016c:	183ee83a 	callr	r3
#endif
        break;
   10170:	0001883a 	nop
  NIOS2_READ_IPENDING (active);
   10174:	0005313a 	rdctl	r2,ipending
   10178:	e0bffb15 	stw	r2,-20(fp)
  return active;
   1017c:	e0bffb17 	ldw	r2,-20(fp)
   10180:	00000706 	br	101a0 <alt_irq_handler+0xa4>
      }
      mask <<= 1;
   10184:	e0bffe17 	ldw	r2,-8(fp)
   10188:	1085883a 	add	r2,r2,r2
   1018c:	e0bffe15 	stw	r2,-8(fp)
      i++;
   10190:	e0bffd17 	ldw	r2,-12(fp)
   10194:	10800044 	addi	r2,r2,1
   10198:	e0bffd15 	stw	r2,-12(fp)
      if (active & mask)
   1019c:	003fe306 	br	1012c <alt_irq_handler+0x30>

    } while (1);

    active = alt_irq_pending ();
   101a0:	e0bfff15 	stw	r2,-4(fp)
    
  } while (active);
   101a4:	e0bfff17 	ldw	r2,-4(fp)
   101a8:	103fdd1e 	bne	r2,zero,10120 <alt_irq_handler+0x24>

  /*
   * Notify the operating system that interrupt processing is complete.
   */ 

  ALT_OS_INT_EXIT();
   101ac:	0001883a 	nop
}
   101b0:	0001883a 	nop
   101b4:	e037883a 	mov	sp,fp
   101b8:	dfc00117 	ldw	ra,4(sp)
   101bc:	df000017 	ldw	fp,0(sp)
   101c0:	dec00204 	addi	sp,sp,8
   101c4:	f800283a 	ret

000101c8 <alt_instruction_exception_entry>:
 * that handler if it has been registered. Absent a handler, it will
 * break break or hang as discussed below.
 */
int 
alt_instruction_exception_entry (alt_u32 exception_pc)
{
   101c8:	defffb04 	addi	sp,sp,-20
   101cc:	dfc00415 	stw	ra,16(sp)
   101d0:	df000315 	stw	fp,12(sp)
   101d4:	df000304 	addi	fp,sp,12
   101d8:	e13ffd15 	stw	r4,-12(fp)
  cause = ( (cause & NIOS2_EXCEPTION_REG_CAUSE_MASK) >>
              NIOS2_EXCEPTION_REG_CAUSE_OFST );

  NIOS2_READ_BADADDR(badaddr);
#else
  cause = NIOS2_EXCEPTION_CAUSE_NOT_PRESENT;
   101dc:	00bfffc4 	movi	r2,-1
   101e0:	e0bfff15 	stw	r2,-4(fp)
  badaddr = 0;
   101e4:	e03ffe15 	stw	zero,-8(fp)
#endif /* NIOS2_HAS_EXTRA_EXCEPTION_INFO */

  if(alt_instruction_exception_handler) {
   101e8:	d0a6c217 	ldw	r2,-25848(gp)
   101ec:	10000726 	beq	r2,zero,1020c <alt_instruction_exception_entry+0x44>
     * Call handler. Its return value indicates whether the exception-causing
     * instruction should be re-issued. The code that called us,
     * alt_eceptions_entry.S, will look at this value and adjust the ea
     * register as necessary
     */
    return alt_instruction_exception_handler(cause, exception_pc, badaddr);
   101f0:	d0a6c217 	ldw	r2,-25848(gp)
   101f4:	e0ffff17 	ldw	r3,-4(fp)
   101f8:	e1bffe17 	ldw	r6,-8(fp)
   101fc:	e17ffd17 	ldw	r5,-12(fp)
   10200:	1809883a 	mov	r4,r3
   10204:	103ee83a 	callr	r2
   10208:	00000206 	br	10214 <alt_instruction_exception_entry+0x4c>
   *    (a peripheral which negates its interrupt output before its
   *    interrupt handler has been executed will cause spurious interrupts)
   */
  else {
#ifdef NIOS2_HAS_DEBUG_STUB
    NIOS2_BREAK();
   1020c:	003da03a 	break	0
      ;
#endif /* NIOS2_HAS_DEBUG_STUB */
  }

  /* We should not get here. Remove compiler warning. */
  return NIOS2_EXCEPTION_RETURN_REISSUE_INST;
   10210:	0005883a 	mov	r2,zero
}
   10214:	e037883a 	mov	sp,fp
   10218:	dfc00117 	ldw	ra,4(sp)
   1021c:	df000017 	ldw	fp,0(sp)
   10220:	dec00204 	addi	sp,sp,8
   10224:	f800283a 	ret

Disassembly of section .text:

00010228 <_start>:

    /*
     * Now that the caches are initialized, set up the stack pointer and global pointer.
     * The values provided by the linker are assumed to be correctly aligned.
     */
    movhi sp, %hi(__alt_stack_pointer)
   10228:	06c000b4 	movhi	sp,2
    ori sp, sp, %lo(__alt_stack_pointer)
   1022c:	dec00014 	ori	sp,sp,0
    movhi gp, %hi(_gp)
   10230:	06800074 	movhi	gp,1
    ori gp, gp, %lo(_gp)
   10234:	d6bf3114 	ori	gp,gp,64708
 */
#ifndef ALT_SIM_OPTIMIZE
    /* Log that the BSS is about to be cleared. */
    ALT_LOG_PUTS(alt_log_msg_bss)

    movhi r2, %hi(__bss_start)
   10238:	00800074 	movhi	r2,1
    ori r2, r2, %lo(__bss_start)
   1023c:	10a5e514 	ori	r2,r2,38804

    movhi r3, %hi(__bss_end)
   10240:	00c00074 	movhi	r3,1
    ori r3, r3, %lo(__bss_end)
   10244:	18e63e14 	ori	r3,r3,39160

    beq r2, r3, 1f
   10248:	10c00326 	beq	r2,r3,10258 <_start+0x30>

0:
    stw zero, (r2)
   1024c:	10000015 	stw	zero,0(r2)
    addi r2, r2, 4
   10250:	10800104 	addi	r2,r2,4
    bltu r2, r3, 0b
   10254:	10fffd36 	bltu	r2,r3,1024c <_start+0x24>
     * section aren't defined until alt_load() has been called).
     */
    mov   et, zero
#endif

    call alt_load
   10258:	001214c0 	call	1214c <alt_load>

    /* Log that alt_main is about to be called. */
    ALT_LOG_PUTS(alt_log_msg_alt_main)

    /* Call the C entry point. It should never return. */
    call alt_main
   1025c:	00121d00 	call	121d0 <alt_main>

00010260 <alt_after_alt_main>:

    /* Wait in infinite loop in case alt_main does return. */
alt_after_alt_main:
    br alt_after_alt_main
   10260:	003fff06 	br	10260 <alt_after_alt_main>

00010264 <led_write>:

alt_8 pwm = 0;
alt_u8 led;
int level_x, level_y;

void led_write(alt_u8 led_pattern) {
   10264:	defffe04 	addi	sp,sp,-8
   10268:	df000115 	stw	fp,4(sp)
   1026c:	df000104 	addi	fp,sp,4
   10270:	2005883a 	mov	r2,r4
   10274:	e0bfff05 	stb	r2,-4(fp)
    IOWR(LED_BASE, 0, led_pattern);
   10278:	e0ffff03 	ldbu	r3,-4(fp)
   1027c:	008000b4 	movhi	r2,2
   10280:	10c41035 	stwio	r3,4160(r2)
}
   10284:	0001883a 	nop
   10288:	e037883a 	mov	sp,fp
   1028c:	df000017 	ldw	fp,0(sp)
   10290:	dec00104 	addi	sp,sp,4
   10294:	f800283a 	ret

00010298 <convert_read>:

void convert_read(alt_32 acc_read_x, alt_32 acc_read_y, int * level_x, int * level_y, alt_u8 * led) {
   10298:	defffa04 	addi	sp,sp,-24
   1029c:	df000515 	stw	fp,20(sp)
   102a0:	df000504 	addi	fp,sp,20
   102a4:	e13ffe15 	stw	r4,-8(fp)
   102a8:	e17ffd15 	stw	r5,-12(fp)
   102ac:	e1bffc15 	stw	r6,-16(fp)
   102b0:	e1fffb15 	stw	r7,-20(fp)
    acc_read_x += OFFSET;
   102b4:	e0bffe17 	ldw	r2,-8(fp)
   102b8:	10bff804 	addi	r2,r2,-32
   102bc:	e0bffe15 	stw	r2,-8(fp)
    acc_read_y += OFFSET;
   102c0:	e0bffd17 	ldw	r2,-12(fp)
   102c4:	10bff804 	addi	r2,r2,-32
   102c8:	e0bffd15 	stw	r2,-12(fp)
    alt_u8 val_x = (acc_read_x >> 6) & 0x07;
   102cc:	e0bffe17 	ldw	r2,-8(fp)
   102d0:	1005d1ba 	srai	r2,r2,6
   102d4:	108001cc 	andi	r2,r2,7
   102d8:	e0bfffc5 	stb	r2,-1(fp)
    alt_u8 val_y = (acc_read_y >> 6) & 0x07;
   102dc:	e0bffd17 	ldw	r2,-12(fp)
   102e0:	1005d1ba 	srai	r2,r2,6
   102e4:	108001cc 	andi	r2,r2,7
   102e8:	e0bfff85 	stb	r2,-2(fp)
    * led = (8 >> val_x) | (8 << (8 - val_y));
   102ec:	e0bfffc3 	ldbu	r2,-1(fp)
   102f0:	00c00204 	movi	r3,8
   102f4:	1885d83a 	sra	r2,r3,r2
   102f8:	1009883a 	mov	r4,r2
   102fc:	e0bfff83 	ldbu	r2,-2(fp)
   10300:	00c00204 	movi	r3,8
   10304:	1885c83a 	sub	r2,r3,r2
   10308:	00c00204 	movi	r3,8
   1030c:	1884983a 	sll	r2,r3,r2
   10310:	2084b03a 	or	r2,r4,r2
   10314:	1007883a 	mov	r3,r2
   10318:	e0800117 	ldw	r2,4(fp)
   1031c:	10c00005 	stb	r3,0(r2)
    * level_x = (acc_read_x >> 1) & 0x1f;
   10320:	e0bffe17 	ldw	r2,-8(fp)
   10324:	1005d07a 	srai	r2,r2,1
   10328:	10c007cc 	andi	r3,r2,31
   1032c:	e0bffc17 	ldw	r2,-16(fp)
   10330:	10c00015 	stw	r3,0(r2)
    * level_y = (acc_read_y >> 1) & 0x1f;
   10334:	e0bffd17 	ldw	r2,-12(fp)
   10338:	1005d07a 	srai	r2,r2,1
   1033c:	10c007cc 	andi	r3,r2,31
   10340:	e0bffb17 	ldw	r2,-20(fp)
   10344:	10c00015 	stw	r3,0(r2)
}
   10348:	0001883a 	nop
   1034c:	e037883a 	mov	sp,fp
   10350:	df000017 	ldw	fp,0(sp)
   10354:	dec00104 	addi	sp,sp,4
   10358:	f800283a 	ret

0001035c <sys_timer_isr>:

void sys_timer_isr() {
   1035c:	defffe04 	addi	sp,sp,-8
   10360:	dfc00115 	stw	ra,4(sp)
   10364:	df000015 	stw	fp,0(sp)
   10368:	d839883a 	mov	fp,sp
    IOWR_ALTERA_AVALON_TIMER_STATUS(TIMER_BASE, 0);
   1036c:	0007883a 	mov	r3,zero
   10370:	008000b4 	movhi	r2,2
   10374:	10c40035 	stwio	r3,4096(r2)
    if (pwm < abs(level_x) || pwm < abs(level_y)) {
   10378:	d0a6b403 	ldbu	r2,-25904(gp)
   1037c:	10c03fcc 	andi	r3,r2,255
   10380:	18c0201c 	xori	r3,r3,128
   10384:	18ffe004 	addi	r3,r3,-128
   10388:	d0a6b517 	ldw	r2,-25900(gp)
   1038c:	1000010e 	bge	r2,zero,10394 <sys_timer_isr+0x38>
   10390:	0085c83a 	sub	r2,zero,r2
   10394:	18800816 	blt	r3,r2,103b8 <sys_timer_isr+0x5c>
   10398:	d0a6b403 	ldbu	r2,-25904(gp)
   1039c:	10c03fcc 	andi	r3,r2,255
   103a0:	18c0201c 	xori	r3,r3,128
   103a4:	18ffe004 	addi	r3,r3,-128
   103a8:	d0a6b617 	ldw	r2,-25896(gp)
   103ac:	1000010e 	bge	r2,zero,103b4 <sys_timer_isr+0x58>
   103b0:	0085c83a 	sub	r2,zero,r2
   103b4:	1880160e 	bge	r3,r2,10410 <sys_timer_isr+0xb4>
        if (level_x < 0) {
   103b8:	d0a6b517 	ldw	r2,-25900(gp)
   103bc:	1000060e 	bge	r2,zero,103d8 <sys_timer_isr+0x7c>
            led_write(led << 1);
   103c0:	d0a6b443 	ldbu	r2,-25903(gp)
   103c4:	1085883a 	add	r2,r2,r2
   103c8:	10803fcc 	andi	r2,r2,255
   103cc:	1009883a 	mov	r4,r2
   103d0:	00102640 	call	10264 <led_write>
        if (level_x < 0) {
   103d4:	00001206 	br	10420 <sys_timer_isr+0xc4>
        } else if (level_y < 0) {
   103d8:	d0a6b617 	ldw	r2,-25896(gp)
   103dc:	1000070e 	bge	r2,zero,103fc <sys_timer_isr+0xa0>
            led_write(led >> 1);
   103e0:	d0a6b443 	ldbu	r2,-25903(gp)
   103e4:	10803fcc 	andi	r2,r2,255
   103e8:	1004d07a 	srli	r2,r2,1
   103ec:	10803fcc 	andi	r2,r2,255
   103f0:	1009883a 	mov	r4,r2
   103f4:	00102640 	call	10264 <led_write>
        if (level_x < 0) {
   103f8:	00000906 	br	10420 <sys_timer_isr+0xc4>
        } else {
            led_write(led);
   103fc:	d0a6b443 	ldbu	r2,-25903(gp)
   10400:	10803fcc 	andi	r2,r2,255
   10404:	1009883a 	mov	r4,r2
   10408:	00102640 	call	10264 <led_write>
        if (level_x < 0) {
   1040c:	00000406 	br	10420 <sys_timer_isr+0xc4>
        }

    } else {
        led_write(led);
   10410:	d0a6b443 	ldbu	r2,-25903(gp)
   10414:	10803fcc 	andi	r2,r2,255
   10418:	1009883a 	mov	r4,r2
   1041c:	00102640 	call	10264 <led_write>
    }

    if (pwm > PWM_PERIOD) {
   10420:	d0a6b403 	ldbu	r2,-25904(gp)
   10424:	10803fcc 	andi	r2,r2,255
   10428:	1080201c 	xori	r2,r2,128
   1042c:	10bfe004 	addi	r2,r2,-128
   10430:	10800450 	cmplti	r2,r2,17
   10434:	1000021e 	bne	r2,zero,10440 <sys_timer_isr+0xe4>
        pwm = 0;
   10438:	d026b405 	stb	zero,-25904(gp)
    } else {
        pwm++;
    }

}
   1043c:	00000306 	br	1044c <sys_timer_isr+0xf0>
        pwm++;
   10440:	d0a6b403 	ldbu	r2,-25904(gp)
   10444:	10800044 	addi	r2,r2,1
   10448:	d0a6b405 	stb	r2,-25904(gp)
}
   1044c:	0001883a 	nop
   10450:	e037883a 	mov	sp,fp
   10454:	dfc00117 	ldw	ra,4(sp)
   10458:	df000017 	ldw	fp,0(sp)
   1045c:	dec00204 	addi	sp,sp,8
   10460:	f800283a 	ret

00010464 <timer_init>:

void timer_init(void * isr) {
   10464:	defffd04 	addi	sp,sp,-12
   10468:	dfc00215 	stw	ra,8(sp)
   1046c:	df000115 	stw	fp,4(sp)
   10470:	df000104 	addi	fp,sp,4
   10474:	e13fff15 	stw	r4,-4(fp)

    IOWR_ALTERA_AVALON_TIMER_CONTROL(TIMER_BASE, 0x0003);
   10478:	00c000c4 	movi	r3,3
   1047c:	008000b4 	movhi	r2,2
   10480:	10c40135 	stwio	r3,4100(r2)
    IOWR_ALTERA_AVALON_TIMER_STATUS(TIMER_BASE, 0);
   10484:	0007883a 	mov	r3,zero
   10488:	008000b4 	movhi	r2,2
   1048c:	10c40035 	stwio	r3,4096(r2)
    IOWR_ALTERA_AVALON_TIMER_PERIODL(TIMER_BASE, 0x0900);
   10490:	00c24004 	movi	r3,2304
   10494:	008000b4 	movhi	r2,2
   10498:	10c40235 	stwio	r3,4104(r2)
    IOWR_ALTERA_AVALON_TIMER_PERIODH(TIMER_BASE, 0x0000);
   1049c:	0007883a 	mov	r3,zero
   104a0:	008000b4 	movhi	r2,2
   104a4:	10c40335 	stwio	r3,4108(r2)
    alt_irq_register(TIMER_IRQ, 0, isr);
   104a8:	e0bfff17 	ldw	r2,-4(fp)
   104ac:	100d883a 	mov	r6,r2
   104b0:	000b883a 	mov	r5,zero
   104b4:	0009883a 	mov	r4,zero
   104b8:	0011f640 	call	11f64 <alt_irq_register>
    IOWR_ALTERA_AVALON_TIMER_CONTROL(TIMER_BASE, 0x0007);
   104bc:	00c001c4 	movi	r3,7
   104c0:	008000b4 	movhi	r2,2
   104c4:	10c40135 	stwio	r3,4100(r2)
}
   104c8:	0001883a 	nop
   104cc:	e037883a 	mov	sp,fp
   104d0:	dfc00117 	ldw	ra,4(sp)
   104d4:	df000017 	ldw	fp,0(sp)
   104d8:	dec00204 	addi	sp,sp,8
   104dc:	f800283a 	ret

000104e0 <average>:

alt_32 average(alt_32 *m, int beta[]){
   104e0:	defffa04 	addi	sp,sp,-24
   104e4:	dfc00515 	stw	ra,20(sp)
   104e8:	df000415 	stw	fp,16(sp)
   104ec:	df000404 	addi	fp,sp,16
   104f0:	e13ffd15 	stw	r4,-12(fp)
   104f4:	e17ffc15 	stw	r5,-16(fp)
	int sum = 0;
   104f8:	e03fff15 	stw	zero,-4(fp)
	for(int i=0; i<FILTER_ORDER; i++){
   104fc:	e03ffe15 	stw	zero,-8(fp)
   10500:	00001306 	br	10550 <average+0x70>
		sum += (int)m[i]* beta[i];
   10504:	e0bffe17 	ldw	r2,-8(fp)
   10508:	100490ba 	slli	r2,r2,2
   1050c:	e0fffd17 	ldw	r3,-12(fp)
   10510:	1885883a 	add	r2,r3,r2
   10514:	11000017 	ldw	r4,0(r2)
   10518:	e0bffe17 	ldw	r2,-8(fp)
   1051c:	100490ba 	slli	r2,r2,2
   10520:	e0fffc17 	ldw	r3,-16(fp)
   10524:	1885883a 	add	r2,r3,r2
   10528:	10800017 	ldw	r2,0(r2)
   1052c:	100b883a 	mov	r5,r2
   10530:	0010d080 	call	10d08 <__mulsi3>
   10534:	1007883a 	mov	r3,r2
   10538:	e0bfff17 	ldw	r2,-4(fp)
   1053c:	10c5883a 	add	r2,r2,r3
   10540:	e0bfff15 	stw	r2,-4(fp)
	for(int i=0; i<FILTER_ORDER; i++){
   10544:	e0bffe17 	ldw	r2,-8(fp)
   10548:	10800044 	addi	r2,r2,1
   1054c:	e0bffe15 	stw	r2,-8(fp)
   10550:	e0bffe17 	ldw	r2,-8(fp)
   10554:	10800c50 	cmplti	r2,r2,49
   10558:	103fea1e 	bne	r2,zero,10504 <average+0x24>
	}
	sum /= 10000;
   1055c:	e0bfff17 	ldw	r2,-4(fp)
   10560:	0149c404 	movi	r5,10000
   10564:	1009883a 	mov	r4,r2
   10568:	0010b540 	call	10b54 <__divsi3>
   1056c:	e0bfff15 	stw	r2,-4(fp)
	return (alt_32)sum;
   10570:	e0bfff17 	ldw	r2,-4(fp)
}
   10574:	e037883a 	mov	sp,fp
   10578:	dfc00117 	ldw	ra,4(sp)
   1057c:	df000017 	ldw	fp,0(sp)
   10580:	dec00204 	addi	sp,sp,8
   10584:	f800283a 	ret

00010588 <fixed>:

void fixed(float coefficients_f[], int *coefficients_i[]){
   10588:	defffb04 	addi	sp,sp,-20
   1058c:	dfc00415 	stw	ra,16(sp)
   10590:	df000315 	stw	fp,12(sp)
   10594:	df000304 	addi	fp,sp,12
   10598:	e13ffe15 	stw	r4,-8(fp)
   1059c:	e17ffd15 	stw	r5,-12(fp)
	for(int i=0; i<FILTER_ORDER; i++){
   105a0:	e03fff15 	stw	zero,-4(fp)
   105a4:	00001706 	br	10604 <fixed+0x7c>
			coefficients_i[i] = (int)(coefficients_f[i] * 10000);
   105a8:	e0bfff17 	ldw	r2,-4(fp)
   105ac:	100490ba 	slli	r2,r2,2
   105b0:	e0fffe17 	ldw	r3,-8(fp)
   105b4:	1885883a 	add	r2,r3,r2
   105b8:	10c00017 	ldw	r3,0(r2)
   105bc:	01518734 	movhi	r5,17948
   105c0:	29500004 	addi	r5,r5,16384
   105c4:	1809883a 	mov	r4,r3
   105c8:	0010d300 	call	10d30 <__mulsf3>
   105cc:	1007883a 	mov	r3,r2
   105d0:	1805883a 	mov	r2,r3
   105d4:	1009883a 	mov	r4,r2
   105d8:	001114c0 	call	1114c <__fixsfsi>
   105dc:	1009883a 	mov	r4,r2
   105e0:	e0bfff17 	ldw	r2,-4(fp)
   105e4:	100490ba 	slli	r2,r2,2
   105e8:	e0fffd17 	ldw	r3,-12(fp)
   105ec:	1885883a 	add	r2,r3,r2
   105f0:	2007883a 	mov	r3,r4
   105f4:	10c00015 	stw	r3,0(r2)
	for(int i=0; i<FILTER_ORDER; i++){
   105f8:	e0bfff17 	ldw	r2,-4(fp)
   105fc:	10800044 	addi	r2,r2,1
   10600:	e0bfff15 	stw	r2,-4(fp)
   10604:	e0bfff17 	ldw	r2,-4(fp)
   10608:	10800c50 	cmplti	r2,r2,49
   1060c:	103fe61e 	bne	r2,zero,105a8 <fixed+0x20>
	}
}
   10610:	0001883a 	nop
   10614:	0001883a 	nop
   10618:	e037883a 	mov	sp,fp
   1061c:	dfc00117 	ldw	ra,4(sp)
   10620:	df000017 	ldw	fp,0(sp)
   10624:	dec00204 	addi	sp,sp,8
   10628:	f800283a 	ret

0001062c <BCD>:

void BCD(int number){
   1062c:	defffa04 	addi	sp,sp,-24
   10630:	dfc00515 	stw	ra,20(sp)
   10634:	df000415 	stw	fp,16(sp)
   10638:	df000404 	addi	fp,sp,16
   1063c:	e13ffc15 	stw	r4,-16(fp)

    int ones = number % 10;
   10640:	e0bffc17 	ldw	r2,-16(fp)
   10644:	01400284 	movi	r5,10
   10648:	1009883a 	mov	r4,r2
   1064c:	0010bd40 	call	10bd4 <__modsi3>
   10650:	e0bfff15 	stw	r2,-4(fp)
    int tens =(number / 10) % 10;
   10654:	e0bffc17 	ldw	r2,-16(fp)
   10658:	01400284 	movi	r5,10
   1065c:	1009883a 	mov	r4,r2
   10660:	0010b540 	call	10b54 <__divsi3>
   10664:	01400284 	movi	r5,10
   10668:	1009883a 	mov	r4,r2
   1066c:	0010bd40 	call	10bd4 <__modsi3>
   10670:	e0bffe15 	stw	r2,-8(fp)
    int hundreds = (number/100)%10;
   10674:	e0bffc17 	ldw	r2,-16(fp)
   10678:	01401904 	movi	r5,100
   1067c:	1009883a 	mov	r4,r2
   10680:	0010b540 	call	10b54 <__divsi3>
   10684:	01400284 	movi	r5,10
   10688:	1009883a 	mov	r4,r2
   1068c:	0010bd40 	call	10bd4 <__modsi3>
   10690:	e0bffd15 	stw	r2,-12(fp)

    switch (ones) {
   10694:	e0bfff17 	ldw	r2,-4(fp)
   10698:	108002a8 	cmpgeui	r2,r2,10
   1069c:	1000381e 	bne	r2,zero,10780 <BCD+0x154>
   106a0:	e0bfff17 	ldw	r2,-4(fp)
   106a4:	100690ba 	slli	r3,r2,2
   106a8:	00800074 	movhi	r2,1
   106ac:	1885883a 	add	r2,r3,r2
   106b0:	1081ae17 	ldw	r2,1720(r2)
   106b4:	1000683a 	jmp	r2
   106b8:	000106e0 	cmpeqi	zero,zero,1051
   106bc:	000106f0 	cmpltui	zero,zero,1051
   106c0:	00010700 	call	1070 <__reset-0xef90>
   106c4:	00010710 	cmplti	zero,zero,1052
   106c8:	00010720 	cmpeqi	zero,zero,1052
   106cc:	00010730 	cmpltui	zero,zero,1052
   106d0:	00010740 	call	1074 <__reset-0xef8c>
   106d4:	00010750 	cmplti	zero,zero,1053
   106d8:	00010760 	cmpeqi	zero,zero,1053
   106dc:	00010770 	cmpltui	zero,zero,1053
        case 0:
            IOWR_ALTERA_AVALON_PIO_DATA(HEX0_BASE, 0b1000000);
   106e0:	00c01004 	movi	r3,64
   106e4:	008000b4 	movhi	r2,2
   106e8:	10c40c35 	stwio	r3,4144(r2)
            break;
   106ec:	00002806 	br	10790 <BCD+0x164>
        case 1:
            IOWR_ALTERA_AVALON_PIO_DATA(HEX0_BASE, 0b1111001);
   106f0:	00c01e44 	movi	r3,121
   106f4:	008000b4 	movhi	r2,2
   106f8:	10c40c35 	stwio	r3,4144(r2)
            break;
   106fc:	00002406 	br	10790 <BCD+0x164>
        case 2:
            IOWR_ALTERA_AVALON_PIO_DATA(HEX0_BASE, 0b0100100);
   10700:	00c00904 	movi	r3,36
   10704:	008000b4 	movhi	r2,2
   10708:	10c40c35 	stwio	r3,4144(r2)
            break;
   1070c:	00002006 	br	10790 <BCD+0x164>
        case 3:
            IOWR_ALTERA_AVALON_PIO_DATA(HEX0_BASE, 0b0110000);
   10710:	00c00c04 	movi	r3,48
   10714:	008000b4 	movhi	r2,2
   10718:	10c40c35 	stwio	r3,4144(r2)
            break;
   1071c:	00001c06 	br	10790 <BCD+0x164>
        case 4:
            IOWR_ALTERA_AVALON_PIO_DATA(HEX0_BASE, 0b0011001);
   10720:	00c00644 	movi	r3,25
   10724:	008000b4 	movhi	r2,2
   10728:	10c40c35 	stwio	r3,4144(r2)
            break;
   1072c:	00001806 	br	10790 <BCD+0x164>
        case 5:
            IOWR_ALTERA_AVALON_PIO_DATA(HEX0_BASE, 0b0010010);
   10730:	00c00484 	movi	r3,18
   10734:	008000b4 	movhi	r2,2
   10738:	10c40c35 	stwio	r3,4144(r2)
            break;
   1073c:	00001406 	br	10790 <BCD+0x164>
        case 6:
            IOWR_ALTERA_AVALON_PIO_DATA(HEX0_BASE, 0b0000010);
   10740:	00c00084 	movi	r3,2
   10744:	008000b4 	movhi	r2,2
   10748:	10c40c35 	stwio	r3,4144(r2)
            break;
   1074c:	00001006 	br	10790 <BCD+0x164>
        case 7:
            IOWR_ALTERA_AVALON_PIO_DATA(HEX0_BASE, 0b1111000);
   10750:	00c01e04 	movi	r3,120
   10754:	008000b4 	movhi	r2,2
   10758:	10c40c35 	stwio	r3,4144(r2)
            break;
   1075c:	00000c06 	br	10790 <BCD+0x164>
        case 8:
            IOWR_ALTERA_AVALON_PIO_DATA(HEX0_BASE, 0b0000000);
   10760:	0007883a 	mov	r3,zero
   10764:	008000b4 	movhi	r2,2
   10768:	10c40c35 	stwio	r3,4144(r2)
            break;
   1076c:	00000806 	br	10790 <BCD+0x164>
        case 9:
            IOWR_ALTERA_AVALON_PIO_DATA(HEX0_BASE, 0b0010000);
   10770:	00c00404 	movi	r3,16
   10774:	008000b4 	movhi	r2,2
   10778:	10c40c35 	stwio	r3,4144(r2)
            break;
   1077c:	00000406 	br	10790 <BCD+0x164>
        default:
        	IOWR_ALTERA_AVALON_PIO_DATA(HEX0_BASE, 0b1000000);
   10780:	00c01004 	movi	r3,64
   10784:	008000b4 	movhi	r2,2
   10788:	10c40c35 	stwio	r3,4144(r2)
        	break;
   1078c:	0001883a 	nop

    }

    switch (tens) {
   10790:	e0bffe17 	ldw	r2,-8(fp)
   10794:	108002a8 	cmpgeui	r2,r2,10
   10798:	1000381e 	bne	r2,zero,1087c <BCD+0x250>
   1079c:	e0bffe17 	ldw	r2,-8(fp)
   107a0:	100690ba 	slli	r3,r2,2
   107a4:	00800074 	movhi	r2,1
   107a8:	1885883a 	add	r2,r3,r2
   107ac:	1081ed17 	ldw	r2,1972(r2)
   107b0:	1000683a 	jmp	r2
   107b4:	000107dc 	xori	zero,zero,1055
   107b8:	000107ec 	andhi	zero,zero,1055
   107bc:	000107fc 	xorhi	zero,zero,1055
   107c0:	0001080c 	andi	zero,zero,1056
   107c4:	0001081c 	xori	zero,zero,1056
   107c8:	0001082c 	andhi	zero,zero,1056
   107cc:	0001083c 	xorhi	zero,zero,1056
   107d0:	0001084c 	andi	zero,zero,1057
   107d4:	0001085c 	xori	zero,zero,1057
   107d8:	0001086c 	andhi	zero,zero,1057
        case 0:
            IOWR_ALTERA_AVALON_PIO_DATA(HEX1_BASE, 0b1000000);
   107dc:	00c01004 	movi	r3,64
   107e0:	008000b4 	movhi	r2,2
   107e4:	10c40835 	stwio	r3,4128(r2)
            break;
   107e8:	00002806 	br	1088c <BCD+0x260>
        case 1:
            IOWR_ALTERA_AVALON_PIO_DATA(HEX1_BASE, 0b1111001);
   107ec:	00c01e44 	movi	r3,121
   107f0:	008000b4 	movhi	r2,2
   107f4:	10c40835 	stwio	r3,4128(r2)
            break;
   107f8:	00002406 	br	1088c <BCD+0x260>
        case 2:
            IOWR_ALTERA_AVALON_PIO_DATA(HEX1_BASE, 0b0100100);
   107fc:	00c00904 	movi	r3,36
   10800:	008000b4 	movhi	r2,2
   10804:	10c40835 	stwio	r3,4128(r2)
            break;
   10808:	00002006 	br	1088c <BCD+0x260>
        case 3:
            IOWR_ALTERA_AVALON_PIO_DATA(HEX1_BASE, 0b0110000);
   1080c:	00c00c04 	movi	r3,48
   10810:	008000b4 	movhi	r2,2
   10814:	10c40835 	stwio	r3,4128(r2)
            break;
   10818:	00001c06 	br	1088c <BCD+0x260>
        case 4:
            IOWR_ALTERA_AVALON_PIO_DATA(HEX1_BASE, 0b0011001);
   1081c:	00c00644 	movi	r3,25
   10820:	008000b4 	movhi	r2,2
   10824:	10c40835 	stwio	r3,4128(r2)
            break;
   10828:	00001806 	br	1088c <BCD+0x260>
        case 5:
            IOWR_ALTERA_AVALON_PIO_DATA(HEX1_BASE, 0b0010010);
   1082c:	00c00484 	movi	r3,18
   10830:	008000b4 	movhi	r2,2
   10834:	10c40835 	stwio	r3,4128(r2)
            break;
   10838:	00001406 	br	1088c <BCD+0x260>
        case 6:
            IOWR_ALTERA_AVALON_PIO_DATA(HEX1_BASE, 0b0000010);
   1083c:	00c00084 	movi	r3,2
   10840:	008000b4 	movhi	r2,2
   10844:	10c40835 	stwio	r3,4128(r2)
            break;
   10848:	00001006 	br	1088c <BCD+0x260>
        case 7:
            IOWR_ALTERA_AVALON_PIO_DATA(HEX1_BASE, 0b1111000);
   1084c:	00c01e04 	movi	r3,120
   10850:	008000b4 	movhi	r2,2
   10854:	10c40835 	stwio	r3,4128(r2)
            break;
   10858:	00000c06 	br	1088c <BCD+0x260>
        case 8:
            IOWR_ALTERA_AVALON_PIO_DATA(HEX1_BASE, 0b0000000);
   1085c:	0007883a 	mov	r3,zero
   10860:	008000b4 	movhi	r2,2
   10864:	10c40835 	stwio	r3,4128(r2)
            break;
   10868:	00000806 	br	1088c <BCD+0x260>
        case 9:
        	 IOWR_ALTERA_AVALON_PIO_DATA(HEX1_BASE, 0b0010000);
   1086c:	00c00404 	movi	r3,16
   10870:	008000b4 	movhi	r2,2
   10874:	10c40835 	stwio	r3,4128(r2)
        	 break;
   10878:	00000406 	br	1088c <BCD+0x260>
        default:
             IOWR_ALTERA_AVALON_PIO_DATA(HEX1_BASE, 0b1000000);
   1087c:	00c01004 	movi	r3,64
   10880:	008000b4 	movhi	r2,2
   10884:	10c40835 	stwio	r3,4128(r2)
             break;
   10888:	0001883a 	nop
    }
    switch (hundreds) {
   1088c:	e0bffd17 	ldw	r2,-12(fp)
   10890:	108002a8 	cmpgeui	r2,r2,10
   10894:	10002e1e 	bne	r2,zero,10950 <BCD+0x324>
   10898:	e0bffd17 	ldw	r2,-12(fp)
   1089c:	100690ba 	slli	r3,r2,2
   108a0:	00800074 	movhi	r2,1
   108a4:	1885883a 	add	r2,r3,r2
   108a8:	10822c17 	ldw	r2,2224(r2)
   108ac:	1000683a 	jmp	r2
   108b0:	000108d8 	cmpnei	zero,zero,1059
   108b4:	000108e4 	muli	zero,zero,1059
   108b8:	000108f0 	cmpltui	zero,zero,1059
   108bc:	000108fc 	xorhi	zero,zero,1059
   108c0:	00010908 	cmpgei	zero,zero,1060
   108c4:	00010914 	movui	zero,1060
   108c8:	00010920 	cmpeqi	zero,zero,1060
   108cc:	0001092c 	andhi	zero,zero,1060
   108d0:	00010938 	rdprs	zero,zero,1060
   108d4:	00010944 	movi	zero,1061
    	case 0:
             IOWR_ALTERA_AVALON_PIO_DATA(HEX2_BASE, 0b1000000);
   108d8:	00801004 	movi	r2,64
   108dc:	00800035 	stwio	r2,0(zero)
             break;
   108e0:	00001e06 	br	1095c <BCD+0x330>
        case 1:
        	IOWR_ALTERA_AVALON_PIO_DATA(HEX2_BASE, 0b1111001);
   108e4:	00801e44 	movi	r2,121
   108e8:	00800035 	stwio	r2,0(zero)
        	break;
   108ec:	00001b06 	br	1095c <BCD+0x330>
        case 2:
        	IOWR_ALTERA_AVALON_PIO_DATA(HEX2_BASE, 0b0100100);
   108f0:	00800904 	movi	r2,36
   108f4:	00800035 	stwio	r2,0(zero)
        	break;
   108f8:	00001806 	br	1095c <BCD+0x330>
        case 3:
        	IOWR_ALTERA_AVALON_PIO_DATA(HEX2_BASE, 0b0110000);
   108fc:	00800c04 	movi	r2,48
   10900:	00800035 	stwio	r2,0(zero)
        	break;
   10904:	00001506 	br	1095c <BCD+0x330>
        case 4:
        	IOWR_ALTERA_AVALON_PIO_DATA(HEX2_BASE, 0b0011001);
   10908:	00800644 	movi	r2,25
   1090c:	00800035 	stwio	r2,0(zero)
        	break;
   10910:	00001206 	br	1095c <BCD+0x330>
        case 5:
        	IOWR_ALTERA_AVALON_PIO_DATA(HEX2_BASE, 0b0100100);
   10914:	00800904 	movi	r2,36
   10918:	00800035 	stwio	r2,0(zero)
        	break;
   1091c:	00000f06 	br	1095c <BCD+0x330>
        case 6:
        	IOWR_ALTERA_AVALON_PIO_DATA(HEX2_BASE, 0b0000010);
   10920:	00800084 	movi	r2,2
   10924:	00800035 	stwio	r2,0(zero)
        	break;
   10928:	00000c06 	br	1095c <BCD+0x330>
       case 7:
            IOWR_ALTERA_AVALON_PIO_DATA(HEX2_BASE, 0b1111000);
   1092c:	00801e04 	movi	r2,120
   10930:	00800035 	stwio	r2,0(zero)
        	break;
   10934:	00000906 	br	1095c <BCD+0x330>
       case 8:
        	IOWR_ALTERA_AVALON_PIO_DATA(HEX2_BASE, 0b0000000);
   10938:	0005883a 	mov	r2,zero
   1093c:	00800035 	stwio	r2,0(zero)
        	break;
   10940:	00000606 	br	1095c <BCD+0x330>
       case 9:
        	IOWR_ALTERA_AVALON_PIO_DATA(HEX2_BASE, 0b0010000);
   10944:	00800404 	movi	r2,16
   10948:	00800035 	stwio	r2,0(zero)
        	break;
   1094c:	00000306 	br	1095c <BCD+0x330>
       default:
               	IOWR_ALTERA_AVALON_PIO_DATA(HEX2_BASE, 0b1000000);
   10950:	00801004 	movi	r2,64
   10954:	00800035 	stwio	r2,0(zero)
               	break;
   10958:	0001883a 	nop
    }
}
   1095c:	0001883a 	nop
   10960:	e037883a 	mov	sp,fp
   10964:	dfc00117 	ldw	ra,4(sp)
   10968:	df000017 	ldw	fp,0(sp)
   1096c:	dec00204 	addi	sp,sp,8
   10970:	f800283a 	ret

00010974 <main>:




int main() {
   10974:	deff9204 	addi	sp,sp,-440
   10978:	dfc06d15 	stw	ra,436(sp)
   1097c:	df006c15 	stw	fp,432(sp)
   10980:	df006c04 	addi	fp,sp,432

	BCD(15);
   10984:	010003c4 	movi	r4,15
   10988:	001062c0 	call	1062c <BCD>


    alt_32 x_read, y_read;

    alt_up_accelerometer_spi_dev * acc_dev;
    acc_dev = alt_up_accelerometer_spi_open_dev("/dev/accelerometer_spi");
   1098c:	01000074 	movhi	r4,1
   10990:	21180d04 	addi	r4,r4,24628
   10994:	00132000 	call	13200 <alt_up_accelerometer_spi_open_dev>
   10998:	e0bffd15 	stw	r2,-12(fp)

    if (acc_dev == NULL) { // if return 1, check if the spi ip name is "accelerometer_spi"
   1099c:	e0bffd17 	ldw	r2,-12(fp)
   109a0:	1000021e 	bne	r2,zero,109ac <main+0x38>
        return 1;
   109a4:	00800044 	movi	r2,1
   109a8:	00006506 	br	10b40 <main+0x1cc>
    }

    alt_32 x_output, y_output;
    int coefficients_i[FILTER_ORDER];
    float coefficients_f[] = {0.0046,    0.0074,   -0.0024,   -0.0071,    0.0033,    0.0001,   -0.0094,    0.0040,    0.0044,   -0.0133 ,  0.0030,    0.0114,   -0.0179,   -0.0011,    0.0223,   -0.0225,   -0.0109,    0.0396,   -0.0263,   -0.0338,   0.0752,   -0.0289,   -0.1204,    0.2879,    0.6369,    0.2879,   -0.1204,   -0.0289,    0.0752,   -0.0338,   -0.0263,    0.0396,   -0.0109,   -0.0225,    0.0223,   -0.0011,   -0.0179,    0.0114,    0.0030,   -0.0133,   0.0044,    0.0040,   -0.0094,    0.0001,    0.0033,   -0.0071 ,  -0.0024 ,   0.0074,    0.0046 };
   109ac:	e0ff9504 	addi	r3,fp,-428
   109b0:	00800074 	movhi	r2,1
   109b4:	10981704 	addi	r2,r2,24668
   109b8:	01003104 	movi	r4,196
   109bc:	200d883a 	mov	r6,r4
   109c0:	100b883a 	mov	r5,r2
   109c4:	1809883a 	mov	r4,r3
   109c8:	00119e00 	call	119e0 <memcpy>
    fixed(coefficients_f, coefficients_i);
   109cc:	e0ffc604 	addi	r3,fp,-232
   109d0:	e0bf9504 	addi	r2,fp,-428
   109d4:	180b883a 	mov	r5,r3
   109d8:	1009883a 	mov	r4,r2
   109dc:	00105880 	call	10588 <fixed>

    alt_32 *x_mem = malloc(FILTER_ORDER*sizeof(alt_32));
   109e0:	01003104 	movi	r4,196
   109e4:	001120c0 	call	1120c <malloc>
   109e8:	e0bffc15 	stw	r2,-16(fp)
    alt_32 *y_mem = malloc(FILTER_ORDER*sizeof(alt_32));
   109ec:	01003104 	movi	r4,196
   109f0:	001120c0 	call	1120c <malloc>
   109f4:	e0bffb15 	stw	r2,-20(fp)

    timer_init(sys_timer_isr);
   109f8:	01000074 	movhi	r4,1
   109fc:	2100d704 	addi	r4,r4,860
   10a00:	00104640 	call	10464 <timer_init>

    while (1) {

        alt_up_accelerometer_spi_read_x_axis(acc_dev, & x_read);
   10a04:	e0bff804 	addi	r2,fp,-32
   10a08:	100b883a 	mov	r5,r2
   10a0c:	e13ffd17 	ldw	r4,-12(fp)
   10a10:	00133500 	call	13350 <alt_up_accelerometer_spi_read_x_axis>

        for(int i=4; i>0; i--){
   10a14:	00800104 	movi	r2,4
   10a18:	e0bfff15 	stw	r2,-4(fp)
   10a1c:	00001006 	br	10a60 <main+0xec>
        x_mem[i] = x_mem[i-1]; }
   10a20:	e0ffff17 	ldw	r3,-4(fp)
   10a24:	00900034 	movhi	r2,16384
   10a28:	10bfffc4 	addi	r2,r2,-1
   10a2c:	1885883a 	add	r2,r3,r2
   10a30:	100490ba 	slli	r2,r2,2
   10a34:	e0fffc17 	ldw	r3,-16(fp)
   10a38:	1887883a 	add	r3,r3,r2
   10a3c:	e0bfff17 	ldw	r2,-4(fp)
   10a40:	100490ba 	slli	r2,r2,2
   10a44:	e13ffc17 	ldw	r4,-16(fp)
   10a48:	2085883a 	add	r2,r4,r2
   10a4c:	18c00017 	ldw	r3,0(r3)
   10a50:	10c00015 	stw	r3,0(r2)
        for(int i=4; i>0; i--){
   10a54:	e0bfff17 	ldw	r2,-4(fp)
   10a58:	10bfffc4 	addi	r2,r2,-1
   10a5c:	e0bfff15 	stw	r2,-4(fp)
   10a60:	e0bfff17 	ldw	r2,-4(fp)
   10a64:	00bfee16 	blt	zero,r2,10a20 <main+0xac>
        x_mem[0] = x_read;
   10a68:	e0fff817 	ldw	r3,-32(fp)
   10a6c:	e0bffc17 	ldw	r2,-16(fp)
   10a70:	10c00015 	stw	r3,0(r2)
        x_output = average(x_mem, coefficients_i);
   10a74:	e0bfc604 	addi	r2,fp,-232
   10a78:	100b883a 	mov	r5,r2
   10a7c:	e13ffc17 	ldw	r4,-16(fp)
   10a80:	00104e00 	call	104e0 <average>
   10a84:	e0bffa15 	stw	r2,-24(fp)
        alt_up_accelerometer_spi_read_y_axis(acc_dev, & y_read);
   10a88:	e0bff704 	addi	r2,fp,-36
   10a8c:	100b883a 	mov	r5,r2
   10a90:	e13ffd17 	ldw	r4,-12(fp)
   10a94:	00134240 	call	13424 <alt_up_accelerometer_spi_read_y_axis>

        for(int i=4; i>0; i--){
   10a98:	00800104 	movi	r2,4
   10a9c:	e0bffe15 	stw	r2,-8(fp)
   10aa0:	00001006 	br	10ae4 <main+0x170>
                y_mem[i] = y_mem[i-1]; }
   10aa4:	e0fffe17 	ldw	r3,-8(fp)
   10aa8:	00900034 	movhi	r2,16384
   10aac:	10bfffc4 	addi	r2,r2,-1
   10ab0:	1885883a 	add	r2,r3,r2
   10ab4:	100490ba 	slli	r2,r2,2
   10ab8:	e0fffb17 	ldw	r3,-20(fp)
   10abc:	1887883a 	add	r3,r3,r2
   10ac0:	e0bffe17 	ldw	r2,-8(fp)
   10ac4:	100490ba 	slli	r2,r2,2
   10ac8:	e13ffb17 	ldw	r4,-20(fp)
   10acc:	2085883a 	add	r2,r4,r2
   10ad0:	18c00017 	ldw	r3,0(r3)
   10ad4:	10c00015 	stw	r3,0(r2)
        for(int i=4; i>0; i--){
   10ad8:	e0bffe17 	ldw	r2,-8(fp)
   10adc:	10bfffc4 	addi	r2,r2,-1
   10ae0:	e0bffe15 	stw	r2,-8(fp)
   10ae4:	e0bffe17 	ldw	r2,-8(fp)
   10ae8:	00bfee16 	blt	zero,r2,10aa4 <main+0x130>
                y_mem[0] = y_read;
   10aec:	e0fff717 	ldw	r3,-36(fp)
   10af0:	e0bffb17 	ldw	r2,-20(fp)
   10af4:	10c00015 	stw	r3,0(r2)
                y_output = average(y_mem, coefficients_i);
   10af8:	e0bfc604 	addi	r2,fp,-232
   10afc:	100b883a 	mov	r5,r2
   10b00:	e13ffb17 	ldw	r4,-20(fp)
   10b04:	00104e00 	call	104e0 <average>
   10b08:	e0bff915 	stw	r2,-28(fp)
        alt_printf("x: %x , y: %x\n", x_output, y_output);
   10b0c:	e1bff917 	ldw	r6,-28(fp)
   10b10:	e17ffa17 	ldw	r5,-24(fp)
   10b14:	01000074 	movhi	r4,1
   10b18:	21181304 	addi	r4,r4,24652
   10b1c:	00122940 	call	12294 <alt_printf>
        convert_read(x_output, y_output, & level_x, & level_y, & led);
   10b20:	d0a6b444 	addi	r2,gp,-25903
   10b24:	d8800015 	stw	r2,0(sp)
   10b28:	d1e6b604 	addi	r7,gp,-25896
   10b2c:	d1a6b504 	addi	r6,gp,-25900
   10b30:	e17ff917 	ldw	r5,-28(fp)
   10b34:	e13ffa17 	ldw	r4,-24(fp)
   10b38:	00102980 	call	10298 <convert_read>
    while (1) {
   10b3c:	003fb106 	br	10a04 <main+0x90>
    }

}
   10b40:	e037883a 	mov	sp,fp
   10b44:	dfc00117 	ldw	ra,4(sp)
   10b48:	df000017 	ldw	fp,0(sp)
   10b4c:	dec00204 	addi	sp,sp,8
   10b50:	f800283a 	ret

00010b54 <__divsi3>:
   10b54:	20001a16 	blt	r4,zero,10bc0 <__divsi3+0x6c>
   10b58:	000f883a 	mov	r7,zero
   10b5c:	2800020e 	bge	r5,zero,10b68 <__divsi3+0x14>
   10b60:	014bc83a 	sub	r5,zero,r5
   10b64:	39c0005c 	xori	r7,r7,1
   10b68:	200d883a 	mov	r6,r4
   10b6c:	00c00044 	movi	r3,1
   10b70:	2900092e 	bgeu	r5,r4,10b98 <__divsi3+0x44>
   10b74:	00800804 	movi	r2,32
   10b78:	00c00044 	movi	r3,1
   10b7c:	00000106 	br	10b84 <__divsi3+0x30>
   10b80:	10001226 	beq	r2,zero,10bcc <__divsi3+0x78>
   10b84:	294b883a 	add	r5,r5,r5
   10b88:	10bfffc4 	addi	r2,r2,-1
   10b8c:	18c7883a 	add	r3,r3,r3
   10b90:	293ffb36 	bltu	r5,r4,10b80 <__divsi3+0x2c>
   10b94:	18000d26 	beq	r3,zero,10bcc <__divsi3+0x78>
   10b98:	0005883a 	mov	r2,zero
   10b9c:	31400236 	bltu	r6,r5,10ba8 <__divsi3+0x54>
   10ba0:	314dc83a 	sub	r6,r6,r5
   10ba4:	10c4b03a 	or	r2,r2,r3
   10ba8:	1806d07a 	srli	r3,r3,1
   10bac:	280ad07a 	srli	r5,r5,1
   10bb0:	183ffa1e 	bne	r3,zero,10b9c <__divsi3+0x48>
   10bb4:	38000126 	beq	r7,zero,10bbc <__divsi3+0x68>
   10bb8:	0085c83a 	sub	r2,zero,r2
   10bbc:	f800283a 	ret
   10bc0:	0109c83a 	sub	r4,zero,r4
   10bc4:	01c00044 	movi	r7,1
   10bc8:	003fe406 	br	10b5c <__divsi3+0x8>
   10bcc:	0005883a 	mov	r2,zero
   10bd0:	003ff806 	br	10bb4 <__divsi3+0x60>

00010bd4 <__modsi3>:
   10bd4:	20001716 	blt	r4,zero,10c34 <__modsi3+0x60>
   10bd8:	000f883a 	mov	r7,zero
   10bdc:	2005883a 	mov	r2,r4
   10be0:	2800010e 	bge	r5,zero,10be8 <__modsi3+0x14>
   10be4:	014bc83a 	sub	r5,zero,r5
   10be8:	00c00044 	movi	r3,1
   10bec:	2900092e 	bgeu	r5,r4,10c14 <__modsi3+0x40>
   10bf0:	01800804 	movi	r6,32
   10bf4:	00c00044 	movi	r3,1
   10bf8:	00000106 	br	10c00 <__modsi3+0x2c>
   10bfc:	30001026 	beq	r6,zero,10c40 <__modsi3+0x6c>
   10c00:	294b883a 	add	r5,r5,r5
   10c04:	31bfffc4 	addi	r6,r6,-1
   10c08:	18c7883a 	add	r3,r3,r3
   10c0c:	293ffb36 	bltu	r5,r4,10bfc <__modsi3+0x28>
   10c10:	18000b26 	beq	r3,zero,10c40 <__modsi3+0x6c>
   10c14:	1806d07a 	srli	r3,r3,1
   10c18:	11400136 	bltu	r2,r5,10c20 <__modsi3+0x4c>
   10c1c:	1145c83a 	sub	r2,r2,r5
   10c20:	280ad07a 	srli	r5,r5,1
   10c24:	183ffb1e 	bne	r3,zero,10c14 <__modsi3+0x40>
   10c28:	38000126 	beq	r7,zero,10c30 <__modsi3+0x5c>
   10c2c:	0085c83a 	sub	r2,zero,r2
   10c30:	f800283a 	ret
   10c34:	0109c83a 	sub	r4,zero,r4
   10c38:	01c00044 	movi	r7,1
   10c3c:	003fe706 	br	10bdc <__modsi3+0x8>
   10c40:	2005883a 	mov	r2,r4
   10c44:	003ff806 	br	10c28 <__modsi3+0x54>

00010c48 <__udivsi3>:
   10c48:	200d883a 	mov	r6,r4
   10c4c:	2900152e 	bgeu	r5,r4,10ca4 <__udivsi3+0x5c>
   10c50:	28001416 	blt	r5,zero,10ca4 <__udivsi3+0x5c>
   10c54:	00800804 	movi	r2,32
   10c58:	00c00044 	movi	r3,1
   10c5c:	00000206 	br	10c68 <__udivsi3+0x20>
   10c60:	10000e26 	beq	r2,zero,10c9c <__udivsi3+0x54>
   10c64:	28000416 	blt	r5,zero,10c78 <__udivsi3+0x30>
   10c68:	294b883a 	add	r5,r5,r5
   10c6c:	10bfffc4 	addi	r2,r2,-1
   10c70:	18c7883a 	add	r3,r3,r3
   10c74:	293ffa36 	bltu	r5,r4,10c60 <__udivsi3+0x18>
   10c78:	18000826 	beq	r3,zero,10c9c <__udivsi3+0x54>
   10c7c:	0005883a 	mov	r2,zero
   10c80:	31400236 	bltu	r6,r5,10c8c <__udivsi3+0x44>
   10c84:	314dc83a 	sub	r6,r6,r5
   10c88:	10c4b03a 	or	r2,r2,r3
   10c8c:	1806d07a 	srli	r3,r3,1
   10c90:	280ad07a 	srli	r5,r5,1
   10c94:	183ffa1e 	bne	r3,zero,10c80 <__udivsi3+0x38>
   10c98:	f800283a 	ret
   10c9c:	0005883a 	mov	r2,zero
   10ca0:	f800283a 	ret
   10ca4:	00c00044 	movi	r3,1
   10ca8:	003ff406 	br	10c7c <__udivsi3+0x34>

00010cac <__umodsi3>:
   10cac:	2005883a 	mov	r2,r4
   10cb0:	2900132e 	bgeu	r5,r4,10d00 <__umodsi3+0x54>
   10cb4:	28001216 	blt	r5,zero,10d00 <__umodsi3+0x54>
   10cb8:	01800804 	movi	r6,32
   10cbc:	00c00044 	movi	r3,1
   10cc0:	00000206 	br	10ccc <__umodsi3+0x20>
   10cc4:	30000c26 	beq	r6,zero,10cf8 <__umodsi3+0x4c>
   10cc8:	28000416 	blt	r5,zero,10cdc <__umodsi3+0x30>
   10ccc:	294b883a 	add	r5,r5,r5
   10cd0:	31bfffc4 	addi	r6,r6,-1
   10cd4:	18c7883a 	add	r3,r3,r3
   10cd8:	293ffa36 	bltu	r5,r4,10cc4 <__umodsi3+0x18>
   10cdc:	18000626 	beq	r3,zero,10cf8 <__umodsi3+0x4c>
   10ce0:	1806d07a 	srli	r3,r3,1
   10ce4:	11400136 	bltu	r2,r5,10cec <__umodsi3+0x40>
   10ce8:	1145c83a 	sub	r2,r2,r5
   10cec:	280ad07a 	srli	r5,r5,1
   10cf0:	183ffb1e 	bne	r3,zero,10ce0 <__umodsi3+0x34>
   10cf4:	f800283a 	ret
   10cf8:	2005883a 	mov	r2,r4
   10cfc:	f800283a 	ret
   10d00:	00c00044 	movi	r3,1
   10d04:	003ff606 	br	10ce0 <__umodsi3+0x34>

00010d08 <__mulsi3>:
   10d08:	0005883a 	mov	r2,zero
   10d0c:	20000726 	beq	r4,zero,10d2c <__mulsi3+0x24>
   10d10:	20c0004c 	andi	r3,r4,1
   10d14:	2008d07a 	srli	r4,r4,1
   10d18:	18000126 	beq	r3,zero,10d20 <__mulsi3+0x18>
   10d1c:	1145883a 	add	r2,r2,r5
   10d20:	294b883a 	add	r5,r5,r5
   10d24:	203ffa1e 	bne	r4,zero,10d10 <__mulsi3+0x8>
   10d28:	f800283a 	ret
   10d2c:	f800283a 	ret

00010d30 <__mulsf3>:
   10d30:	defff504 	addi	sp,sp,-44
   10d34:	2004d5fa 	srli	r2,r4,23
   10d38:	dd800715 	stw	r22,28(sp)
   10d3c:	202cd7fa 	srli	r22,r4,31
   10d40:	00c02034 	movhi	r3,128
   10d44:	dd400615 	stw	r21,24(sp)
   10d48:	dd000515 	stw	r20,20(sp)
   10d4c:	18ffffc4 	addi	r3,r3,-1
   10d50:	dfc00a15 	stw	ra,40(sp)
   10d54:	df000915 	stw	fp,36(sp)
   10d58:	ddc00815 	stw	r23,32(sp)
   10d5c:	dcc00415 	stw	r19,16(sp)
   10d60:	dc800315 	stw	r18,12(sp)
   10d64:	dc400215 	stw	r17,8(sp)
   10d68:	dc000115 	stw	r16,4(sp)
   10d6c:	10803fcc 	andi	r2,r2,255
   10d70:	192a703a 	and	r21,r3,r4
   10d74:	b029883a 	mov	r20,r22
   10d78:	10006d26 	beq	r2,zero,10f30 <__mulsf3+0x200>
   10d7c:	10c03fe0 	cmpeqi	r3,r2,255
   10d80:	1800701e 	bne	r3,zero,10f44 <__mulsf3+0x214>
   10d84:	a80890fa 	slli	r4,r21,3
   10d88:	14ffe044 	addi	r19,r2,-127
   10d8c:	0023883a 	mov	r17,zero
   10d90:	25410034 	orhi	r21,r4,1024
   10d94:	0039883a 	mov	fp,zero
   10d98:	2804d5fa 	srli	r2,r5,23
   10d9c:	04002034 	movhi	r16,128
   10da0:	843fffc4 	addi	r16,r16,-1
   10da4:	10803fcc 	andi	r2,r2,255
   10da8:	282ed7fa 	srli	r23,r5,31
   10dac:	8160703a 	and	r16,r16,r5
   10db0:	10005726 	beq	r2,zero,10f10 <__mulsf3+0x1e0>
   10db4:	10c03fe0 	cmpeqi	r3,r2,255
   10db8:	1800251e 	bne	r3,zero,10e50 <__mulsf3+0x120>
   10dbc:	802090fa 	slli	r16,r16,3
   10dc0:	10bfe044 	addi	r2,r2,-127
   10dc4:	14e5883a 	add	r18,r2,r19
   10dc8:	888002c8 	cmpgei	r2,r17,11
   10dcc:	84010034 	orhi	r16,r16,1024
   10dd0:	0007883a 	mov	r3,zero
   10dd4:	94c00044 	addi	r19,r18,1
   10dd8:	10002a1e 	bne	r2,zero,10e84 <__mulsf3+0x154>
   10ddc:	bda8f03a 	xor	r20,r23,r22
   10de0:	888000c8 	cmpgei	r2,r17,3
   10de4:	1000231e 	bne	r2,zero,10e74 <__mulsf3+0x144>
   10de8:	8c7fffc4 	addi	r17,r17,-1
   10dec:	8c4000a8 	cmpgeui	r17,r17,2
   10df0:	8800961e 	bne	r17,zero,1104c <__mulsf3+0x31c>
   10df4:	188000a0 	cmpeqi	r2,r3,2
   10df8:	1000571e 	bne	r2,zero,10f58 <__mulsf3+0x228>
   10dfc:	18c00060 	cmpeqi	r3,r3,1
   10e00:	18002826 	beq	r3,zero,10ea4 <__mulsf3+0x174>
   10e04:	0007883a 	mov	r3,zero
   10e08:	0009883a 	mov	r4,zero
   10e0c:	18803fcc 	andi	r2,r3,255
   10e10:	100495fa 	slli	r2,r2,23
   10e14:	a02897fa 	slli	r20,r20,31
   10e18:	1104b03a 	or	r2,r2,r4
   10e1c:	1504b03a 	or	r2,r2,r20
   10e20:	dfc00a17 	ldw	ra,40(sp)
   10e24:	df000917 	ldw	fp,36(sp)
   10e28:	ddc00817 	ldw	r23,32(sp)
   10e2c:	dd800717 	ldw	r22,28(sp)
   10e30:	dd400617 	ldw	r21,24(sp)
   10e34:	dd000517 	ldw	r20,20(sp)
   10e38:	dcc00417 	ldw	r19,16(sp)
   10e3c:	dc800317 	ldw	r18,12(sp)
   10e40:	dc400217 	ldw	r17,8(sp)
   10e44:	dc000117 	ldw	r16,4(sp)
   10e48:	dec00b04 	addi	sp,sp,44
   10e4c:	f800283a 	ret
   10e50:	9c803fc4 	addi	r18,r19,255
   10e54:	80004826 	beq	r16,zero,10f78 <__mulsf3+0x248>
   10e58:	8c4000d4 	ori	r17,r17,3
   10e5c:	888002c8 	cmpgei	r2,r17,11
   10e60:	bdacf03a 	xor	r22,r23,r22
   10e64:	9cc04004 	addi	r19,r19,256
   10e68:	1000af1e 	bne	r2,zero,11128 <__mulsf3+0x3f8>
   10e6c:	b029883a 	mov	r20,r22
   10e70:	00c000c4 	movi	r3,3
   10e74:	00800044 	movi	r2,1
   10e78:	1444983a 	sll	r2,r2,r17
   10e7c:	11014c0c 	andi	r4,r2,1328
   10e80:	20001b26 	beq	r4,zero,10ef0 <__mulsf3+0x1c0>
   10e84:	e08000a0 	cmpeqi	r2,fp,2
   10e88:	1000331e 	bne	r2,zero,10f58 <__mulsf3+0x228>
   10e8c:	e08000e0 	cmpeqi	r2,fp,3
   10e90:	10009a1e 	bne	r2,zero,110fc <__mulsf3+0x3cc>
   10e94:	e007883a 	mov	r3,fp
   10e98:	18c00060 	cmpeqi	r3,r3,1
   10e9c:	a821883a 	mov	r16,r21
   10ea0:	183fd81e 	bne	r3,zero,10e04 <__mulsf3+0xd4>
   10ea4:	98c01fc4 	addi	r3,r19,127
   10ea8:	00c0540e 	bge	zero,r3,10ffc <__mulsf3+0x2cc>
   10eac:	808001cc 	andi	r2,r16,7
   10eb0:	10000426 	beq	r2,zero,10ec4 <__mulsf3+0x194>
   10eb4:	808003cc 	andi	r2,r16,15
   10eb8:	10800120 	cmpeqi	r2,r2,4
   10ebc:	1000011e 	bne	r2,zero,10ec4 <__mulsf3+0x194>
   10ec0:	84000104 	addi	r16,r16,4
   10ec4:	8082002c 	andhi	r2,r16,2048
   10ec8:	10000426 	beq	r2,zero,10edc <__mulsf3+0x1ac>
   10ecc:	00be0034 	movhi	r2,63488
   10ed0:	10bfffc4 	addi	r2,r2,-1
   10ed4:	80a0703a 	and	r16,r16,r2
   10ed8:	98c02004 	addi	r3,r19,128
   10edc:	18803fc8 	cmpgei	r2,r3,255
   10ee0:	10001d1e 	bne	r2,zero,10f58 <__mulsf3+0x228>
   10ee4:	800891ba 	slli	r4,r16,6
   10ee8:	2008d27a 	srli	r4,r4,9
   10eec:	003fc706 	br	10e0c <__mulsf3+0xdc>
   10ef0:	1100900c 	andi	r4,r2,576
   10ef4:	20001b1e 	bne	r4,zero,10f64 <__mulsf3+0x234>
   10ef8:	1080220c 	andi	r2,r2,136
   10efc:	10005326 	beq	r2,zero,1104c <__mulsf3+0x31c>
   10f00:	b829883a 	mov	r20,r23
   10f04:	802b883a 	mov	r21,r16
   10f08:	1839883a 	mov	fp,r3
   10f0c:	003fdd06 	br	10e84 <__mulsf3+0x154>
   10f10:	80002f1e 	bne	r16,zero,10fd0 <__mulsf3+0x2a0>
   10f14:	8c400054 	ori	r17,r17,1
   10f18:	9825883a 	mov	r18,r19
   10f1c:	888002c8 	cmpgei	r2,r17,11
   10f20:	00c00044 	movi	r3,1
   10f24:	94c00044 	addi	r19,r18,1
   10f28:	103fac26 	beq	r2,zero,10ddc <__mulsf3+0xac>
   10f2c:	003fd506 	br	10e84 <__mulsf3+0x154>
   10f30:	a8001c1e 	bne	r21,zero,10fa4 <__mulsf3+0x274>
   10f34:	04400104 	movi	r17,4
   10f38:	0027883a 	mov	r19,zero
   10f3c:	07000044 	movi	fp,1
   10f40:	003f9506 	br	10d98 <__mulsf3+0x68>
   10f44:	a800131e 	bne	r21,zero,10f94 <__mulsf3+0x264>
   10f48:	04400204 	movi	r17,8
   10f4c:	04c03fc4 	movi	r19,255
   10f50:	07000084 	movi	fp,2
   10f54:	003f9006 	br	10d98 <__mulsf3+0x68>
   10f58:	00ffffc4 	movi	r3,-1
   10f5c:	0009883a 	mov	r4,zero
   10f60:	003faa06 	br	10e0c <__mulsf3+0xdc>
   10f64:	01002034 	movhi	r4,128
   10f68:	0029883a 	mov	r20,zero
   10f6c:	213fffc4 	addi	r4,r4,-1
   10f70:	00ffffc4 	movi	r3,-1
   10f74:	003fa506 	br	10e0c <__mulsf3+0xdc>
   10f78:	8c400094 	ori	r17,r17,2
   10f7c:	888002c8 	cmpgei	r2,r17,11
   10f80:	9cc04004 	addi	r19,r19,256
   10f84:	103fbf1e 	bne	r2,zero,10e84 <__mulsf3+0x154>
   10f88:	bda8f03a 	xor	r20,r23,r22
   10f8c:	00c00084 	movi	r3,2
   10f90:	003f9306 	br	10de0 <__mulsf3+0xb0>
   10f94:	04400304 	movi	r17,12
   10f98:	04c03fc4 	movi	r19,255
   10f9c:	070000c4 	movi	fp,3
   10fa0:	003f7d06 	br	10d98 <__mulsf3+0x68>
   10fa4:	a809883a 	mov	r4,r21
   10fa8:	d9400015 	stw	r5,0(sp)
   10fac:	00111bc0 	call	111bc <__clzsi2>
   10fb0:	10fffec4 	addi	r3,r2,-5
   10fb4:	04ffe284 	movi	r19,-118
   10fb8:	a8ea983a 	sll	r21,r21,r3
   10fbc:	d9400017 	ldw	r5,0(sp)
   10fc0:	98a7c83a 	sub	r19,r19,r2
   10fc4:	0023883a 	mov	r17,zero
   10fc8:	0039883a 	mov	fp,zero
   10fcc:	003f7206 	br	10d98 <__mulsf3+0x68>
   10fd0:	8009883a 	mov	r4,r16
   10fd4:	00111bc0 	call	111bc <__clzsi2>
   10fd8:	10fffec4 	addi	r3,r2,-5
   10fdc:	9885c83a 	sub	r2,r19,r2
   10fe0:	14bfe284 	addi	r18,r2,-118
   10fe4:	888002c8 	cmpgei	r2,r17,11
   10fe8:	80e0983a 	sll	r16,r16,r3
   10fec:	94c00044 	addi	r19,r18,1
   10ff0:	0007883a 	mov	r3,zero
   10ff4:	103f7926 	beq	r2,zero,10ddc <__mulsf3+0xac>
   10ff8:	003fa206 	br	10e84 <__mulsf3+0x154>
   10ffc:	00800044 	movi	r2,1
   11000:	10c7c83a 	sub	r3,r2,r3
   11004:	18800708 	cmpgei	r2,r3,28
   11008:	103f7e1e 	bne	r2,zero,10e04 <__mulsf3+0xd4>
   1100c:	98802784 	addi	r2,r19,158
   11010:	8084983a 	sll	r2,r16,r2
   11014:	80c6d83a 	srl	r3,r16,r3
   11018:	1004c03a 	cmpne	r2,r2,zero
   1101c:	1886b03a 	or	r3,r3,r2
   11020:	188001cc 	andi	r2,r3,7
   11024:	10000426 	beq	r2,zero,11038 <__mulsf3+0x308>
   11028:	188003cc 	andi	r2,r3,15
   1102c:	10800120 	cmpeqi	r2,r2,4
   11030:	1000011e 	bne	r2,zero,11038 <__mulsf3+0x308>
   11034:	18c00104 	addi	r3,r3,4
   11038:	1881002c 	andhi	r2,r3,1024
   1103c:	10003626 	beq	r2,zero,11118 <__mulsf3+0x3e8>
   11040:	00c00044 	movi	r3,1
   11044:	0009883a 	mov	r4,zero
   11048:	003f7006 	br	10e0c <__mulsf3+0xdc>
   1104c:	847fffcc 	andi	r17,r16,65535
   11050:	a82ed43a 	srli	r23,r21,16
   11054:	ad7fffcc 	andi	r21,r21,65535
   11058:	880b883a 	mov	r5,r17
   1105c:	a809883a 	mov	r4,r21
   11060:	0010d080 	call	10d08 <__mulsi3>
   11064:	8020d43a 	srli	r16,r16,16
   11068:	880b883a 	mov	r5,r17
   1106c:	b809883a 	mov	r4,r23
   11070:	1023883a 	mov	r17,r2
   11074:	0010d080 	call	10d08 <__mulsi3>
   11078:	800b883a 	mov	r5,r16
   1107c:	b809883a 	mov	r4,r23
   11080:	102d883a 	mov	r22,r2
   11084:	0010d080 	call	10d08 <__mulsi3>
   11088:	a80b883a 	mov	r5,r21
   1108c:	8009883a 	mov	r4,r16
   11090:	102b883a 	mov	r21,r2
   11094:	0010d080 	call	10d08 <__mulsi3>
   11098:	8806d43a 	srli	r3,r17,16
   1109c:	1585883a 	add	r2,r2,r22
   110a0:	1887883a 	add	r3,r3,r2
   110a4:	1d80022e 	bgeu	r3,r22,110b0 <__mulsf3+0x380>
   110a8:	00800074 	movhi	r2,1
   110ac:	a8ab883a 	add	r21,r21,r2
   110b0:	1808943a 	slli	r4,r3,16
   110b4:	1820d43a 	srli	r16,r3,16
   110b8:	8c7fffcc 	andi	r17,r17,65535
   110bc:	2447883a 	add	r3,r4,r17
   110c0:	180491ba 	slli	r2,r3,6
   110c4:	8561883a 	add	r16,r16,r21
   110c8:	802091ba 	slli	r16,r16,6
   110cc:	1806d6ba 	srli	r3,r3,26
   110d0:	1004c03a 	cmpne	r2,r2,zero
   110d4:	8102002c 	andhi	r4,r16,2048
   110d8:	10c4b03a 	or	r2,r2,r3
   110dc:	80a0b03a 	or	r16,r16,r2
   110e0:	20000b26 	beq	r4,zero,11110 <__mulsf3+0x3e0>
   110e4:	8004d07a 	srli	r2,r16,1
   110e8:	8400004c 	andi	r16,r16,1
   110ec:	1420b03a 	or	r16,r2,r16
   110f0:	003f6c06 	br	10ea4 <__mulsf3+0x174>
   110f4:	b829883a 	mov	r20,r23
   110f8:	802b883a 	mov	r21,r16
   110fc:	00802034 	movhi	r2,128
   11100:	a9001034 	orhi	r4,r21,64
   11104:	10bfffc4 	addi	r2,r2,-1
   11108:	2088703a 	and	r4,r4,r2
   1110c:	003f9806 	br	10f70 <__mulsf3+0x240>
   11110:	9027883a 	mov	r19,r18
   11114:	003f6306 	br	10ea4 <__mulsf3+0x174>
   11118:	180891ba 	slli	r4,r3,6
   1111c:	0007883a 	mov	r3,zero
   11120:	2008d27a 	srli	r4,r4,9
   11124:	003f3906 	br	10e0c <__mulsf3+0xdc>
   11128:	8c4003e0 	cmpeqi	r17,r17,15
   1112c:	883ff126 	beq	r17,zero,110f4 <__mulsf3+0x3c4>
   11130:	a880102c 	andhi	r2,r21,64
   11134:	103ff126 	beq	r2,zero,110fc <__mulsf3+0x3cc>
   11138:	2940102c 	andhi	r5,r5,64
   1113c:	283fef1e 	bne	r5,zero,110fc <__mulsf3+0x3cc>
   11140:	81001034 	orhi	r4,r16,64
   11144:	b829883a 	mov	r20,r23
   11148:	003f8906 	br	10f70 <__mulsf3+0x240>

0001114c <__fixsfsi>:
   1114c:	200ad5fa 	srli	r5,r4,23
   11150:	00c02034 	movhi	r3,128
   11154:	18ffffc4 	addi	r3,r3,-1
   11158:	29403fcc 	andi	r5,r5,255
   1115c:	28801fd0 	cmplti	r2,r5,127
   11160:	200cd7fa 	srli	r6,r4,31
   11164:	1906703a 	and	r3,r3,r4
   11168:	1000061e 	bne	r2,zero,11184 <__fixsfsi+0x38>
   1116c:	28802790 	cmplti	r2,r5,158
   11170:	1000061e 	bne	r2,zero,1118c <__fixsfsi+0x40>
   11174:	00a00034 	movhi	r2,32768
   11178:	10bfffc4 	addi	r2,r2,-1
   1117c:	3085883a 	add	r2,r6,r2
   11180:	f800283a 	ret
   11184:	0005883a 	mov	r2,zero
   11188:	f800283a 	ret
   1118c:	29002590 	cmplti	r4,r5,150
   11190:	18802034 	orhi	r2,r3,128
   11194:	2000051e 	bne	r4,zero,111ac <__fixsfsi+0x60>
   11198:	297fda84 	addi	r5,r5,-150
   1119c:	1144983a 	sll	r2,r2,r5
   111a0:	303ff926 	beq	r6,zero,11188 <__fixsfsi+0x3c>
   111a4:	0085c83a 	sub	r2,zero,r2
   111a8:	f800283a 	ret
   111ac:	00c02584 	movi	r3,150
   111b0:	1947c83a 	sub	r3,r3,r5
   111b4:	10c4d83a 	srl	r2,r2,r3
   111b8:	003ff906 	br	111a0 <__fixsfsi+0x54>

000111bc <__clzsi2>:
   111bc:	00bfffd4 	movui	r2,65535
   111c0:	11000a36 	bltu	r2,r4,111ec <__clzsi2+0x30>
   111c4:	20c04028 	cmpgeui	r3,r4,256
   111c8:	180690fa 	slli	r3,r3,3
   111cc:	00800804 	movi	r2,32
   111d0:	10c5c83a 	sub	r2,r2,r3
   111d4:	20c8d83a 	srl	r4,r4,r3
   111d8:	00c00074 	movhi	r3,1
   111dc:	20c7883a 	add	r3,r4,r3
   111e0:	18d84803 	ldbu	r3,24864(r3)
   111e4:	10c5c83a 	sub	r2,r2,r3
   111e8:	f800283a 	ret
   111ec:	00804034 	movhi	r2,256
   111f0:	2080032e 	bgeu	r4,r2,11200 <__clzsi2+0x44>
   111f4:	00800404 	movi	r2,16
   111f8:	00c00404 	movi	r3,16
   111fc:	003ff506 	br	111d4 <__clzsi2+0x18>
   11200:	00800204 	movi	r2,8
   11204:	00c00604 	movi	r3,24
   11208:	003ff206 	br	111d4 <__clzsi2+0x18>

0001120c <malloc>:
   1120c:	00800074 	movhi	r2,1
   11210:	200b883a 	mov	r5,r4
   11214:	111f3417 	ldw	r4,31952(r2)
   11218:	001122c1 	jmpi	1122c <_malloc_r>

0001121c <free>:
   1121c:	00800074 	movhi	r2,1
   11220:	200b883a 	mov	r5,r4
   11224:	111f3417 	ldw	r4,31952(r2)
   11228:	0011c5c1 	jmpi	11c5c <_free_r>

0001122c <_malloc_r>:
   1122c:	defff604 	addi	sp,sp,-40
   11230:	dc400115 	stw	r17,4(sp)
   11234:	2c4002c4 	addi	r17,r5,11
   11238:	dc800215 	stw	r18,8(sp)
   1123c:	dfc00915 	stw	ra,36(sp)
   11240:	df000815 	stw	fp,32(sp)
   11244:	ddc00715 	stw	r23,28(sp)
   11248:	dd800615 	stw	r22,24(sp)
   1124c:	dd400515 	stw	r21,20(sp)
   11250:	dd000415 	stw	r20,16(sp)
   11254:	dcc00315 	stw	r19,12(sp)
   11258:	dc000015 	stw	r16,0(sp)
   1125c:	888005e8 	cmpgeui	r2,r17,23
   11260:	2025883a 	mov	r18,r4
   11264:	1000261e 	bne	r2,zero,11300 <_malloc_r+0xd4>
   11268:	29400468 	cmpgeui	r5,r5,17
   1126c:	28008d1e 	bne	r5,zero,114a4 <_malloc_r+0x278>
   11270:	001224c0 	call	1224c <__malloc_lock>
   11274:	04400404 	movi	r17,16
   11278:	00800604 	movi	r2,24
   1127c:	01c00084 	movi	r7,2
   11280:	04c00074 	movhi	r19,1
   11284:	9cd89904 	addi	r19,r19,25188
   11288:	9885883a 	add	r2,r19,r2
   1128c:	14000117 	ldw	r16,4(r2)
   11290:	10fffe04 	addi	r3,r2,-8
   11294:	80c0cb26 	beq	r16,r3,115c4 <_malloc_r+0x398>
   11298:	80800117 	ldw	r2,4(r16)
   1129c:	81000317 	ldw	r4,12(r16)
   112a0:	00ffff04 	movi	r3,-4
   112a4:	10c4703a 	and	r2,r2,r3
   112a8:	81400217 	ldw	r5,8(r16)
   112ac:	8085883a 	add	r2,r16,r2
   112b0:	10c00117 	ldw	r3,4(r2)
   112b4:	29000315 	stw	r4,12(r5)
   112b8:	21400215 	stw	r5,8(r4)
   112bc:	18c00054 	ori	r3,r3,1
   112c0:	10c00115 	stw	r3,4(r2)
   112c4:	9009883a 	mov	r4,r18
   112c8:	00122700 	call	12270 <__malloc_unlock>
   112cc:	80800204 	addi	r2,r16,8
   112d0:	dfc00917 	ldw	ra,36(sp)
   112d4:	df000817 	ldw	fp,32(sp)
   112d8:	ddc00717 	ldw	r23,28(sp)
   112dc:	dd800617 	ldw	r22,24(sp)
   112e0:	dd400517 	ldw	r21,20(sp)
   112e4:	dd000417 	ldw	r20,16(sp)
   112e8:	dcc00317 	ldw	r19,12(sp)
   112ec:	dc800217 	ldw	r18,8(sp)
   112f0:	dc400117 	ldw	r17,4(sp)
   112f4:	dc000017 	ldw	r16,0(sp)
   112f8:	dec00a04 	addi	sp,sp,40
   112fc:	f800283a 	ret
   11300:	00bffe04 	movi	r2,-8
   11304:	88a2703a 	and	r17,r17,r2
   11308:	88006616 	blt	r17,zero,114a4 <_malloc_r+0x278>
   1130c:	89406536 	bltu	r17,r5,114a4 <_malloc_r+0x278>
   11310:	001224c0 	call	1224c <__malloc_lock>
   11314:	88807e28 	cmpgeui	r2,r17,504
   11318:	1000ef26 	beq	r2,zero,116d8 <_malloc_r+0x4ac>
   1131c:	8804d27a 	srli	r2,r17,9
   11320:	10006426 	beq	r2,zero,114b4 <_malloc_r+0x288>
   11324:	10c00168 	cmpgeui	r3,r2,5
   11328:	1800c31e 	bne	r3,zero,11638 <_malloc_r+0x40c>
   1132c:	8804d1ba 	srli	r2,r17,6
   11330:	11c00e44 	addi	r7,r2,57
   11334:	380890fa 	slli	r4,r7,3
   11338:	12000e04 	addi	r8,r2,56
   1133c:	04c00074 	movhi	r19,1
   11340:	9cd89904 	addi	r19,r19,25188
   11344:	9909883a 	add	r4,r19,r4
   11348:	24000117 	ldw	r16,4(r4)
   1134c:	213ffe04 	addi	r4,r4,-8
   11350:	24000b26 	beq	r4,r16,11380 <_malloc_r+0x154>
   11354:	01bfff04 	movi	r6,-4
   11358:	00000306 	br	11368 <_malloc_r+0x13c>
   1135c:	1800970e 	bge	r3,zero,115bc <_malloc_r+0x390>
   11360:	84000317 	ldw	r16,12(r16)
   11364:	24000626 	beq	r4,r16,11380 <_malloc_r+0x154>
   11368:	80800117 	ldw	r2,4(r16)
   1136c:	1184703a 	and	r2,r2,r6
   11370:	1447c83a 	sub	r3,r2,r17
   11374:	19400408 	cmpgei	r5,r3,16
   11378:	283ff826 	beq	r5,zero,1135c <_malloc_r+0x130>
   1137c:	400f883a 	mov	r7,r8
   11380:	9c000417 	ldw	r16,16(r19)
   11384:	02400074 	movhi	r9,1
   11388:	4a589b04 	addi	r9,r9,25196
   1138c:	82407f26 	beq	r16,r9,1158c <_malloc_r+0x360>
   11390:	80800117 	ldw	r2,4(r16)
   11394:	00ffff04 	movi	r3,-4
   11398:	10c4703a 	and	r2,r2,r3
   1139c:	1447c83a 	sub	r3,r2,r17
   113a0:	19000410 	cmplti	r4,r3,16
   113a4:	2000cf26 	beq	r4,zero,116e4 <_malloc_r+0x4b8>
   113a8:	9a400515 	stw	r9,20(r19)
   113ac:	9a400415 	stw	r9,16(r19)
   113b0:	1800c10e 	bge	r3,zero,116b8 <_malloc_r+0x48c>
   113b4:	10c08028 	cmpgeui	r3,r2,512
   113b8:	99400117 	ldw	r5,4(r19)
   113bc:	1800851e 	bne	r3,zero,115d4 <_malloc_r+0x3a8>
   113c0:	1006d0fa 	srli	r3,r2,3
   113c4:	1008d17a 	srli	r4,r2,5
   113c8:	18800044 	addi	r2,r3,1
   113cc:	100490fa 	slli	r2,r2,3
   113d0:	00c00044 	movi	r3,1
   113d4:	1906983a 	sll	r3,r3,r4
   113d8:	9885883a 	add	r2,r19,r2
   113dc:	11000017 	ldw	r4,0(r2)
   113e0:	28cab03a 	or	r5,r5,r3
   113e4:	10fffe04 	addi	r3,r2,-8
   113e8:	80c00315 	stw	r3,12(r16)
   113ec:	81000215 	stw	r4,8(r16)
   113f0:	99400115 	stw	r5,4(r19)
   113f4:	14000015 	stw	r16,0(r2)
   113f8:	24000315 	stw	r16,12(r4)
   113fc:	3805d0ba 	srai	r2,r7,2
   11400:	01000044 	movi	r4,1
   11404:	2088983a 	sll	r4,r4,r2
   11408:	29002e36 	bltu	r5,r4,114c4 <_malloc_r+0x298>
   1140c:	2144703a 	and	r2,r4,r5
   11410:	10000a1e 	bne	r2,zero,1143c <_malloc_r+0x210>
   11414:	2109883a 	add	r4,r4,r4
   11418:	00bfff04 	movi	r2,-4
   1141c:	3884703a 	and	r2,r7,r2
   11420:	2146703a 	and	r3,r4,r5
   11424:	11c00104 	addi	r7,r2,4
   11428:	1800041e 	bne	r3,zero,1143c <_malloc_r+0x210>
   1142c:	2109883a 	add	r4,r4,r4
   11430:	2144703a 	and	r2,r4,r5
   11434:	39c00104 	addi	r7,r7,4
   11438:	103ffc26 	beq	r2,zero,1142c <_malloc_r+0x200>
   1143c:	02bfff04 	movi	r10,-4
   11440:	381690fa 	slli	r11,r7,3
   11444:	3819883a 	mov	r12,r7
   11448:	9ad7883a 	add	r11,r19,r11
   1144c:	5811883a 	mov	r8,r11
   11450:	40800317 	ldw	r2,12(r8)
   11454:	40808126 	beq	r8,r2,1165c <_malloc_r+0x430>
   11458:	10c00117 	ldw	r3,4(r2)
   1145c:	1021883a 	mov	r16,r2
   11460:	10800317 	ldw	r2,12(r2)
   11464:	1a86703a 	and	r3,r3,r10
   11468:	1c4bc83a 	sub	r5,r3,r17
   1146c:	29800410 	cmplti	r6,r5,16
   11470:	30007f26 	beq	r6,zero,11670 <_malloc_r+0x444>
   11474:	283ff716 	blt	r5,zero,11454 <_malloc_r+0x228>
   11478:	80c7883a 	add	r3,r16,r3
   1147c:	19400117 	ldw	r5,4(r3)
   11480:	81800217 	ldw	r6,8(r16)
   11484:	9009883a 	mov	r4,r18
   11488:	29400054 	ori	r5,r5,1
   1148c:	19400115 	stw	r5,4(r3)
   11490:	30800315 	stw	r2,12(r6)
   11494:	11800215 	stw	r6,8(r2)
   11498:	00122700 	call	12270 <__malloc_unlock>
   1149c:	80800204 	addi	r2,r16,8
   114a0:	003f8b06 	br	112d0 <_malloc_r+0xa4>
   114a4:	00800304 	movi	r2,12
   114a8:	90800015 	stw	r2,0(r18)
   114ac:	0005883a 	mov	r2,zero
   114b0:	003f8706 	br	112d0 <_malloc_r+0xa4>
   114b4:	01008004 	movi	r4,512
   114b8:	01c01004 	movi	r7,64
   114bc:	02000fc4 	movi	r8,63
   114c0:	003f9e06 	br	1133c <_malloc_r+0x110>
   114c4:	9c000217 	ldw	r16,8(r19)
   114c8:	00bfff04 	movi	r2,-4
   114cc:	80c00117 	ldw	r3,4(r16)
   114d0:	18aa703a 	and	r21,r3,r2
   114d4:	ac400336 	bltu	r21,r17,114e4 <_malloc_r+0x2b8>
   114d8:	ac47c83a 	sub	r3,r21,r17
   114dc:	18800408 	cmpgei	r2,r3,16
   114e0:	10002c1e 	bne	r2,zero,11594 <_malloc_r+0x368>
   114e4:	00800074 	movhi	r2,1
   114e8:	109f3117 	ldw	r2,31940(r2)
   114ec:	00c000b4 	movhi	r3,2
   114f0:	1d25ea17 	ldw	r20,-26712(r3)
   114f4:	10bfffd8 	cmpnei	r2,r2,-1
   114f8:	856f883a 	add	r23,r16,r21
   114fc:	8d29883a 	add	r20,r17,r20
   11500:	1000e726 	beq	r2,zero,118a0 <_malloc_r+0x674>
   11504:	a50403c4 	addi	r20,r20,4111
   11508:	00bc0004 	movi	r2,-4096
   1150c:	a0a8703a 	and	r20,r20,r2
   11510:	a00b883a 	mov	r5,r20
   11514:	9009883a 	mov	r4,r18
   11518:	0011ae00 	call	11ae0 <_sbrk_r>
   1151c:	102d883a 	mov	r22,r2
   11520:	10bfffd8 	cmpnei	r2,r2,-1
   11524:	10008426 	beq	r2,zero,11738 <_malloc_r+0x50c>
   11528:	b5c08236 	bltu	r22,r23,11734 <_malloc_r+0x508>
   1152c:	008000b4 	movhi	r2,2
   11530:	1125f417 	ldw	r4,-26672(r2)
   11534:	a109883a 	add	r4,r20,r4
   11538:	1125f415 	stw	r4,-26672(r2)
   1153c:	2007883a 	mov	r3,r4
   11540:	bd80a51e 	bne	r23,r22,117d8 <_malloc_r+0x5ac>
   11544:	b083ffcc 	andi	r2,r22,4095
   11548:	1000a31e 	bne	r2,zero,117d8 <_malloc_r+0x5ac>
   1154c:	9d800217 	ldw	r22,8(r19)
   11550:	ad07883a 	add	r3,r21,r20
   11554:	18c00054 	ori	r3,r3,1
   11558:	b0c00115 	stw	r3,4(r22)
   1155c:	008000b4 	movhi	r2,2
   11560:	10a5e917 	ldw	r2,-26716(r2)
   11564:	1100022e 	bgeu	r2,r4,11570 <_malloc_r+0x344>
   11568:	008000b4 	movhi	r2,2
   1156c:	1125e915 	stw	r4,-26716(r2)
   11570:	008000b4 	movhi	r2,2
   11574:	10a5e817 	ldw	r2,-26720(r2)
   11578:	1100022e 	bgeu	r2,r4,11584 <_malloc_r+0x358>
   1157c:	008000b4 	movhi	r2,2
   11580:	1125e815 	stw	r4,-26720(r2)
   11584:	b021883a 	mov	r16,r22
   11588:	00006d06 	br	11740 <_malloc_r+0x514>
   1158c:	99400117 	ldw	r5,4(r19)
   11590:	003f9a06 	br	113fc <_malloc_r+0x1d0>
   11594:	88800054 	ori	r2,r17,1
   11598:	80800115 	stw	r2,4(r16)
   1159c:	8463883a 	add	r17,r16,r17
   115a0:	9c400215 	stw	r17,8(r19)
   115a4:	18c00054 	ori	r3,r3,1
   115a8:	88c00115 	stw	r3,4(r17)
   115ac:	9009883a 	mov	r4,r18
   115b0:	00122700 	call	12270 <__malloc_unlock>
   115b4:	80800204 	addi	r2,r16,8
   115b8:	003f4506 	br	112d0 <_malloc_r+0xa4>
   115bc:	81000317 	ldw	r4,12(r16)
   115c0:	003f3906 	br	112a8 <_malloc_r+0x7c>
   115c4:	14000317 	ldw	r16,12(r2)
   115c8:	143f331e 	bne	r2,r16,11298 <_malloc_r+0x6c>
   115cc:	39c00084 	addi	r7,r7,2
   115d0:	003f6b06 	br	11380 <_malloc_r+0x154>
   115d4:	1006d27a 	srli	r3,r2,9
   115d8:	19000168 	cmpgeui	r4,r3,5
   115dc:	20005026 	beq	r4,zero,11720 <_malloc_r+0x4f4>
   115e0:	19000568 	cmpgeui	r4,r3,21
   115e4:	2000c01e 	bne	r4,zero,118e8 <_malloc_r+0x6bc>
   115e8:	19801704 	addi	r6,r3,92
   115ec:	300c90fa 	slli	r6,r6,3
   115f0:	190016c4 	addi	r4,r3,91
   115f4:	998d883a 	add	r6,r19,r6
   115f8:	30c00017 	ldw	r3,0(r6)
   115fc:	31bffe04 	addi	r6,r6,-8
   11600:	30c0a926 	beq	r6,r3,118a8 <_malloc_r+0x67c>
   11604:	023fff04 	movi	r8,-4
   11608:	00000206 	br	11614 <_malloc_r+0x3e8>
   1160c:	18c00217 	ldw	r3,8(r3)
   11610:	30c00326 	beq	r6,r3,11620 <_malloc_r+0x3f4>
   11614:	19000117 	ldw	r4,4(r3)
   11618:	2208703a 	and	r4,r4,r8
   1161c:	113ffb36 	bltu	r2,r4,1160c <_malloc_r+0x3e0>
   11620:	19800317 	ldw	r6,12(r3)
   11624:	81800315 	stw	r6,12(r16)
   11628:	80c00215 	stw	r3,8(r16)
   1162c:	34000215 	stw	r16,8(r6)
   11630:	1c000315 	stw	r16,12(r3)
   11634:	003f7106 	br	113fc <_malloc_r+0x1d0>
   11638:	10c00568 	cmpgeui	r3,r2,21
   1163c:	18004926 	beq	r3,zero,11764 <_malloc_r+0x538>
   11640:	10c01568 	cmpgeui	r3,r2,85
   11644:	1800af1e 	bne	r3,zero,11904 <_malloc_r+0x6d8>
   11648:	8804d33a 	srli	r2,r17,12
   1164c:	11c01bc4 	addi	r7,r2,111
   11650:	380890fa 	slli	r4,r7,3
   11654:	12001b84 	addi	r8,r2,110
   11658:	003f3806 	br	1133c <_malloc_r+0x110>
   1165c:	63000044 	addi	r12,r12,1
   11660:	608000cc 	andi	r2,r12,3
   11664:	42000204 	addi	r8,r8,8
   11668:	103f791e 	bne	r2,zero,11450 <_malloc_r+0x224>
   1166c:	00004406 	br	11780 <_malloc_r+0x554>
   11670:	81000217 	ldw	r4,8(r16)
   11674:	89800054 	ori	r6,r17,1
   11678:	81800115 	stw	r6,4(r16)
   1167c:	20800315 	stw	r2,12(r4)
   11680:	11000215 	stw	r4,8(r2)
   11684:	8463883a 	add	r17,r16,r17
   11688:	9c400515 	stw	r17,20(r19)
   1168c:	9c400415 	stw	r17,16(r19)
   11690:	28800054 	ori	r2,r5,1
   11694:	88800115 	stw	r2,4(r17)
   11698:	8a400315 	stw	r9,12(r17)
   1169c:	8a400215 	stw	r9,8(r17)
   116a0:	80c7883a 	add	r3,r16,r3
   116a4:	19400015 	stw	r5,0(r3)
   116a8:	9009883a 	mov	r4,r18
   116ac:	00122700 	call	12270 <__malloc_unlock>
   116b0:	80800204 	addi	r2,r16,8
   116b4:	003f0606 	br	112d0 <_malloc_r+0xa4>
   116b8:	8085883a 	add	r2,r16,r2
   116bc:	10c00117 	ldw	r3,4(r2)
   116c0:	9009883a 	mov	r4,r18
   116c4:	18c00054 	ori	r3,r3,1
   116c8:	10c00115 	stw	r3,4(r2)
   116cc:	00122700 	call	12270 <__malloc_unlock>
   116d0:	80800204 	addi	r2,r16,8
   116d4:	003efe06 	br	112d0 <_malloc_r+0xa4>
   116d8:	880ed0fa 	srli	r7,r17,3
   116dc:	88800204 	addi	r2,r17,8
   116e0:	003ee706 	br	11280 <_malloc_r+0x54>
   116e4:	89000054 	ori	r4,r17,1
   116e8:	81000115 	stw	r4,4(r16)
   116ec:	8463883a 	add	r17,r16,r17
   116f0:	9c400515 	stw	r17,20(r19)
   116f4:	9c400415 	stw	r17,16(r19)
   116f8:	19000054 	ori	r4,r3,1
   116fc:	89000115 	stw	r4,4(r17)
   11700:	8085883a 	add	r2,r16,r2
   11704:	8a400315 	stw	r9,12(r17)
   11708:	8a400215 	stw	r9,8(r17)
   1170c:	10c00015 	stw	r3,0(r2)
   11710:	9009883a 	mov	r4,r18
   11714:	00122700 	call	12270 <__malloc_unlock>
   11718:	80800204 	addi	r2,r16,8
   1171c:	003eec06 	br	112d0 <_malloc_r+0xa4>
   11720:	1006d1ba 	srli	r3,r2,6
   11724:	19800e44 	addi	r6,r3,57
   11728:	300c90fa 	slli	r6,r6,3
   1172c:	19000e04 	addi	r4,r3,56
   11730:	003fb006 	br	115f4 <_malloc_r+0x3c8>
   11734:	84c02426 	beq	r16,r19,117c8 <_malloc_r+0x59c>
   11738:	9c000217 	ldw	r16,8(r19)
   1173c:	80c00117 	ldw	r3,4(r16)
   11740:	00bfff04 	movi	r2,-4
   11744:	1884703a 	and	r2,r3,r2
   11748:	1447c83a 	sub	r3,r2,r17
   1174c:	14400236 	bltu	r2,r17,11758 <_malloc_r+0x52c>
   11750:	18800408 	cmpgei	r2,r3,16
   11754:	103f8f1e 	bne	r2,zero,11594 <_malloc_r+0x368>
   11758:	9009883a 	mov	r4,r18
   1175c:	00122700 	call	12270 <__malloc_unlock>
   11760:	003f5206 	br	114ac <_malloc_r+0x280>
   11764:	11c01704 	addi	r7,r2,92
   11768:	380890fa 	slli	r4,r7,3
   1176c:	120016c4 	addi	r8,r2,91
   11770:	003ef206 	br	1133c <_malloc_r+0x110>
   11774:	58800217 	ldw	r2,8(r11)
   11778:	39ffffc4 	addi	r7,r7,-1
   1177c:	12c0961e 	bne	r2,r11,119d8 <_malloc_r+0x7ac>
   11780:	388000cc 	andi	r2,r7,3
   11784:	5afffe04 	addi	r11,r11,-8
   11788:	103ffa1e 	bne	r2,zero,11774 <_malloc_r+0x548>
   1178c:	98c00117 	ldw	r3,4(r19)
   11790:	0104303a 	nor	r2,zero,r4
   11794:	10c4703a 	and	r2,r2,r3
   11798:	98800115 	stw	r2,4(r19)
   1179c:	2109883a 	add	r4,r4,r4
   117a0:	113f4836 	bltu	r2,r4,114c4 <_malloc_r+0x298>
   117a4:	203f4726 	beq	r4,zero,114c4 <_malloc_r+0x298>
   117a8:	2086703a 	and	r3,r4,r2
   117ac:	1800041e 	bne	r3,zero,117c0 <_malloc_r+0x594>
   117b0:	2109883a 	add	r4,r4,r4
   117b4:	2086703a 	and	r3,r4,r2
   117b8:	63000104 	addi	r12,r12,4
   117bc:	183ffc26 	beq	r3,zero,117b0 <_malloc_r+0x584>
   117c0:	600f883a 	mov	r7,r12
   117c4:	003f1e06 	br	11440 <_malloc_r+0x214>
   117c8:	008000b4 	movhi	r2,2
   117cc:	10e5f417 	ldw	r3,-26672(r2)
   117d0:	a0c7883a 	add	r3,r20,r3
   117d4:	10e5f415 	stw	r3,-26672(r2)
   117d8:	00800074 	movhi	r2,1
   117dc:	109f3117 	ldw	r2,31940(r2)
   117e0:	10bfffd8 	cmpnei	r2,r2,-1
   117e4:	10004e26 	beq	r2,zero,11920 <_malloc_r+0x6f4>
   117e8:	b5c5c83a 	sub	r2,r22,r23
   117ec:	10c5883a 	add	r2,r2,r3
   117f0:	00c000b4 	movhi	r3,2
   117f4:	18a5f415 	stw	r2,-26672(r3)
   117f8:	b70001cc 	andi	fp,r22,7
   117fc:	e0003026 	beq	fp,zero,118c0 <_malloc_r+0x694>
   11800:	b72dc83a 	sub	r22,r22,fp
   11804:	b5800204 	addi	r22,r22,8
   11808:	01040204 	movi	r4,4104
   1180c:	2709c83a 	sub	r4,r4,fp
   11810:	b529883a 	add	r20,r22,r20
   11814:	2509c83a 	sub	r4,r4,r20
   11818:	25c3ffcc 	andi	r23,r4,4095
   1181c:	b80b883a 	mov	r5,r23
   11820:	9009883a 	mov	r4,r18
   11824:	0011ae00 	call	11ae0 <_sbrk_r>
   11828:	10ffffe0 	cmpeqi	r3,r2,-1
   1182c:	1800501e 	bne	r3,zero,11970 <_malloc_r+0x744>
   11830:	1585c83a 	sub	r2,r2,r22
   11834:	15e9883a 	add	r20,r2,r23
   11838:	008000b4 	movhi	r2,2
   1183c:	10a5f417 	ldw	r2,-26672(r2)
   11840:	9d800215 	stw	r22,8(r19)
   11844:	a0c00054 	ori	r3,r20,1
   11848:	b889883a 	add	r4,r23,r2
   1184c:	008000b4 	movhi	r2,2
   11850:	1125f415 	stw	r4,-26672(r2)
   11854:	b0c00115 	stw	r3,4(r22)
   11858:	84ff4026 	beq	r16,r19,1155c <_malloc_r+0x330>
   1185c:	a8800428 	cmpgeui	r2,r21,16
   11860:	10003226 	beq	r2,zero,1192c <_malloc_r+0x700>
   11864:	80800117 	ldw	r2,4(r16)
   11868:	017ffe04 	movi	r5,-8
   1186c:	a8fffd04 	addi	r3,r21,-12
   11870:	1946703a 	and	r3,r3,r5
   11874:	1080004c 	andi	r2,r2,1
   11878:	10c4b03a 	or	r2,r2,r3
   1187c:	80800115 	stw	r2,4(r16)
   11880:	01400144 	movi	r5,5
   11884:	80c5883a 	add	r2,r16,r3
   11888:	11400115 	stw	r5,4(r2)
   1188c:	11400215 	stw	r5,8(r2)
   11890:	18c00428 	cmpgeui	r3,r3,16
   11894:	18003b1e 	bne	r3,zero,11984 <_malloc_r+0x758>
   11898:	b0c00117 	ldw	r3,4(r22)
   1189c:	003f2f06 	br	1155c <_malloc_r+0x330>
   118a0:	a5000404 	addi	r20,r20,16
   118a4:	003f1a06 	br	11510 <_malloc_r+0x2e4>
   118a8:	2009d0ba 	srai	r4,r4,2
   118ac:	00800044 	movi	r2,1
   118b0:	1104983a 	sll	r2,r2,r4
   118b4:	288ab03a 	or	r5,r5,r2
   118b8:	99400115 	stw	r5,4(r19)
   118bc:	003f5906 	br	11624 <_malloc_r+0x3f8>
   118c0:	b509883a 	add	r4,r22,r20
   118c4:	0109c83a 	sub	r4,zero,r4
   118c8:	25c3ffcc 	andi	r23,r4,4095
   118cc:	b80b883a 	mov	r5,r23
   118d0:	9009883a 	mov	r4,r18
   118d4:	0011ae00 	call	11ae0 <_sbrk_r>
   118d8:	10ffffe0 	cmpeqi	r3,r2,-1
   118dc:	183fd426 	beq	r3,zero,11830 <_malloc_r+0x604>
   118e0:	002f883a 	mov	r23,zero
   118e4:	003fd406 	br	11838 <_malloc_r+0x60c>
   118e8:	19001568 	cmpgeui	r4,r3,85
   118ec:	2000121e 	bne	r4,zero,11938 <_malloc_r+0x70c>
   118f0:	1006d33a 	srli	r3,r2,12
   118f4:	19801bc4 	addi	r6,r3,111
   118f8:	300c90fa 	slli	r6,r6,3
   118fc:	19001b84 	addi	r4,r3,110
   11900:	003f3c06 	br	115f4 <_malloc_r+0x3c8>
   11904:	10c05568 	cmpgeui	r3,r2,341
   11908:	1800121e 	bne	r3,zero,11954 <_malloc_r+0x728>
   1190c:	8804d3fa 	srli	r2,r17,15
   11910:	11c01e04 	addi	r7,r2,120
   11914:	380890fa 	slli	r4,r7,3
   11918:	12001dc4 	addi	r8,r2,119
   1191c:	003e8706 	br	1133c <_malloc_r+0x110>
   11920:	00800074 	movhi	r2,1
   11924:	159f3115 	stw	r22,31940(r2)
   11928:	003fb306 	br	117f8 <_malloc_r+0x5cc>
   1192c:	00800044 	movi	r2,1
   11930:	b0800115 	stw	r2,4(r22)
   11934:	003f8806 	br	11758 <_malloc_r+0x52c>
   11938:	19005568 	cmpgeui	r4,r3,341
   1193c:	2000181e 	bne	r4,zero,119a0 <_malloc_r+0x774>
   11940:	1006d3fa 	srli	r3,r2,15
   11944:	19801e04 	addi	r6,r3,120
   11948:	300c90fa 	slli	r6,r6,3
   1194c:	19001dc4 	addi	r4,r3,119
   11950:	003f2806 	br	115f4 <_malloc_r+0x3c8>
   11954:	10815568 	cmpgeui	r2,r2,1365
   11958:	1000181e 	bne	r2,zero,119bc <_malloc_r+0x790>
   1195c:	8804d4ba 	srli	r2,r17,18
   11960:	11c01f44 	addi	r7,r2,125
   11964:	380890fa 	slli	r4,r7,3
   11968:	12001f04 	addi	r8,r2,124
   1196c:	003e7306 	br	1133c <_malloc_r+0x110>
   11970:	e73ffe04 	addi	fp,fp,-8
   11974:	a729883a 	add	r20,r20,fp
   11978:	a5a9c83a 	sub	r20,r20,r22
   1197c:	002f883a 	mov	r23,zero
   11980:	003fad06 	br	11838 <_malloc_r+0x60c>
   11984:	9009883a 	mov	r4,r18
   11988:	81400204 	addi	r5,r16,8
   1198c:	0011c5c0 	call	11c5c <_free_r>
   11990:	008000b4 	movhi	r2,2
   11994:	9d800217 	ldw	r22,8(r19)
   11998:	1125f417 	ldw	r4,-26672(r2)
   1199c:	003fbe06 	br	11898 <_malloc_r+0x66c>
   119a0:	18c15568 	cmpgeui	r3,r3,1365
   119a4:	1800091e 	bne	r3,zero,119cc <_malloc_r+0x7a0>
   119a8:	1006d4ba 	srli	r3,r2,18
   119ac:	19801f44 	addi	r6,r3,125
   119b0:	300c90fa 	slli	r6,r6,3
   119b4:	19001f04 	addi	r4,r3,124
   119b8:	003f0e06 	br	115f4 <_malloc_r+0x3c8>
   119bc:	0100fe04 	movi	r4,1016
   119c0:	01c01fc4 	movi	r7,127
   119c4:	02001f84 	movi	r8,126
   119c8:	003e5c06 	br	1133c <_malloc_r+0x110>
   119cc:	0180fe04 	movi	r6,1016
   119d0:	01001f84 	movi	r4,126
   119d4:	003f0706 	br	115f4 <_malloc_r+0x3c8>
   119d8:	98800117 	ldw	r2,4(r19)
   119dc:	003f6f06 	br	1179c <_malloc_r+0x570>

000119e0 <memcpy>:
   119e0:	30c00428 	cmpgeui	r3,r6,16
   119e4:	2005883a 	mov	r2,r4
   119e8:	18000b1e 	bne	r3,zero,11a18 <memcpy+0x38>
   119ec:	2007883a 	mov	r3,r4
   119f0:	31ffffc4 	addi	r7,r6,-1
   119f4:	30003426 	beq	r6,zero,11ac8 <memcpy+0xe8>
   119f8:	39c00044 	addi	r7,r7,1
   119fc:	19cf883a 	add	r7,r3,r7
   11a00:	29800003 	ldbu	r6,0(r5)
   11a04:	18c00044 	addi	r3,r3,1
   11a08:	29400044 	addi	r5,r5,1
   11a0c:	19bfffc5 	stb	r6,-1(r3)
   11a10:	19fffb1e 	bne	r3,r7,11a00 <memcpy+0x20>
   11a14:	f800283a 	ret
   11a18:	2146b03a 	or	r3,r4,r5
   11a1c:	18c000cc 	andi	r3,r3,3
   11a20:	18002a1e 	bne	r3,zero,11acc <memcpy+0xec>
   11a24:	333ffc04 	addi	r12,r6,-16
   11a28:	6018d13a 	srli	r12,r12,4
   11a2c:	2811883a 	mov	r8,r5
   11a30:	200f883a 	mov	r7,r4
   11a34:	63000044 	addi	r12,r12,1
   11a38:	6018913a 	slli	r12,r12,4
   11a3c:	2307883a 	add	r3,r4,r12
   11a40:	42c00017 	ldw	r11,0(r8)
   11a44:	42800117 	ldw	r10,4(r8)
   11a48:	42400217 	ldw	r9,8(r8)
   11a4c:	41000317 	ldw	r4,12(r8)
   11a50:	39c00404 	addi	r7,r7,16
   11a54:	3afffc15 	stw	r11,-16(r7)
   11a58:	3abffd15 	stw	r10,-12(r7)
   11a5c:	3a7ffe15 	stw	r9,-8(r7)
   11a60:	393fff15 	stw	r4,-4(r7)
   11a64:	42000404 	addi	r8,r8,16
   11a68:	38fff51e 	bne	r7,r3,11a40 <memcpy+0x60>
   11a6c:	3100030c 	andi	r4,r6,12
   11a70:	2b0b883a 	add	r5,r5,r12
   11a74:	324003cc 	andi	r9,r6,15
   11a78:	20001726 	beq	r4,zero,11ad8 <memcpy+0xf8>
   11a7c:	2811883a 	mov	r8,r5
   11a80:	1809883a 	mov	r4,r3
   11a84:	1a57883a 	add	r11,r3,r9
   11a88:	42800017 	ldw	r10,0(r8)
   11a8c:	21000104 	addi	r4,r4,4
   11a90:	590fc83a 	sub	r7,r11,r4
   11a94:	39c00128 	cmpgeui	r7,r7,4
   11a98:	22bfff15 	stw	r10,-4(r4)
   11a9c:	42000104 	addi	r8,r8,4
   11aa0:	383ff91e 	bne	r7,zero,11a88 <memcpy+0xa8>
   11aa4:	493fff04 	addi	r4,r9,-4
   11aa8:	2008d0ba 	srli	r4,r4,2
   11aac:	318000cc 	andi	r6,r6,3
   11ab0:	31ffffc4 	addi	r7,r6,-1
   11ab4:	21000044 	addi	r4,r4,1
   11ab8:	200890ba 	slli	r4,r4,2
   11abc:	1907883a 	add	r3,r3,r4
   11ac0:	290b883a 	add	r5,r5,r4
   11ac4:	303fcc1e 	bne	r6,zero,119f8 <memcpy+0x18>
   11ac8:	f800283a 	ret
   11acc:	31ffffc4 	addi	r7,r6,-1
   11ad0:	2007883a 	mov	r3,r4
   11ad4:	003fc806 	br	119f8 <memcpy+0x18>
   11ad8:	480d883a 	mov	r6,r9
   11adc:	003fc406 	br	119f0 <memcpy+0x10>

00011ae0 <_sbrk_r>:
   11ae0:	defffe04 	addi	sp,sp,-8
   11ae4:	dc000015 	stw	r16,0(sp)
   11ae8:	008000b4 	movhi	r2,2
   11aec:	2021883a 	mov	r16,r4
   11af0:	2809883a 	mov	r4,r5
   11af4:	dfc00115 	stw	ra,4(sp)
   11af8:	1025eb15 	stw	zero,-26708(r2)
   11afc:	00124f00 	call	124f0 <sbrk>
   11b00:	10ffffd8 	cmpnei	r3,r2,-1
   11b04:	18000426 	beq	r3,zero,11b18 <_sbrk_r+0x38>
   11b08:	dfc00117 	ldw	ra,4(sp)
   11b0c:	dc000017 	ldw	r16,0(sp)
   11b10:	dec00204 	addi	sp,sp,8
   11b14:	f800283a 	ret
   11b18:	00c000b4 	movhi	r3,2
   11b1c:	18e5eb17 	ldw	r3,-26708(r3)
   11b20:	183ff926 	beq	r3,zero,11b08 <_sbrk_r+0x28>
   11b24:	80c00015 	stw	r3,0(r16)
   11b28:	dfc00117 	ldw	ra,4(sp)
   11b2c:	dc000017 	ldw	r16,0(sp)
   11b30:	dec00204 	addi	sp,sp,8
   11b34:	f800283a 	ret

00011b38 <_malloc_trim_r>:
   11b38:	defffa04 	addi	sp,sp,-24
   11b3c:	dcc00315 	stw	r19,12(sp)
   11b40:	04c00074 	movhi	r19,1
   11b44:	dd000415 	stw	r20,16(sp)
   11b48:	dc800215 	stw	r18,8(sp)
   11b4c:	dc400115 	stw	r17,4(sp)
   11b50:	dc000015 	stw	r16,0(sp)
   11b54:	2829883a 	mov	r20,r5
   11b58:	dfc00515 	stw	ra,20(sp)
   11b5c:	9cd89904 	addi	r19,r19,25188
   11b60:	2025883a 	mov	r18,r4
   11b64:	001224c0 	call	1224c <__malloc_lock>
   11b68:	98800217 	ldw	r2,8(r19)
   11b6c:	14400117 	ldw	r17,4(r2)
   11b70:	00bfff04 	movi	r2,-4
   11b74:	88a2703a 	and	r17,r17,r2
   11b78:	8c03fbc4 	addi	r16,r17,4079
   11b7c:	8521c83a 	sub	r16,r16,r20
   11b80:	8020d33a 	srli	r16,r16,12
   11b84:	843fffc4 	addi	r16,r16,-1
   11b88:	8020933a 	slli	r16,r16,12
   11b8c:	80840008 	cmpgei	r2,r16,4096
   11b90:	10000626 	beq	r2,zero,11bac <_malloc_trim_r+0x74>
   11b94:	000b883a 	mov	r5,zero
   11b98:	9009883a 	mov	r4,r18
   11b9c:	0011ae00 	call	11ae0 <_sbrk_r>
   11ba0:	98c00217 	ldw	r3,8(r19)
   11ba4:	1c47883a 	add	r3,r3,r17
   11ba8:	10c00b26 	beq	r2,r3,11bd8 <_malloc_trim_r+0xa0>
   11bac:	9009883a 	mov	r4,r18
   11bb0:	00122700 	call	12270 <__malloc_unlock>
   11bb4:	0005883a 	mov	r2,zero
   11bb8:	dfc00517 	ldw	ra,20(sp)
   11bbc:	dd000417 	ldw	r20,16(sp)
   11bc0:	dcc00317 	ldw	r19,12(sp)
   11bc4:	dc800217 	ldw	r18,8(sp)
   11bc8:	dc400117 	ldw	r17,4(sp)
   11bcc:	dc000017 	ldw	r16,0(sp)
   11bd0:	dec00604 	addi	sp,sp,24
   11bd4:	f800283a 	ret
   11bd8:	040bc83a 	sub	r5,zero,r16
   11bdc:	9009883a 	mov	r4,r18
   11be0:	0011ae00 	call	11ae0 <_sbrk_r>
   11be4:	10bfffd8 	cmpnei	r2,r2,-1
   11be8:	10000d26 	beq	r2,zero,11c20 <_malloc_trim_r+0xe8>
   11bec:	008000b4 	movhi	r2,2
   11bf0:	10a5f417 	ldw	r2,-26672(r2)
   11bf4:	98c00217 	ldw	r3,8(r19)
   11bf8:	8c23c83a 	sub	r17,r17,r16
   11bfc:	8c400054 	ori	r17,r17,1
   11c00:	1405c83a 	sub	r2,r2,r16
   11c04:	1c400115 	stw	r17,4(r3)
   11c08:	9009883a 	mov	r4,r18
   11c0c:	00c000b4 	movhi	r3,2
   11c10:	18a5f415 	stw	r2,-26672(r3)
   11c14:	00122700 	call	12270 <__malloc_unlock>
   11c18:	00800044 	movi	r2,1
   11c1c:	003fe606 	br	11bb8 <_malloc_trim_r+0x80>
   11c20:	000b883a 	mov	r5,zero
   11c24:	9009883a 	mov	r4,r18
   11c28:	0011ae00 	call	11ae0 <_sbrk_r>
   11c2c:	99000217 	ldw	r4,8(r19)
   11c30:	1107c83a 	sub	r3,r2,r4
   11c34:	19400410 	cmplti	r5,r3,16
   11c38:	283fdc1e 	bne	r5,zero,11bac <_malloc_trim_r+0x74>
   11c3c:	01400074 	movhi	r5,1
   11c40:	295f3117 	ldw	r5,31940(r5)
   11c44:	18c00054 	ori	r3,r3,1
   11c48:	20c00115 	stw	r3,4(r4)
   11c4c:	1145c83a 	sub	r2,r2,r5
   11c50:	014000b4 	movhi	r5,2
   11c54:	28a5f415 	stw	r2,-26672(r5)
   11c58:	003fd406 	br	11bac <_malloc_trim_r+0x74>

00011c5c <_free_r>:
   11c5c:	28005f26 	beq	r5,zero,11ddc <_free_r+0x180>
   11c60:	defffd04 	addi	sp,sp,-12
   11c64:	dc400115 	stw	r17,4(sp)
   11c68:	dc000015 	stw	r16,0(sp)
   11c6c:	2023883a 	mov	r17,r4
   11c70:	2821883a 	mov	r16,r5
   11c74:	dfc00215 	stw	ra,8(sp)
   11c78:	001224c0 	call	1224c <__malloc_lock>
   11c7c:	81ffff17 	ldw	r7,-4(r16)
   11c80:	00bfff84 	movi	r2,-2
   11c84:	80fffe04 	addi	r3,r16,-8
   11c88:	3884703a 	and	r2,r7,r2
   11c8c:	01800074 	movhi	r6,1
   11c90:	1889883a 	add	r4,r3,r2
   11c94:	31989904 	addi	r6,r6,25188
   11c98:	21400117 	ldw	r5,4(r4)
   11c9c:	32000217 	ldw	r8,8(r6)
   11ca0:	027fff04 	movi	r9,-4
   11ca4:	2a4a703a 	and	r5,r5,r9
   11ca8:	41006526 	beq	r8,r4,11e40 <_free_r+0x1e4>
   11cac:	21400115 	stw	r5,4(r4)
   11cb0:	39c0004c 	andi	r7,r7,1
   11cb4:	2151883a 	add	r8,r4,r5
   11cb8:	3800281e 	bne	r7,zero,11d5c <_free_r+0x100>
   11cbc:	82bffe17 	ldw	r10,-8(r16)
   11cc0:	42000117 	ldw	r8,4(r8)
   11cc4:	01c00074 	movhi	r7,1
   11cc8:	1a87c83a 	sub	r3,r3,r10
   11ccc:	1a400217 	ldw	r9,8(r3)
   11cd0:	39d89b04 	addi	r7,r7,25196
   11cd4:	1285883a 	add	r2,r2,r10
   11cd8:	4200004c 	andi	r8,r8,1
   11cdc:	49c04d26 	beq	r9,r7,11e14 <_free_r+0x1b8>
   11ce0:	1a800317 	ldw	r10,12(r3)
   11ce4:	4a800315 	stw	r10,12(r9)
   11ce8:	52400215 	stw	r9,8(r10)
   11cec:	40006926 	beq	r8,zero,11e94 <_free_r+0x238>
   11cf0:	11400054 	ori	r5,r2,1
   11cf4:	19400115 	stw	r5,4(r3)
   11cf8:	20800015 	stw	r2,0(r4)
   11cfc:	11008028 	cmpgeui	r4,r2,512
   11d00:	20001e1e 	bne	r4,zero,11d7c <_free_r+0x120>
   11d04:	1008d0fa 	srli	r4,r2,3
   11d08:	100ad17a 	srli	r5,r2,5
   11d0c:	31c00117 	ldw	r7,4(r6)
   11d10:	20800044 	addi	r2,r4,1
   11d14:	100490fa 	slli	r2,r2,3
   11d18:	01000044 	movi	r4,1
   11d1c:	2148983a 	sll	r4,r4,r5
   11d20:	3085883a 	add	r2,r6,r2
   11d24:	11400017 	ldw	r5,0(r2)
   11d28:	21c8b03a 	or	r4,r4,r7
   11d2c:	11fffe04 	addi	r7,r2,-8
   11d30:	19c00315 	stw	r7,12(r3)
   11d34:	19400215 	stw	r5,8(r3)
   11d38:	31000115 	stw	r4,4(r6)
   11d3c:	10c00015 	stw	r3,0(r2)
   11d40:	28c00315 	stw	r3,12(r5)
   11d44:	8809883a 	mov	r4,r17
   11d48:	dfc00217 	ldw	ra,8(sp)
   11d4c:	dc400117 	ldw	r17,4(sp)
   11d50:	dc000017 	ldw	r16,0(sp)
   11d54:	dec00304 	addi	sp,sp,12
   11d58:	00122701 	jmpi	12270 <__malloc_unlock>
   11d5c:	41c00117 	ldw	r7,4(r8)
   11d60:	39c0004c 	andi	r7,r7,1
   11d64:	38001e26 	beq	r7,zero,11de0 <_free_r+0x184>
   11d68:	11400054 	ori	r5,r2,1
   11d6c:	817fff15 	stw	r5,-4(r16)
   11d70:	20800015 	stw	r2,0(r4)
   11d74:	11008028 	cmpgeui	r4,r2,512
   11d78:	203fe226 	beq	r4,zero,11d04 <_free_r+0xa8>
   11d7c:	1008d27a 	srli	r4,r2,9
   11d80:	21400168 	cmpgeui	r5,r4,5
   11d84:	2800451e 	bne	r5,zero,11e9c <_free_r+0x240>
   11d88:	1008d1ba 	srli	r4,r2,6
   11d8c:	21c00e44 	addi	r7,r4,57
   11d90:	380e90fa 	slli	r7,r7,3
   11d94:	21000e04 	addi	r4,r4,56
   11d98:	31cf883a 	add	r7,r6,r7
   11d9c:	39400017 	ldw	r5,0(r7)
   11da0:	39fffe04 	addi	r7,r7,-8
   11da4:	39405326 	beq	r7,r5,11ef4 <_free_r+0x298>
   11da8:	01bfff04 	movi	r6,-4
   11dac:	00000206 	br	11db8 <_free_r+0x15c>
   11db0:	29400217 	ldw	r5,8(r5)
   11db4:	39400326 	beq	r7,r5,11dc4 <_free_r+0x168>
   11db8:	29000117 	ldw	r4,4(r5)
   11dbc:	2188703a 	and	r4,r4,r6
   11dc0:	113ffb36 	bltu	r2,r4,11db0 <_free_r+0x154>
   11dc4:	29c00317 	ldw	r7,12(r5)
   11dc8:	19c00315 	stw	r7,12(r3)
   11dcc:	19400215 	stw	r5,8(r3)
   11dd0:	38c00215 	stw	r3,8(r7)
   11dd4:	28c00315 	stw	r3,12(r5)
   11dd8:	003fda06 	br	11d44 <_free_r+0xe8>
   11ddc:	f800283a 	ret
   11de0:	01c00074 	movhi	r7,1
   11de4:	1145883a 	add	r2,r2,r5
   11de8:	39d89b04 	addi	r7,r7,25196
   11dec:	21400217 	ldw	r5,8(r4)
   11df0:	29c03726 	beq	r5,r7,11ed0 <_free_r+0x274>
   11df4:	22000317 	ldw	r8,12(r4)
   11df8:	11c00054 	ori	r7,r2,1
   11dfc:	1889883a 	add	r4,r3,r2
   11e00:	2a000315 	stw	r8,12(r5)
   11e04:	41400215 	stw	r5,8(r8)
   11e08:	19c00115 	stw	r7,4(r3)
   11e0c:	20800015 	stw	r2,0(r4)
   11e10:	003fba06 	br	11cfc <_free_r+0xa0>
   11e14:	40004f1e 	bne	r8,zero,11f54 <_free_r+0x2f8>
   11e18:	21800217 	ldw	r6,8(r4)
   11e1c:	21000317 	ldw	r4,12(r4)
   11e20:	288b883a 	add	r5,r5,r2
   11e24:	28800054 	ori	r2,r5,1
   11e28:	31000315 	stw	r4,12(r6)
   11e2c:	21800215 	stw	r6,8(r4)
   11e30:	18800115 	stw	r2,4(r3)
   11e34:	1947883a 	add	r3,r3,r5
   11e38:	19400015 	stw	r5,0(r3)
   11e3c:	003fc106 	br	11d44 <_free_r+0xe8>
   11e40:	39c0004c 	andi	r7,r7,1
   11e44:	114b883a 	add	r5,r2,r5
   11e48:	3800071e 	bne	r7,zero,11e68 <_free_r+0x20c>
   11e4c:	81fffe17 	ldw	r7,-8(r16)
   11e50:	19c7c83a 	sub	r3,r3,r7
   11e54:	18800317 	ldw	r2,12(r3)
   11e58:	19000217 	ldw	r4,8(r3)
   11e5c:	29cb883a 	add	r5,r5,r7
   11e60:	20800315 	stw	r2,12(r4)
   11e64:	11000215 	stw	r4,8(r2)
   11e68:	00800074 	movhi	r2,1
   11e6c:	29000054 	ori	r4,r5,1
   11e70:	109f3217 	ldw	r2,31944(r2)
   11e74:	19000115 	stw	r4,4(r3)
   11e78:	30c00215 	stw	r3,8(r6)
   11e7c:	28bfb136 	bltu	r5,r2,11d44 <_free_r+0xe8>
   11e80:	008000b4 	movhi	r2,2
   11e84:	1165ea17 	ldw	r5,-26712(r2)
   11e88:	8809883a 	mov	r4,r17
   11e8c:	0011b380 	call	11b38 <_malloc_trim_r>
   11e90:	003fac06 	br	11d44 <_free_r+0xe8>
   11e94:	1145883a 	add	r2,r2,r5
   11e98:	003fd406 	br	11dec <_free_r+0x190>
   11e9c:	21400568 	cmpgeui	r5,r4,21
   11ea0:	28000726 	beq	r5,zero,11ec0 <_free_r+0x264>
   11ea4:	21401568 	cmpgeui	r5,r4,85
   11ea8:	2800191e 	bne	r5,zero,11f10 <_free_r+0x2b4>
   11eac:	1008d33a 	srli	r4,r2,12
   11eb0:	21c01bc4 	addi	r7,r4,111
   11eb4:	380e90fa 	slli	r7,r7,3
   11eb8:	21001b84 	addi	r4,r4,110
   11ebc:	003fb606 	br	11d98 <_free_r+0x13c>
   11ec0:	21c01704 	addi	r7,r4,92
   11ec4:	380e90fa 	slli	r7,r7,3
   11ec8:	210016c4 	addi	r4,r4,91
   11ecc:	003fb206 	br	11d98 <_free_r+0x13c>
   11ed0:	30c00515 	stw	r3,20(r6)
   11ed4:	30c00415 	stw	r3,16(r6)
   11ed8:	11000054 	ori	r4,r2,1
   11edc:	19c00315 	stw	r7,12(r3)
   11ee0:	19c00215 	stw	r7,8(r3)
   11ee4:	19000115 	stw	r4,4(r3)
   11ee8:	1887883a 	add	r3,r3,r2
   11eec:	18800015 	stw	r2,0(r3)
   11ef0:	003f9406 	br	11d44 <_free_r+0xe8>
   11ef4:	2009d0ba 	srai	r4,r4,2
   11ef8:	00800044 	movi	r2,1
   11efc:	32000117 	ldw	r8,4(r6)
   11f00:	1104983a 	sll	r2,r2,r4
   11f04:	1204b03a 	or	r2,r2,r8
   11f08:	30800115 	stw	r2,4(r6)
   11f0c:	003fae06 	br	11dc8 <_free_r+0x16c>
   11f10:	21405568 	cmpgeui	r5,r4,341
   11f14:	2800051e 	bne	r5,zero,11f2c <_free_r+0x2d0>
   11f18:	1008d3fa 	srli	r4,r2,15
   11f1c:	21c01e04 	addi	r7,r4,120
   11f20:	380e90fa 	slli	r7,r7,3
   11f24:	21001dc4 	addi	r4,r4,119
   11f28:	003f9b06 	br	11d98 <_free_r+0x13c>
   11f2c:	21015568 	cmpgeui	r4,r4,1365
   11f30:	2000051e 	bne	r4,zero,11f48 <_free_r+0x2ec>
   11f34:	1008d4ba 	srli	r4,r2,18
   11f38:	21c01f44 	addi	r7,r4,125
   11f3c:	380e90fa 	slli	r7,r7,3
   11f40:	21001f04 	addi	r4,r4,124
   11f44:	003f9406 	br	11d98 <_free_r+0x13c>
   11f48:	01c0fe04 	movi	r7,1016
   11f4c:	01001f84 	movi	r4,126
   11f50:	003f9106 	br	11d98 <_free_r+0x13c>
   11f54:	11400054 	ori	r5,r2,1
   11f58:	19400115 	stw	r5,4(r3)
   11f5c:	20800015 	stw	r2,0(r4)
   11f60:	003f7806 	br	11d44 <_free_r+0xe8>

00011f64 <alt_irq_register>:
 */
 
int alt_irq_register (alt_u32 id, 
                      void* context, 
                      alt_isr_func handler)
{
   11f64:	defff004 	addi	sp,sp,-64
   11f68:	df000f15 	stw	fp,60(sp)
   11f6c:	df000f04 	addi	fp,sp,60
   11f70:	e13ff315 	stw	r4,-52(fp)
   11f74:	e17ff215 	stw	r5,-56(fp)
   11f78:	e1bff115 	stw	r6,-60(fp)
  int rc = -EINVAL;  
   11f7c:	00bffa84 	movi	r2,-22
   11f80:	e0bfff15 	stw	r2,-4(fp)
  alt_irq_context status;

  if (id < ALT_NIRQ)
   11f84:	e0bff317 	ldw	r2,-52(fp)
   11f88:	10800828 	cmpgeui	r2,r2,32
   11f8c:	1000501e 	bne	r2,zero,120d0 <alt_irq_register+0x16c>
  NIOS2_READ_STATUS (context);
   11f90:	0005303a 	rdctl	r2,status
   11f94:	e0bffd15 	stw	r2,-12(fp)
  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   11f98:	e0fffd17 	ldw	r3,-12(fp)
   11f9c:	00bfff84 	movi	r2,-2
   11fa0:	1884703a 	and	r2,r3,r2
   11fa4:	1001703a 	wrctl	status,r2
  return context;
   11fa8:	e0bffd17 	ldw	r2,-12(fp)
     * interrupts are disabled while the handler tables are updated to ensure
     * that an interrupt doesn't occur while the tables are in an inconsistant
     * state.
     */

    status = alt_irq_disable_all ();
   11fac:	e0bffe15 	stw	r2,-8(fp)

    alt_irq[id].handler = handler;
   11fb0:	e0bff317 	ldw	r2,-52(fp)
   11fb4:	100890fa 	slli	r4,r2,3
   11fb8:	e0fff117 	ldw	r3,-60(fp)
   11fbc:	008000b4 	movhi	r2,2
   11fc0:	2085883a 	add	r2,r4,r2
   11fc4:	10e5fe15 	stw	r3,-26632(r2)
    alt_irq[id].context = context;
   11fc8:	e0bff317 	ldw	r2,-52(fp)
   11fcc:	100890fa 	slli	r4,r2,3
   11fd0:	e0fff217 	ldw	r3,-56(fp)
   11fd4:	008000b4 	movhi	r2,2
   11fd8:	2085883a 	add	r2,r4,r2
   11fdc:	10e5ff15 	stw	r3,-26628(r2)

    rc = (handler) ? alt_irq_enable (id): alt_irq_disable (id);
   11fe0:	e0bff117 	ldw	r2,-60(fp)
   11fe4:	10001a26 	beq	r2,zero,12050 <alt_irq_register+0xec>
   11fe8:	e0bff317 	ldw	r2,-52(fp)
   11fec:	e0bffc15 	stw	r2,-16(fp)
  NIOS2_READ_STATUS (context);
   11ff0:	0005303a 	rdctl	r2,status
   11ff4:	e0bffb15 	stw	r2,-20(fp)
  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   11ff8:	e0fffb17 	ldw	r3,-20(fp)
   11ffc:	00bfff84 	movi	r2,-2
   12000:	1884703a 	and	r2,r3,r2
   12004:	1001703a 	wrctl	status,r2
  return context;
   12008:	e0bffb17 	ldw	r2,-20(fp)
static ALT_INLINE int ALT_ALWAYS_INLINE alt_irq_enable (alt_u32 id)
{
  alt_irq_context  status;
  extern volatile alt_u32 alt_irq_active;

  status = alt_irq_disable_all ();
   1200c:	e0bffa15 	stw	r2,-24(fp)

  alt_irq_active |= (1 << id);
   12010:	00c00044 	movi	r3,1
   12014:	e0bffc17 	ldw	r2,-16(fp)
   12018:	1884983a 	sll	r2,r3,r2
   1201c:	1007883a 	mov	r3,r2
   12020:	d0a6bb17 	ldw	r2,-25876(gp)
   12024:	1884b03a 	or	r2,r3,r2
   12028:	d0a6bb15 	stw	r2,-25876(gp)
  NIOS2_WRITE_IENABLE (alt_irq_active);
   1202c:	d0a6bb17 	ldw	r2,-25876(gp)
   12030:	100170fa 	wrctl	ienable,r2
   12034:	e0bffa17 	ldw	r2,-24(fp)
   12038:	e0bff915 	stw	r2,-28(fp)
  NIOS2_WRITE_STATUS (context);
   1203c:	e0bff917 	ldw	r2,-28(fp)
   12040:	1001703a 	wrctl	status,r2
}
   12044:	0001883a 	nop

  alt_irq_enable_all(status);

  return 0;
   12048:	0005883a 	mov	r2,zero
   1204c:	00001a06 	br	120b8 <alt_irq_register+0x154>
   12050:	e0bff317 	ldw	r2,-52(fp)
   12054:	e0bff815 	stw	r2,-32(fp)
  NIOS2_READ_STATUS (context);
   12058:	0005303a 	rdctl	r2,status
   1205c:	e0bff715 	stw	r2,-36(fp)
  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   12060:	e0fff717 	ldw	r3,-36(fp)
   12064:	00bfff84 	movi	r2,-2
   12068:	1884703a 	and	r2,r3,r2
   1206c:	1001703a 	wrctl	status,r2
  return context;
   12070:	e0bff717 	ldw	r2,-36(fp)
  status = alt_irq_disable_all ();
   12074:	e0bff615 	stw	r2,-40(fp)
  alt_irq_active &= ~(1 << id);
   12078:	00c00044 	movi	r3,1
   1207c:	e0bff817 	ldw	r2,-32(fp)
   12080:	1884983a 	sll	r2,r3,r2
   12084:	0084303a 	nor	r2,zero,r2
   12088:	1007883a 	mov	r3,r2
   1208c:	d0a6bb17 	ldw	r2,-25876(gp)
   12090:	1884703a 	and	r2,r3,r2
   12094:	d0a6bb15 	stw	r2,-25876(gp)
  NIOS2_WRITE_IENABLE (alt_irq_active);
   12098:	d0a6bb17 	ldw	r2,-25876(gp)
   1209c:	100170fa 	wrctl	ienable,r2
   120a0:	e0bff617 	ldw	r2,-40(fp)
   120a4:	e0bff515 	stw	r2,-44(fp)
  NIOS2_WRITE_STATUS (context);
   120a8:	e0bff517 	ldw	r2,-44(fp)
   120ac:	1001703a 	wrctl	status,r2
}
   120b0:	0001883a 	nop
  return 0;
   120b4:	0005883a 	mov	r2,zero
   120b8:	e0bfff15 	stw	r2,-4(fp)
   120bc:	e0bffe17 	ldw	r2,-8(fp)
   120c0:	e0bff415 	stw	r2,-48(fp)
  NIOS2_WRITE_STATUS (context);
   120c4:	e0bff417 	ldw	r2,-48(fp)
   120c8:	1001703a 	wrctl	status,r2
}
   120cc:	0001883a 	nop

    alt_irq_enable_all(status);
  }
  return rc; 
   120d0:	e0bfff17 	ldw	r2,-4(fp)
}
   120d4:	e037883a 	mov	sp,fp
   120d8:	df000017 	ldw	fp,0(sp)
   120dc:	dec00104 	addi	sp,sp,4
   120e0:	f800283a 	ret

000120e4 <alt_load_section>:
 */

static void ALT_INLINE alt_load_section (alt_u32* from, 
                                         alt_u32* to, 
                                         alt_u32* end)
{
   120e4:	defffc04 	addi	sp,sp,-16
   120e8:	df000315 	stw	fp,12(sp)
   120ec:	df000304 	addi	fp,sp,12
   120f0:	e13fff15 	stw	r4,-4(fp)
   120f4:	e17ffe15 	stw	r5,-8(fp)
   120f8:	e1bffd15 	stw	r6,-12(fp)
  if (to != from)
   120fc:	e0fffe17 	ldw	r3,-8(fp)
   12100:	e0bfff17 	ldw	r2,-4(fp)
   12104:	18800c26 	beq	r3,r2,12138 <alt_load_section+0x54>
  {
    while( to != end )
   12108:	00000806 	br	1212c <alt_load_section+0x48>
    {
      *to++ = *from++;
   1210c:	e0ffff17 	ldw	r3,-4(fp)
   12110:	18800104 	addi	r2,r3,4
   12114:	e0bfff15 	stw	r2,-4(fp)
   12118:	e0bffe17 	ldw	r2,-8(fp)
   1211c:	11000104 	addi	r4,r2,4
   12120:	e13ffe15 	stw	r4,-8(fp)
   12124:	18c00017 	ldw	r3,0(r3)
   12128:	10c00015 	stw	r3,0(r2)
    while( to != end )
   1212c:	e0fffe17 	ldw	r3,-8(fp)
   12130:	e0bffd17 	ldw	r2,-12(fp)
   12134:	18bff51e 	bne	r3,r2,1210c <alt_load_section+0x28>
    }
  }
}
   12138:	0001883a 	nop
   1213c:	e037883a 	mov	sp,fp
   12140:	df000017 	ldw	fp,0(sp)
   12144:	dec00104 	addi	sp,sp,4
   12148:	f800283a 	ret

0001214c <alt_load>:
 * there is no bootloader, so this application is responsible for loading to
 * RAM any sections that are required.
 */  

void alt_load (void)
{
   1214c:	defffe04 	addi	sp,sp,-8
   12150:	dfc00115 	stw	ra,4(sp)
   12154:	df000015 	stw	fp,0(sp)
   12158:	d839883a 	mov	fp,sp
  /* 
   * Copy the .rwdata section. 
   */

  alt_load_section (&__flash_rwdata_start, 
   1215c:	01800074 	movhi	r6,1
   12160:	319f3f04 	addi	r6,r6,31996
   12164:	01400074 	movhi	r5,1
   12168:	29589904 	addi	r5,r5,25188
   1216c:	01000074 	movhi	r4,1
   12170:	211f3f04 	addi	r4,r4,31996
   12174:	00120e40 	call	120e4 <alt_load_section>

  /*
   * Copy the exception handler.
   */

  alt_load_section (&__flash_exceptions_start, 
   12178:	01800074 	movhi	r6,1
   1217c:	31808a04 	addi	r6,r6,552
   12180:	01400074 	movhi	r5,1
   12184:	29400804 	addi	r5,r5,32
   12188:	01000074 	movhi	r4,1
   1218c:	21000804 	addi	r4,r4,32
   12190:	00120e40 	call	120e4 <alt_load_section>

  /*
   * Copy the .rodata section.
   */

  alt_load_section (&__flash_rodata_start, 
   12194:	01800074 	movhi	r6,1
   12198:	31989904 	addi	r6,r6,25188
   1219c:	01400074 	movhi	r5,1
   121a0:	29580d04 	addi	r5,r5,24628
   121a4:	01000074 	movhi	r4,1
   121a8:	21180d04 	addi	r4,r4,24628
   121ac:	00120e40 	call	120e4 <alt_load_section>
  
  /*
   * Now ensure that the caches are in synch.
   */
  
  alt_dcache_flush_all();
   121b0:	00138440 	call	13844 <alt_dcache_flush_all>
  alt_icache_flush_all();
   121b4:	0013acc0 	call	13acc <alt_icache_flush_all>
}
   121b8:	0001883a 	nop
   121bc:	e037883a 	mov	sp,fp
   121c0:	dfc00117 	ldw	ra,4(sp)
   121c4:	df000017 	ldw	fp,0(sp)
   121c8:	dec00204 	addi	sp,sp,8
   121cc:	f800283a 	ret

000121d0 <alt_main>:
 * devices/filesystems/components in the system; and call the entry point for
 * the users application, i.e. main().
 */

void alt_main (void)
{
   121d0:	defffd04 	addi	sp,sp,-12
   121d4:	dfc00215 	stw	ra,8(sp)
   121d8:	df000115 	stw	fp,4(sp)
   121dc:	df000104 	addi	fp,sp,4
#endif

  /* ALT LOG - please see HAL/sys/alt_log_printf.h for details */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Entering alt_main, calling alt_irq_init.\r\n");
  /* Initialize the interrupt controller. */
  alt_irq_init (NULL);
   121e0:	0009883a 	mov	r4,zero
   121e4:	00125dc0 	call	125dc <alt_irq_init>

  /* Initialize the operating system */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Done alt_irq_init, calling alt_os_init.\r\n");
  ALT_OS_INIT();
   121e8:	0001883a 	nop
  ALT_LOG_PRINT_BOOT("[alt_main.c] Done OS Init, calling alt_sem_create.\r\n");
  ALT_SEM_CREATE (&alt_fd_list_lock, 1);

  /* Initialize the device drivers/software components. */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling alt_sys_init.\r\n");
  alt_sys_init();
   121ec:	00126180 	call	12618 <alt_sys_init>
   * devices be present (not equal to /dev/null) and if direct drivers
   * aren't being used.
   */

    ALT_LOG_PRINT_BOOT("[alt_main.c] Redirecting IO.\r\n");
    alt_io_redirect(ALT_STDOUT, ALT_STDIN, ALT_STDERR);
   121f0:	01800074 	movhi	r6,1
   121f4:	31988804 	addi	r6,r6,25120
   121f8:	01400074 	movhi	r5,1
   121fc:	29588804 	addi	r5,r5,25120
   12200:	01000074 	movhi	r4,1
   12204:	21188804 	addi	r4,r4,25120
   12208:	0013bc00 	call	13bc0 <alt_io_redirect>
  /* 
   * Call the C++ constructors 
   */

  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling C++ constructors.\r\n");
  _do_ctors ();
   1220c:	00139740 	call	13974 <_do_ctors>
   * redefined as _exit()). This is in the interest of reducing code footprint,
   * in that the atexit() overhead is removed when it's not needed.
   */

  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling atexit.\r\n");
  atexit (_do_dtors);
   12210:	01000074 	movhi	r4,1
   12214:	210e7604 	addi	r4,r4,14808
   12218:	001434c0 	call	1434c <atexit>
  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling main.\r\n");

#ifdef ALT_NO_EXIT
  main (alt_argc, alt_argv, alt_envp);
#else
  result = main (alt_argc, alt_argv, alt_envp);
   1221c:	d0a6bc17 	ldw	r2,-25872(gp)
   12220:	d0e6bd17 	ldw	r3,-25868(gp)
   12224:	d126be17 	ldw	r4,-25864(gp)
   12228:	200d883a 	mov	r6,r4
   1222c:	180b883a 	mov	r5,r3
   12230:	1009883a 	mov	r4,r2
   12234:	00109740 	call	10974 <main>
   12238:	e0bfff15 	stw	r2,-4(fp)
  close(STDOUT_FILENO);
   1223c:	01000044 	movi	r4,1
   12240:	00137680 	call	13768 <close>
  exit (result);
   12244:	e13fff17 	ldw	r4,-4(fp)
   12248:	00143600 	call	14360 <exit>

0001224c <__malloc_lock>:
 * configuration is single threaded, so there is nothing to do here. Note that 
 * this requires that malloc is never called by an interrupt service routine.
 */

void __malloc_lock ( struct _reent *_r )
{
   1224c:	defffe04 	addi	sp,sp,-8
   12250:	df000115 	stw	fp,4(sp)
   12254:	df000104 	addi	fp,sp,4
   12258:	e13fff15 	stw	r4,-4(fp)
}
   1225c:	0001883a 	nop
   12260:	e037883a 	mov	sp,fp
   12264:	df000017 	ldw	fp,0(sp)
   12268:	dec00104 	addi	sp,sp,4
   1226c:	f800283a 	ret

00012270 <__malloc_unlock>:
/*
 *
 */

void __malloc_unlock ( struct _reent *_r )
{
   12270:	defffe04 	addi	sp,sp,-8
   12274:	df000115 	stw	fp,4(sp)
   12278:	df000104 	addi	fp,sp,4
   1227c:	e13fff15 	stw	r4,-4(fp)
}
   12280:	0001883a 	nop
   12284:	e037883a 	mov	sp,fp
   12288:	df000017 	ldw	fp,0(sp)
   1228c:	dec00104 	addi	sp,sp,4
   12290:	f800283a 	ret

00012294 <alt_printf>:
/* 
 * ALT printf function 
 */
void 
alt_printf(const char* fmt, ... )
{
   12294:	defff204 	addi	sp,sp,-56
   12298:	dfc00a15 	stw	ra,40(sp)
   1229c:	df000915 	stw	fp,36(sp)
   122a0:	df000904 	addi	fp,sp,36
   122a4:	e13ff715 	stw	r4,-36(fp)
   122a8:	e1400215 	stw	r5,8(fp)
   122ac:	e1800315 	stw	r6,12(fp)
   122b0:	e1c00415 	stw	r7,16(fp)
	va_list args;
	va_start(args, fmt);
   122b4:	e0800204 	addi	r2,fp,8
   122b8:	e0bff815 	stw	r2,-32(fp)
    const char *w;
    char c;

    /* Process format string. */
    w = fmt;
   122bc:	e0bff717 	ldw	r2,-36(fp)
   122c0:	e0bfff15 	stw	r2,-4(fp)
    while ((c = *w++) != 0)
   122c4:	00006f06 	br	12484 <alt_printf+0x1f0>
    {
        /* If not a format escape character, just print  */
        /* character.  Otherwise, process format string. */
        if (c != '%')
   122c8:	e0bffec7 	ldb	r2,-5(fp)
   122cc:	10800960 	cmpeqi	r2,r2,37
   122d0:	1000041e 	bne	r2,zero,122e4 <alt_printf+0x50>
        {
            alt_putchar(c);
   122d4:	e0bffec7 	ldb	r2,-5(fp)
   122d8:	1009883a 	mov	r4,r2
   122dc:	00124c00 	call	124c0 <alt_putchar>
   122e0:	00006806 	br	12484 <alt_printf+0x1f0>
        }
        else
        {
            /* Get format character.  If none     */
            /* available, processing is complete. */
            if ((c = *w++) != 0)
   122e4:	e0bfff17 	ldw	r2,-4(fp)
   122e8:	10c00044 	addi	r3,r2,1
   122ec:	e0ffff15 	stw	r3,-4(fp)
   122f0:	10800003 	ldbu	r2,0(r2)
   122f4:	e0bffec5 	stb	r2,-5(fp)
   122f8:	e0bffec7 	ldb	r2,-5(fp)
   122fc:	10006926 	beq	r2,zero,124a4 <alt_printf+0x210>
            {
                if (c == '%')
   12300:	e0bffec7 	ldb	r2,-5(fp)
   12304:	10800958 	cmpnei	r2,r2,37
   12308:	1000041e 	bne	r2,zero,1231c <alt_printf+0x88>
                {
                    /* Process "%" escape sequence. */
                    alt_putchar(c);
   1230c:	e0bffec7 	ldb	r2,-5(fp)
   12310:	1009883a 	mov	r4,r2
   12314:	00124c00 	call	124c0 <alt_putchar>
   12318:	00005a06 	br	12484 <alt_printf+0x1f0>
                } 
                else if (c == 'c')
   1231c:	e0bffec7 	ldb	r2,-5(fp)
   12320:	108018d8 	cmpnei	r2,r2,99
   12324:	1000081e 	bne	r2,zero,12348 <alt_printf+0xb4>
                {
                    int v = va_arg(args, int);
   12328:	e0bff817 	ldw	r2,-32(fp)
   1232c:	10c00104 	addi	r3,r2,4
   12330:	e0fff815 	stw	r3,-32(fp)
   12334:	10800017 	ldw	r2,0(r2)
   12338:	e0bff915 	stw	r2,-28(fp)
                    alt_putchar(v);
   1233c:	e13ff917 	ldw	r4,-28(fp)
   12340:	00124c00 	call	124c0 <alt_putchar>
   12344:	00004f06 	br	12484 <alt_printf+0x1f0>
                }
                else if (c == 'x')
   12348:	e0bffec7 	ldb	r2,-5(fp)
   1234c:	10801e18 	cmpnei	r2,r2,120
   12350:	1000341e 	bne	r2,zero,12424 <alt_printf+0x190>
                {
                    /* Process hexadecimal number format. */
                    unsigned long v = va_arg(args, unsigned long);
   12354:	e0bff817 	ldw	r2,-32(fp)
   12358:	10c00104 	addi	r3,r2,4
   1235c:	e0fff815 	stw	r3,-32(fp)
   12360:	10800017 	ldw	r2,0(r2)
   12364:	e0bffb15 	stw	r2,-20(fp)
                    unsigned long digit;
                    int digit_shift;

                    /* If the number value is zero, just print and continue. */
                    if (v == 0)
   12368:	e0bffb17 	ldw	r2,-20(fp)
   1236c:	1000031e 	bne	r2,zero,1237c <alt_printf+0xe8>
                    {
                        alt_putchar('0');
   12370:	01000c04 	movi	r4,48
   12374:	00124c00 	call	124c0 <alt_putchar>
                        continue;
   12378:	00004206 	br	12484 <alt_printf+0x1f0>
                    }

                    /* Find first non-zero digit. */
                    digit_shift = 28;
   1237c:	00800704 	movi	r2,28
   12380:	e0bffd15 	stw	r2,-12(fp)
                    while (!(v & (0xF << digit_shift)))
   12384:	00000306 	br	12394 <alt_printf+0x100>
                        digit_shift -= 4;
   12388:	e0bffd17 	ldw	r2,-12(fp)
   1238c:	10bfff04 	addi	r2,r2,-4
   12390:	e0bffd15 	stw	r2,-12(fp)
                    while (!(v & (0xF << digit_shift)))
   12394:	00c003c4 	movi	r3,15
   12398:	e0bffd17 	ldw	r2,-12(fp)
   1239c:	1884983a 	sll	r2,r3,r2
   123a0:	1007883a 	mov	r3,r2
   123a4:	e0bffb17 	ldw	r2,-20(fp)
   123a8:	1884703a 	and	r2,r3,r2
   123ac:	103ff626 	beq	r2,zero,12388 <alt_printf+0xf4>

                    /* Print digits. */
                    for (; digit_shift >= 0; digit_shift -= 4)
   123b0:	00001906 	br	12418 <alt_printf+0x184>
                    {
                        digit = (v & (0xF << digit_shift)) >> digit_shift;
   123b4:	00c003c4 	movi	r3,15
   123b8:	e0bffd17 	ldw	r2,-12(fp)
   123bc:	1884983a 	sll	r2,r3,r2
   123c0:	1007883a 	mov	r3,r2
   123c4:	e0bffb17 	ldw	r2,-20(fp)
   123c8:	1886703a 	and	r3,r3,r2
   123cc:	e0bffd17 	ldw	r2,-12(fp)
   123d0:	1884d83a 	srl	r2,r3,r2
   123d4:	e0bffa15 	stw	r2,-24(fp)
                        if (digit <= 9)
   123d8:	e0bffa17 	ldw	r2,-24(fp)
   123dc:	108002a8 	cmpgeui	r2,r2,10
   123e0:	1000041e 	bne	r2,zero,123f4 <alt_printf+0x160>
                            c = '0' + digit;
   123e4:	e0bffa17 	ldw	r2,-24(fp)
   123e8:	10800c04 	addi	r2,r2,48
   123ec:	e0bffec5 	stb	r2,-5(fp)
   123f0:	00000306 	br	12400 <alt_printf+0x16c>
                        else
                            c = 'a' + digit - 10;
   123f4:	e0bffa17 	ldw	r2,-24(fp)
   123f8:	108015c4 	addi	r2,r2,87
   123fc:	e0bffec5 	stb	r2,-5(fp)
                        alt_putchar(c);
   12400:	e0bffec7 	ldb	r2,-5(fp)
   12404:	1009883a 	mov	r4,r2
   12408:	00124c00 	call	124c0 <alt_putchar>
                    for (; digit_shift >= 0; digit_shift -= 4)
   1240c:	e0bffd17 	ldw	r2,-12(fp)
   12410:	10bfff04 	addi	r2,r2,-4
   12414:	e0bffd15 	stw	r2,-12(fp)
   12418:	e0bffd17 	ldw	r2,-12(fp)
   1241c:	103fe50e 	bge	r2,zero,123b4 <alt_printf+0x120>
   12420:	00001806 	br	12484 <alt_printf+0x1f0>
                    }
                }
                else if (c == 's')
   12424:	e0bffec7 	ldb	r2,-5(fp)
   12428:	10801cd8 	cmpnei	r2,r2,115
   1242c:	1000151e 	bne	r2,zero,12484 <alt_printf+0x1f0>
                {
                    /* Process string format. */
                    char *s = va_arg(args, char *);
   12430:	e0bff817 	ldw	r2,-32(fp)
   12434:	10c00104 	addi	r3,r2,4
   12438:	e0fff815 	stw	r3,-32(fp)
   1243c:	10800017 	ldw	r2,0(r2)
   12440:	e0bffc15 	stw	r2,-16(fp)

                    while(*s)
   12444:	00000906 	br	1246c <alt_printf+0x1d8>
                      alt_putchar(*s++);
   12448:	e0bffc17 	ldw	r2,-16(fp)
   1244c:	10c00044 	addi	r3,r2,1
   12450:	e0fffc15 	stw	r3,-16(fp)
   12454:	10800003 	ldbu	r2,0(r2)
   12458:	10803fcc 	andi	r2,r2,255
   1245c:	1080201c 	xori	r2,r2,128
   12460:	10bfe004 	addi	r2,r2,-128
   12464:	1009883a 	mov	r4,r2
   12468:	00124c00 	call	124c0 <alt_putchar>
                    while(*s)
   1246c:	e0bffc17 	ldw	r2,-16(fp)
   12470:	10800003 	ldbu	r2,0(r2)
   12474:	10803fcc 	andi	r2,r2,255
   12478:	1080201c 	xori	r2,r2,128
   1247c:	10bfe004 	addi	r2,r2,-128
   12480:	103ff11e 	bne	r2,zero,12448 <alt_printf+0x1b4>
    while ((c = *w++) != 0)
   12484:	e0bfff17 	ldw	r2,-4(fp)
   12488:	10c00044 	addi	r3,r2,1
   1248c:	e0ffff15 	stw	r3,-4(fp)
   12490:	10800003 	ldbu	r2,0(r2)
   12494:	e0bffec5 	stb	r2,-5(fp)
   12498:	e0bffec7 	ldb	r2,-5(fp)
   1249c:	103f8a1e 	bne	r2,zero,122c8 <alt_printf+0x34>
        }
    }
#ifdef ALT_SEMIHOSTING
    alt_putbufflush();
#endif
}
   124a0:	00000106 	br	124a8 <alt_printf+0x214>
                break;
   124a4:	0001883a 	nop
}
   124a8:	0001883a 	nop
   124ac:	e037883a 	mov	sp,fp
   124b0:	dfc00117 	ldw	ra,4(sp)
   124b4:	df000017 	ldw	fp,0(sp)
   124b8:	dec00504 	addi	sp,sp,20
   124bc:	f800283a 	ret

000124c0 <alt_putchar>:
 * Uses the ALT_DRIVER_WRITE() macro to call directly to driver if available.
 * Otherwise, uses newlib provided putchar() routine.
 */
int 
alt_putchar(int c)
{
   124c0:	defffd04 	addi	sp,sp,-12
   124c4:	dfc00215 	stw	ra,8(sp)
   124c8:	df000115 	stw	fp,4(sp)
   124cc:	df000104 	addi	fp,sp,4
   124d0:	e13fff15 	stw	r4,-4(fp)
    if (ALT_DRIVER_WRITE(ALT_STDOUT_DEV, &c1, 1, 0) == -1) {
        return -1;
    }
    return c;
#else
    return putchar(c);
   124d4:	e13fff17 	ldw	r4,-4(fp)
   124d8:	00144140 	call	14414 <putchar>
#endif
#endif
}
   124dc:	e037883a 	mov	sp,fp
   124e0:	dfc00117 	ldw	ra,4(sp)
   124e4:	df000017 	ldw	fp,0(sp)
   124e8:	dec00204 	addi	sp,sp,8
   124ec:	f800283a 	ret

000124f0 <sbrk>:
#endif
 
caddr_t ALT_SBRK (int incr) __attribute__ ((no_instrument_function ));

caddr_t ALT_SBRK (int incr)
{ 
   124f0:	defff904 	addi	sp,sp,-28
   124f4:	df000615 	stw	fp,24(sp)
   124f8:	df000604 	addi	fp,sp,24
   124fc:	e13ffa15 	stw	r4,-24(fp)
  NIOS2_READ_STATUS (context);
   12500:	0005303a 	rdctl	r2,status
   12504:	e0bffd15 	stw	r2,-12(fp)
  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   12508:	e0fffd17 	ldw	r3,-12(fp)
   1250c:	00bfff84 	movi	r2,-2
   12510:	1884703a 	and	r2,r3,r2
   12514:	1001703a 	wrctl	status,r2
  return context;
   12518:	e0bffd17 	ldw	r2,-12(fp)
  alt_irq_context context;
  char *prev_heap_end; 

  context = alt_irq_disable_all();
   1251c:	e0bfff15 	stw	r2,-4(fp)

  /* Always return data aligned on a word boundary */
  heap_end = (char *)(((unsigned int)heap_end + 3) & ~3);
   12520:	d0a00517 	ldw	r2,-32748(gp)
   12524:	10c000c4 	addi	r3,r2,3
   12528:	00bfff04 	movi	r2,-4
   1252c:	1884703a 	and	r2,r3,r2
   12530:	d0a00515 	stw	r2,-32748(gp)
  if (((heap_end + incr) - __alt_heap_start) > ALT_MAX_HEAP_BYTES) {
    alt_irq_enable_all(context);
    return (caddr_t)-1;
  }
#else
  if ((heap_end + incr) > __alt_heap_limit) {
   12534:	d0e00517 	ldw	r3,-32748(gp)
   12538:	e0bffa17 	ldw	r2,-24(fp)
   1253c:	1887883a 	add	r3,r3,r2
   12540:	008000b4 	movhi	r2,2
   12544:	10800004 	addi	r2,r2,0
   12548:	10c0072e 	bgeu	r2,r3,12568 <sbrk+0x78>
   1254c:	e0bfff17 	ldw	r2,-4(fp)
   12550:	e0bffc15 	stw	r2,-16(fp)
  NIOS2_WRITE_STATUS (context);
   12554:	e0bffc17 	ldw	r2,-16(fp)
   12558:	1001703a 	wrctl	status,r2
}
   1255c:	0001883a 	nop
    alt_irq_enable_all(context);
    return (caddr_t)-1;
   12560:	00bfffc4 	movi	r2,-1
   12564:	00000c06 	br	12598 <sbrk+0xa8>
  }
#endif

  prev_heap_end = heap_end; 
   12568:	d0a00517 	ldw	r2,-32748(gp)
   1256c:	e0bffe15 	stw	r2,-8(fp)
  heap_end += incr; 
   12570:	d0e00517 	ldw	r3,-32748(gp)
   12574:	e0bffa17 	ldw	r2,-24(fp)
   12578:	1885883a 	add	r2,r3,r2
   1257c:	d0a00515 	stw	r2,-32748(gp)
   12580:	e0bfff17 	ldw	r2,-4(fp)
   12584:	e0bffb15 	stw	r2,-20(fp)
  NIOS2_WRITE_STATUS (context);
   12588:	e0bffb17 	ldw	r2,-20(fp)
   1258c:	1001703a 	wrctl	status,r2
}
   12590:	0001883a 	nop

#endif

  alt_irq_enable_all(context);

  return (caddr_t) prev_heap_end; 
   12594:	e0bffe17 	ldw	r2,-8(fp)
} 
   12598:	e037883a 	mov	sp,fp
   1259c:	df000017 	ldw	fp,0(sp)
   125a0:	dec00104 	addi	sp,sp,4
   125a4:	f800283a 	ret

000125a8 <alt_dev_reg>:
 */

extern int alt_fs_reg  (alt_dev* dev); 

static ALT_INLINE int alt_dev_reg (alt_dev* dev)
{
   125a8:	defffd04 	addi	sp,sp,-12
   125ac:	dfc00215 	stw	ra,8(sp)
   125b0:	df000115 	stw	fp,4(sp)
   125b4:	df000104 	addi	fp,sp,4
   125b8:	e13fff15 	stw	r4,-4(fp)
  extern alt_llist alt_dev_list;

  return alt_dev_llist_insert ((alt_dev_llist*) dev, &alt_dev_list);
   125bc:	d1600804 	addi	r5,gp,-32736
   125c0:	e13fff17 	ldw	r4,-4(fp)
   125c4:	00138cc0 	call	138cc <alt_dev_llist_insert>
}
   125c8:	e037883a 	mov	sp,fp
   125cc:	dfc00117 	ldw	ra,4(sp)
   125d0:	df000017 	ldw	fp,0(sp)
   125d4:	dec00204 	addi	sp,sp,8
   125d8:	f800283a 	ret

000125dc <alt_irq_init>:
 * The "base" parameter is ignored and only
 * present for backwards-compatibility.
 */

void alt_irq_init ( const void* base )
{
   125dc:	defffd04 	addi	sp,sp,-12
   125e0:	dfc00215 	stw	ra,8(sp)
   125e4:	df000115 	stw	fp,4(sp)
   125e8:	df000104 	addi	fp,sp,4
   125ec:	e13fff15 	stw	r4,-4(fp)
    ALTERA_NIOS2_GEN2_IRQ_INIT ( CPU, cpu);
   125f0:	00140f40 	call	140f4 <altera_nios2_gen2_irq_init>
    NIOS2_WRITE_STATUS(NIOS2_STATUS_PIE_MSK
   125f4:	00800044 	movi	r2,1
   125f8:	1001703a 	wrctl	status,r2
}
   125fc:	0001883a 	nop
    alt_irq_cpu_enable_interrupts();
}
   12600:	0001883a 	nop
   12604:	e037883a 	mov	sp,fp
   12608:	dfc00117 	ldw	ra,4(sp)
   1260c:	df000017 	ldw	fp,0(sp)
   12610:	dec00204 	addi	sp,sp,8
   12614:	f800283a 	ret

00012618 <alt_sys_init>:
 * Initialize the non-interrupt controller devices.
 * Called after alt_irq_init().
 */

void alt_sys_init( void )
{
   12618:	defffe04 	addi	sp,sp,-8
   1261c:	dfc00115 	stw	ra,4(sp)
   12620:	df000015 	stw	fp,0(sp)
   12624:	d839883a 	mov	fp,sp
    ALTERA_AVALON_TIMER_INIT ( TIMER, timer);
   12628:	01c0fa04 	movi	r7,1000
   1262c:	000d883a 	mov	r6,zero
   12630:	000b883a 	mov	r5,zero
   12634:	010000b4 	movhi	r4,2
   12638:	21040004 	addi	r4,r4,4096
   1263c:	00131840 	call	13184 <alt_avalon_timer_sc_init>
    ALTERA_AVALON_JTAG_UART_INIT ( JTAG_UART, jtag_uart);
   12640:	01800084 	movi	r6,2
   12644:	000b883a 	mov	r5,zero
   12648:	01000074 	movhi	r4,1
   1264c:	211aae04 	addi	r4,r4,27320
   12650:	00127ec0 	call	127ec <altera_avalon_jtag_uart_init>
   12654:	01000074 	movhi	r4,1
   12658:	211aa404 	addi	r4,r4,27280
   1265c:	00125a80 	call	125a8 <alt_dev_reg>
    ALTERA_AVALON_SYSID_QSYS_INIT ( SYSID_QSYS_0, sysid_qsys_0);
   12660:	0001883a 	nop
    ALTERA_UP_AVALON_ACCELEROMETER_SPI_INIT ( ACCELEROMETER_SPI, accelerometer_spi);
   12664:	01000074 	movhi	r4,1
   12668:	211ebc04 	addi	r4,r4,31472
   1266c:	00125a80 	call	125a8 <alt_dev_reg>
}
   12670:	0001883a 	nop
   12674:	e037883a 	mov	sp,fp
   12678:	dfc00117 	ldw	ra,4(sp)
   1267c:	df000017 	ldw	fp,0(sp)
   12680:	dec00204 	addi	sp,sp,8
   12684:	f800283a 	ret

00012688 <altera_avalon_jtag_uart_read_fd>:
 *
 */

int 
altera_avalon_jtag_uart_read_fd(alt_fd* fd, char* buffer, int space)
{
   12688:	defffa04 	addi	sp,sp,-24
   1268c:	dfc00515 	stw	ra,20(sp)
   12690:	df000415 	stw	fp,16(sp)
   12694:	df000404 	addi	fp,sp,16
   12698:	e13ffe15 	stw	r4,-8(fp)
   1269c:	e17ffd15 	stw	r5,-12(fp)
   126a0:	e1bffc15 	stw	r6,-16(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 
   126a4:	e0bffe17 	ldw	r2,-8(fp)
   126a8:	10800017 	ldw	r2,0(r2)
   126ac:	e0bfff15 	stw	r2,-4(fp)

    return altera_avalon_jtag_uart_read(&dev->state, buffer, space,
   126b0:	e0bfff17 	ldw	r2,-4(fp)
   126b4:	10c00a04 	addi	r3,r2,40
   126b8:	e0bffe17 	ldw	r2,-8(fp)
   126bc:	10800217 	ldw	r2,8(r2)
   126c0:	100f883a 	mov	r7,r2
   126c4:	e1bffc17 	ldw	r6,-16(fp)
   126c8:	e17ffd17 	ldw	r5,-12(fp)
   126cc:	1809883a 	mov	r4,r3
   126d0:	0012cbc0 	call	12cbc <altera_avalon_jtag_uart_read>
      fd->fd_flags);
}
   126d4:	e037883a 	mov	sp,fp
   126d8:	dfc00117 	ldw	ra,4(sp)
   126dc:	df000017 	ldw	fp,0(sp)
   126e0:	dec00204 	addi	sp,sp,8
   126e4:	f800283a 	ret

000126e8 <altera_avalon_jtag_uart_write_fd>:

int 
altera_avalon_jtag_uart_write_fd(alt_fd* fd, const char* buffer, int space)
{
   126e8:	defffa04 	addi	sp,sp,-24
   126ec:	dfc00515 	stw	ra,20(sp)
   126f0:	df000415 	stw	fp,16(sp)
   126f4:	df000404 	addi	fp,sp,16
   126f8:	e13ffe15 	stw	r4,-8(fp)
   126fc:	e17ffd15 	stw	r5,-12(fp)
   12700:	e1bffc15 	stw	r6,-16(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 
   12704:	e0bffe17 	ldw	r2,-8(fp)
   12708:	10800017 	ldw	r2,0(r2)
   1270c:	e0bfff15 	stw	r2,-4(fp)

    return altera_avalon_jtag_uart_write(&dev->state, buffer, space,
   12710:	e0bfff17 	ldw	r2,-4(fp)
   12714:	10c00a04 	addi	r3,r2,40
   12718:	e0bffe17 	ldw	r2,-8(fp)
   1271c:	10800217 	ldw	r2,8(r2)
   12720:	100f883a 	mov	r7,r2
   12724:	e1bffc17 	ldw	r6,-16(fp)
   12728:	e17ffd17 	ldw	r5,-12(fp)
   1272c:	1809883a 	mov	r4,r3
   12730:	0012edc0 	call	12edc <altera_avalon_jtag_uart_write>
      fd->fd_flags);
}
   12734:	e037883a 	mov	sp,fp
   12738:	dfc00117 	ldw	ra,4(sp)
   1273c:	df000017 	ldw	fp,0(sp)
   12740:	dec00204 	addi	sp,sp,8
   12744:	f800283a 	ret

00012748 <altera_avalon_jtag_uart_close_fd>:

#ifndef ALTERA_AVALON_JTAG_UART_SMALL

int 
altera_avalon_jtag_uart_close_fd(alt_fd* fd)
{
   12748:	defffc04 	addi	sp,sp,-16
   1274c:	dfc00315 	stw	ra,12(sp)
   12750:	df000215 	stw	fp,8(sp)
   12754:	df000204 	addi	fp,sp,8
   12758:	e13ffe15 	stw	r4,-8(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 
   1275c:	e0bffe17 	ldw	r2,-8(fp)
   12760:	10800017 	ldw	r2,0(r2)
   12764:	e0bfff15 	stw	r2,-4(fp)

    return altera_avalon_jtag_uart_close(&dev->state, fd->fd_flags);
   12768:	e0bfff17 	ldw	r2,-4(fp)
   1276c:	10c00a04 	addi	r3,r2,40
   12770:	e0bffe17 	ldw	r2,-8(fp)
   12774:	10800217 	ldw	r2,8(r2)
   12778:	100b883a 	mov	r5,r2
   1277c:	1809883a 	mov	r4,r3
   12780:	0012b600 	call	12b60 <altera_avalon_jtag_uart_close>
}
   12784:	e037883a 	mov	sp,fp
   12788:	dfc00117 	ldw	ra,4(sp)
   1278c:	df000017 	ldw	fp,0(sp)
   12790:	dec00204 	addi	sp,sp,8
   12794:	f800283a 	ret

00012798 <altera_avalon_jtag_uart_ioctl_fd>:

int 
altera_avalon_jtag_uart_ioctl_fd(alt_fd* fd, int req, void* arg)
{
   12798:	defffa04 	addi	sp,sp,-24
   1279c:	dfc00515 	stw	ra,20(sp)
   127a0:	df000415 	stw	fp,16(sp)
   127a4:	df000404 	addi	fp,sp,16
   127a8:	e13ffe15 	stw	r4,-8(fp)
   127ac:	e17ffd15 	stw	r5,-12(fp)
   127b0:	e1bffc15 	stw	r6,-16(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev;
   127b4:	e0bffe17 	ldw	r2,-8(fp)
   127b8:	10800017 	ldw	r2,0(r2)
   127bc:	e0bfff15 	stw	r2,-4(fp)

    return altera_avalon_jtag_uart_ioctl(&dev->state, req, arg);
   127c0:	e0bfff17 	ldw	r2,-4(fp)
   127c4:	10800a04 	addi	r2,r2,40
   127c8:	e1bffc17 	ldw	r6,-16(fp)
   127cc:	e17ffd17 	ldw	r5,-12(fp)
   127d0:	1009883a 	mov	r4,r2
   127d4:	0012bc80 	call	12bc8 <altera_avalon_jtag_uart_ioctl>
}
   127d8:	e037883a 	mov	sp,fp
   127dc:	dfc00117 	ldw	ra,4(sp)
   127e0:	df000017 	ldw	fp,0(sp)
   127e4:	dec00204 	addi	sp,sp,8
   127e8:	f800283a 	ret

000127ec <altera_avalon_jtag_uart_init>:
 * Return 1 on sucessful IRQ register and 0 on failure.
 */

void altera_avalon_jtag_uart_init(altera_avalon_jtag_uart_state* sp, 
                                  int irq_controller_id, int irq)
{
   127ec:	defffb04 	addi	sp,sp,-20
   127f0:	dfc00415 	stw	ra,16(sp)
   127f4:	df000315 	stw	fp,12(sp)
   127f8:	df000304 	addi	fp,sp,12
   127fc:	e13fff15 	stw	r4,-4(fp)
   12800:	e17ffe15 	stw	r5,-8(fp)
   12804:	e1bffd15 	stw	r6,-12(fp)
  ALT_FLAG_CREATE(&sp->events, 0);
  ALT_SEM_CREATE(&sp->read_lock, 1);
  ALT_SEM_CREATE(&sp->write_lock, 1);

  /* enable read interrupts at the device */
  sp->irq_enable = ALTERA_AVALON_JTAG_UART_CONTROL_RE_MSK;
   12808:	e0bfff17 	ldw	r2,-4(fp)
   1280c:	00c00044 	movi	r3,1
   12810:	10c00815 	stw	r3,32(r2)

  IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable); 
   12814:	e0bfff17 	ldw	r2,-4(fp)
   12818:	10800017 	ldw	r2,0(r2)
   1281c:	10800104 	addi	r2,r2,4
   12820:	1007883a 	mov	r3,r2
   12824:	e0bfff17 	ldw	r2,-4(fp)
   12828:	10800817 	ldw	r2,32(r2)
   1282c:	18800035 	stwio	r2,0(r3)
  /* register the interrupt handler */
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
  alt_ic_isr_register(irq_controller_id, irq, altera_avalon_jtag_uart_irq, 
                      sp, NULL);
#else
  alt_irq_register(irq, sp, altera_avalon_jtag_uart_irq);
   12830:	e0bffd17 	ldw	r2,-12(fp)
   12834:	01800074 	movhi	r6,1
   12838:	318a2804 	addi	r6,r6,10400
   1283c:	e17fff17 	ldw	r5,-4(fp)
   12840:	1009883a 	mov	r4,r2
   12844:	0011f640 	call	11f64 <alt_irq_register>
#endif  

  /* Register an alarm to go off every second to check for presence of host */
  sp->host_inactive = 0;
   12848:	e0bfff17 	ldw	r2,-4(fp)
   1284c:	10000915 	stw	zero,36(r2)

  if (alt_alarm_start(&sp->alarm, alt_ticks_per_second(), 
   12850:	e0bfff17 	ldw	r2,-4(fp)
   12854:	10800204 	addi	r2,r2,8
 * Obtain the system clock rate in ticks/s. 
 */

static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_ticks_per_second (void)
{
  return _alt_tick_rate;
   12858:	d0e6bf17 	ldw	r3,-25860(gp)
   1285c:	e1ffff17 	ldw	r7,-4(fp)
   12860:	01800074 	movhi	r6,1
   12864:	318aae04 	addi	r6,r6,10936
   12868:	180b883a 	mov	r5,r3
   1286c:	1009883a 	mov	r4,r2
   12870:	00135cc0 	call	135cc <alt_alarm_start>
   12874:	1000040e 	bge	r2,zero,12888 <altera_avalon_jtag_uart_init+0x9c>
    &altera_avalon_jtag_uart_timeout, sp) < 0)
  {
    /* If we can't set the alarm then record "don't know if host present" 
     * and behave as though the host is present.
     */
    sp->timeout = INT_MAX;
   12878:	e0ffff17 	ldw	r3,-4(fp)
   1287c:	00a00034 	movhi	r2,32768
   12880:	10bfffc4 	addi	r2,r2,-1
   12884:	18800115 	stw	r2,4(r3)
  }

  /* ALT_LOG - see altera_hal/HAL/inc/sys/alt_log_printf.h */ 
  ALT_LOG_JTAG_UART_ALARM_REGISTER(sp, sp->base);
}
   12888:	0001883a 	nop
   1288c:	e037883a 	mov	sp,fp
   12890:	dfc00117 	ldw	ra,4(sp)
   12894:	df000017 	ldw	fp,0(sp)
   12898:	dec00204 	addi	sp,sp,8
   1289c:	f800283a 	ret

000128a0 <altera_avalon_jtag_uart_irq>:
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
static void altera_avalon_jtag_uart_irq(void* context)
#else
static void altera_avalon_jtag_uart_irq(void* context, alt_u32 id)
#endif
{
   128a0:	defff604 	addi	sp,sp,-40
   128a4:	df000915 	stw	fp,36(sp)
   128a8:	df000904 	addi	fp,sp,36
   128ac:	e13ff815 	stw	r4,-32(fp)
   128b0:	e17ff715 	stw	r5,-36(fp)
  altera_avalon_jtag_uart_state* sp = (altera_avalon_jtag_uart_state*) context;
   128b4:	e0bff817 	ldw	r2,-32(fp)
   128b8:	e0bffc15 	stw	r2,-16(fp)
  unsigned int base = sp->base;
   128bc:	e0bffc17 	ldw	r2,-16(fp)
   128c0:	10800017 	ldw	r2,0(r2)
   128c4:	e0bffb15 	stw	r2,-20(fp)
  unsigned int postflag=0;
   128c8:	e03fff15 	stw	zero,-4(fp)
  /* ALT_LOG - see altera_hal/HAL/inc/sys/alt_log_printf.h */ 
  ALT_LOG_JTAG_UART_ISR_FUNCTION(base, sp);

  for ( ; ; )
  {
    unsigned int control = IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
   128cc:	e0bffb17 	ldw	r2,-20(fp)
   128d0:	10800104 	addi	r2,r2,4
   128d4:	10800037 	ldwio	r2,0(r2)
   128d8:	e0bffa15 	stw	r2,-24(fp)

    /* Return once nothing more to do */
    if ((control & (ALTERA_AVALON_JTAG_UART_CONTROL_RI_MSK | ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)) == 0)
   128dc:	e0bffa17 	ldw	r2,-24(fp)
   128e0:	1080c00c 	andi	r2,r2,768
   128e4:	10006e26 	beq	r2,zero,12aa0 <altera_avalon_jtag_uart_irq+0x200>
      break;

    if (control & ALTERA_AVALON_JTAG_UART_CONTROL_RI_MSK)
   128e8:	e0bffa17 	ldw	r2,-24(fp)
   128ec:	1080400c 	andi	r2,r2,256
   128f0:	10003526 	beq	r2,zero,129c8 <altera_avalon_jtag_uart_irq+0x128>
    {
      /* process a read irq.  Start by assuming that there is data in the
       * receive FIFO (otherwise why would we have been interrupted?)
       */
      unsigned int data = 1 << ALTERA_AVALON_JTAG_UART_DATA_RAVAIL_OFST;
   128f4:	00800074 	movhi	r2,1
   128f8:	e0bffe15 	stw	r2,-8(fp)
      for ( ; ; )
      {
        /* Check whether there is space in the buffer.  If not then we must not
         * read any characters from the buffer as they will be lost.
         */
        unsigned int next = (sp->rx_in + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
   128fc:	e0bffc17 	ldw	r2,-16(fp)
   12900:	10800a17 	ldw	r2,40(r2)
   12904:	10800044 	addi	r2,r2,1
   12908:	1081ffcc 	andi	r2,r2,2047
   1290c:	e0bff915 	stw	r2,-28(fp)
        if (next == sp->rx_out)
   12910:	e0bffc17 	ldw	r2,-16(fp)
   12914:	10800b17 	ldw	r2,44(r2)
   12918:	e0fff917 	ldw	r3,-28(fp)
   1291c:	18801526 	beq	r3,r2,12974 <altera_avalon_jtag_uart_irq+0xd4>
          break;

        /* Try to remove a character from the FIFO and find out whether there
         * are any more characters remaining.
         */
        data = IORD_ALTERA_AVALON_JTAG_UART_DATA(base);
   12920:	e0bffb17 	ldw	r2,-20(fp)
   12924:	10800037 	ldwio	r2,0(r2)
   12928:	e0bffe15 	stw	r2,-8(fp)
        
        if ((data & ALTERA_AVALON_JTAG_UART_DATA_RVALID_MSK) == 0)
   1292c:	e0bffe17 	ldw	r2,-8(fp)
   12930:	10a0000c 	andi	r2,r2,32768
   12934:	10001126 	beq	r2,zero,1297c <altera_avalon_jtag_uart_irq+0xdc>
          break;

        sp->rx_buf[sp->rx_in] = (data & ALTERA_AVALON_JTAG_UART_DATA_DATA_MSK) >> ALTERA_AVALON_JTAG_UART_DATA_DATA_OFST;
   12938:	e0bffc17 	ldw	r2,-16(fp)
   1293c:	10800a17 	ldw	r2,40(r2)
   12940:	e0fffe17 	ldw	r3,-8(fp)
   12944:	1809883a 	mov	r4,r3
   12948:	e0fffc17 	ldw	r3,-16(fp)
   1294c:	1885883a 	add	r2,r3,r2
   12950:	11000e05 	stb	r4,56(r2)
        sp->rx_in = (sp->rx_in + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
   12954:	e0bffc17 	ldw	r2,-16(fp)
   12958:	10800a17 	ldw	r2,40(r2)
   1295c:	10800044 	addi	r2,r2,1
   12960:	10c1ffcc 	andi	r3,r2,2047
   12964:	e0bffc17 	ldw	r2,-16(fp)
   12968:	10c00a15 	stw	r3,40(r2)
 * HAL.
 */

static ALT_INLINE int ALT_ALWAYS_INLINE alt_no_error (void)
{
  return 0;
   1296c:	0001883a 	nop
      {
   12970:	003fe206 	br	128fc <altera_avalon_jtag_uart_irq+0x5c>
          break;
   12974:	0001883a 	nop
   12978:	00000106 	br	12980 <altera_avalon_jtag_uart_irq+0xe0>
          break;
   1297c:	0001883a 	nop

        /* Post an event to notify jtag_uart_read that a character has been read */
        ALT_FLAG_POST (sp->events, ALT_JTAG_UART_READ_RDY, ALT_FLAG_SET);
      }

      if (data & ALTERA_AVALON_JTAG_UART_DATA_RAVAIL_MSK)
   12980:	e0bffe17 	ldw	r2,-8(fp)
   12984:	00ffffd4 	movui	r3,65535
   12988:	18800f2e 	bgeu	r3,r2,129c8 <altera_avalon_jtag_uart_irq+0x128>
      {
        /* If there is still data available here then the buffer is full 
         * so turn off receive interrupts until some space becomes available.
         */
        sp->irq_enable &= ~ALTERA_AVALON_JTAG_UART_CONTROL_RE_MSK;
   1298c:	e0bffc17 	ldw	r2,-16(fp)
   12990:	10c00817 	ldw	r3,32(r2)
   12994:	00bfff84 	movi	r2,-2
   12998:	1886703a 	and	r3,r3,r2
   1299c:	e0bffc17 	ldw	r2,-16(fp)
   129a0:	10c00815 	stw	r3,32(r2)
        IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(base, sp->irq_enable);
   129a4:	e0bffb17 	ldw	r2,-20(fp)
   129a8:	10800104 	addi	r2,r2,4
   129ac:	1007883a 	mov	r3,r2
   129b0:	e0bffc17 	ldw	r2,-16(fp)
   129b4:	10800817 	ldw	r2,32(r2)
   129b8:	18800035 	stwio	r2,0(r3)
        
        /* Dummy read to ensure IRQ is cleared prior to ISR completion */
        IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
   129bc:	e0bffb17 	ldw	r2,-20(fp)
   129c0:	10800104 	addi	r2,r2,4
   129c4:	10800037 	ldwio	r2,0(r2)
      }
    }

    if (control & ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)
   129c8:	e0bffa17 	ldw	r2,-24(fp)
   129cc:	1080800c 	andi	r2,r2,512
   129d0:	103fbe26 	beq	r2,zero,128cc <altera_avalon_jtag_uart_irq+0x2c>
    {
      /* process a write irq */
      unsigned int space = (control & ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_MSK) >> ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_OFST;
   129d4:	e0bffa17 	ldw	r2,-24(fp)
   129d8:	1004d43a 	srli	r2,r2,16
   129dc:	e0bffd15 	stw	r2,-12(fp)

      while (space > 0 && sp->tx_out != sp->tx_in)
   129e0:	00001506 	br	12a38 <altera_avalon_jtag_uart_irq+0x198>
      {
        IOWR_ALTERA_AVALON_JTAG_UART_DATA(base, sp->tx_buf[sp->tx_out]);
   129e4:	e0bffb17 	ldw	r2,-20(fp)
   129e8:	e0fffc17 	ldw	r3,-16(fp)
   129ec:	18c00d17 	ldw	r3,52(r3)
   129f0:	e13ffc17 	ldw	r4,-16(fp)
   129f4:	20c7883a 	add	r3,r4,r3
   129f8:	18c20e03 	ldbu	r3,2104(r3)
   129fc:	18c03fcc 	andi	r3,r3,255
   12a00:	18c0201c 	xori	r3,r3,128
   12a04:	18ffe004 	addi	r3,r3,-128
   12a08:	10c00035 	stwio	r3,0(r2)

        sp->tx_out = (sp->tx_out + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
   12a0c:	e0bffc17 	ldw	r2,-16(fp)
   12a10:	10800d17 	ldw	r2,52(r2)
   12a14:	10800044 	addi	r2,r2,1
   12a18:	10c1ffcc 	andi	r3,r2,2047
   12a1c:	e0bffc17 	ldw	r2,-16(fp)
   12a20:	10c00d15 	stw	r3,52(r2)
        
        /* indicate that the ALT_FLAG_POST routine must be called */
        postflag=1;
   12a24:	00800044 	movi	r2,1
   12a28:	e0bfff15 	stw	r2,-4(fp)

        space--;
   12a2c:	e0bffd17 	ldw	r2,-12(fp)
   12a30:	10bfffc4 	addi	r2,r2,-1
   12a34:	e0bffd15 	stw	r2,-12(fp)
      while (space > 0 && sp->tx_out != sp->tx_in)
   12a38:	e0bffd17 	ldw	r2,-12(fp)
   12a3c:	10000526 	beq	r2,zero,12a54 <altera_avalon_jtag_uart_irq+0x1b4>
   12a40:	e0bffc17 	ldw	r2,-16(fp)
   12a44:	10c00d17 	ldw	r3,52(r2)
   12a48:	e0bffc17 	ldw	r2,-16(fp)
   12a4c:	10800c17 	ldw	r2,48(r2)
   12a50:	18bfe41e 	bne	r3,r2,129e4 <altera_avalon_jtag_uart_irq+0x144>
      {
        /* Post an event to notify jtag_uart_write that a character has been written */
        ALT_FLAG_POST (sp->events, ALT_JTAG_UART_WRITE_RDY, ALT_FLAG_SET);
      }

      if (space > 0)
   12a54:	e0bffd17 	ldw	r2,-12(fp)
   12a58:	103f9c26 	beq	r2,zero,128cc <altera_avalon_jtag_uart_irq+0x2c>
      {
        /* If we don't have any more data available then turn off the TX interrupt */
        sp->irq_enable &= ~ALTERA_AVALON_JTAG_UART_CONTROL_WE_MSK;
   12a5c:	e0bffc17 	ldw	r2,-16(fp)
   12a60:	10c00817 	ldw	r3,32(r2)
   12a64:	00bfff44 	movi	r2,-3
   12a68:	1886703a 	and	r3,r3,r2
   12a6c:	e0bffc17 	ldw	r2,-16(fp)
   12a70:	10c00815 	stw	r3,32(r2)
        IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable);
   12a74:	e0bffc17 	ldw	r2,-16(fp)
   12a78:	10800017 	ldw	r2,0(r2)
   12a7c:	10800104 	addi	r2,r2,4
   12a80:	1007883a 	mov	r3,r2
   12a84:	e0bffc17 	ldw	r2,-16(fp)
   12a88:	10800817 	ldw	r2,32(r2)
   12a8c:	18800035 	stwio	r2,0(r3)
        
        /* Dummy read to ensure IRQ is cleared prior to ISR completion */
        IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
   12a90:	e0bffb17 	ldw	r2,-20(fp)
   12a94:	10800104 	addi	r2,r2,4
   12a98:	10800037 	ldwio	r2,0(r2)
  {
   12a9c:	003f8b06 	br	128cc <altera_avalon_jtag_uart_irq+0x2c>
      break;
   12aa0:	0001883a 	nop
      }
    }
  }
}
   12aa4:	0001883a 	nop
   12aa8:	e037883a 	mov	sp,fp
   12aac:	df000017 	ldw	fp,0(sp)
   12ab0:	dec00104 	addi	sp,sp,4
   12ab4:	f800283a 	ret

00012ab8 <altera_avalon_jtag_uart_timeout>:
 * Timeout routine is called every second
 */

static alt_u32 
altera_avalon_jtag_uart_timeout(void* context) 
{
   12ab8:	defffc04 	addi	sp,sp,-16
   12abc:	df000315 	stw	fp,12(sp)
   12ac0:	df000304 	addi	fp,sp,12
   12ac4:	e13ffd15 	stw	r4,-12(fp)
  altera_avalon_jtag_uart_state* sp = (altera_avalon_jtag_uart_state *) context;
   12ac8:	e0bffd17 	ldw	r2,-12(fp)
   12acc:	e0bfff15 	stw	r2,-4(fp)

  unsigned int control = IORD_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base);
   12ad0:	e0bfff17 	ldw	r2,-4(fp)
   12ad4:	10800017 	ldw	r2,0(r2)
   12ad8:	10800104 	addi	r2,r2,4
   12adc:	10800037 	ldwio	r2,0(r2)
   12ae0:	e0bffe15 	stw	r2,-8(fp)

  if (control & ALTERA_AVALON_JTAG_UART_CONTROL_AC_MSK)
   12ae4:	e0bffe17 	ldw	r2,-8(fp)
   12ae8:	1081000c 	andi	r2,r2,1024
   12aec:	10000b26 	beq	r2,zero,12b1c <altera_avalon_jtag_uart_timeout+0x64>
  {
    IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable | ALTERA_AVALON_JTAG_UART_CONTROL_AC_MSK);
   12af0:	e0bfff17 	ldw	r2,-4(fp)
   12af4:	10800017 	ldw	r2,0(r2)
   12af8:	10800104 	addi	r2,r2,4
   12afc:	1007883a 	mov	r3,r2
   12b00:	e0bfff17 	ldw	r2,-4(fp)
   12b04:	10800817 	ldw	r2,32(r2)
   12b08:	10810014 	ori	r2,r2,1024
   12b0c:	18800035 	stwio	r2,0(r3)
    sp->host_inactive = 0;
   12b10:	e0bfff17 	ldw	r2,-4(fp)
   12b14:	10000915 	stw	zero,36(r2)
   12b18:	00000c06 	br	12b4c <altera_avalon_jtag_uart_timeout+0x94>
  }
  else if (sp->host_inactive < INT_MAX - 2) {
   12b1c:	e0bfff17 	ldw	r2,-4(fp)
   12b20:	10c00917 	ldw	r3,36(r2)
   12b24:	00a00034 	movhi	r2,32768
   12b28:	10bfff04 	addi	r2,r2,-4
   12b2c:	10c00736 	bltu	r2,r3,12b4c <altera_avalon_jtag_uart_timeout+0x94>
    sp->host_inactive++;
   12b30:	e0bfff17 	ldw	r2,-4(fp)
   12b34:	10800917 	ldw	r2,36(r2)
   12b38:	10c00044 	addi	r3,r2,1
   12b3c:	e0bfff17 	ldw	r2,-4(fp)
   12b40:	10c00915 	stw	r3,36(r2)
    
    if (sp->host_inactive >= sp->timeout) {
   12b44:	e0bfff17 	ldw	r2,-4(fp)
   12b48:	10800917 	ldw	r2,36(r2)
   12b4c:	d0a6bf17 	ldw	r2,-25860(gp)
      ALT_FLAG_POST (sp->events, ALT_JTAG_UART_TIMEOUT, ALT_FLAG_SET);
    }
  }

  return alt_ticks_per_second();
}
   12b50:	e037883a 	mov	sp,fp
   12b54:	df000017 	ldw	fp,0(sp)
   12b58:	dec00104 	addi	sp,sp,4
   12b5c:	f800283a 	ret

00012b60 <altera_avalon_jtag_uart_close>:
 * The close routine is not implemented for the small driver; instead it will
 * map to null. This is because the small driver simply waits while characters
 * are transmitted; there is no interrupt-serviced buffer to empty 
 */
int altera_avalon_jtag_uart_close(altera_avalon_jtag_uart_state* sp, int flags)
{
   12b60:	defffd04 	addi	sp,sp,-12
   12b64:	df000215 	stw	fp,8(sp)
   12b68:	df000204 	addi	fp,sp,8
   12b6c:	e13fff15 	stw	r4,-4(fp)
   12b70:	e17ffe15 	stw	r5,-8(fp)
  /* 
   * Wait for all transmit data to be emptied by the JTAG UART ISR, or
   * for a host-inactivity timeout, in which case transmit data will be lost
   */
  while ( (sp->tx_out != sp->tx_in) && (sp->host_inactive < sp->timeout) ) {
   12b74:	00000506 	br	12b8c <altera_avalon_jtag_uart_close+0x2c>
    if (flags & O_NONBLOCK) {
   12b78:	e0bffe17 	ldw	r2,-8(fp)
   12b7c:	1090000c 	andi	r2,r2,16384
   12b80:	10000226 	beq	r2,zero,12b8c <altera_avalon_jtag_uart_close+0x2c>
      return -EWOULDBLOCK; 
   12b84:	00bffd44 	movi	r2,-11
   12b88:	00000b06 	br	12bb8 <altera_avalon_jtag_uart_close+0x58>
  while ( (sp->tx_out != sp->tx_in) && (sp->host_inactive < sp->timeout) ) {
   12b8c:	e0bfff17 	ldw	r2,-4(fp)
   12b90:	10c00d17 	ldw	r3,52(r2)
   12b94:	e0bfff17 	ldw	r2,-4(fp)
   12b98:	10800c17 	ldw	r2,48(r2)
   12b9c:	18800526 	beq	r3,r2,12bb4 <altera_avalon_jtag_uart_close+0x54>
   12ba0:	e0bfff17 	ldw	r2,-4(fp)
   12ba4:	10c00917 	ldw	r3,36(r2)
   12ba8:	e0bfff17 	ldw	r2,-4(fp)
   12bac:	10800117 	ldw	r2,4(r2)
   12bb0:	18bff136 	bltu	r3,r2,12b78 <altera_avalon_jtag_uart_close+0x18>
    }
  }

  return 0;
   12bb4:	0005883a 	mov	r2,zero
}
   12bb8:	e037883a 	mov	sp,fp
   12bbc:	df000017 	ldw	fp,0(sp)
   12bc0:	dec00104 	addi	sp,sp,4
   12bc4:	f800283a 	ret

00012bc8 <altera_avalon_jtag_uart_ioctl>:
/* ----------------------------------------------------------- */

int 
altera_avalon_jtag_uart_ioctl(altera_avalon_jtag_uart_state* sp, int req,
  void* arg)
{
   12bc8:	defffa04 	addi	sp,sp,-24
   12bcc:	df000515 	stw	fp,20(sp)
   12bd0:	df000504 	addi	fp,sp,20
   12bd4:	e13ffd15 	stw	r4,-12(fp)
   12bd8:	e17ffc15 	stw	r5,-16(fp)
   12bdc:	e1bffb15 	stw	r6,-20(fp)
  int rc = -ENOTTY;
   12be0:	00bff9c4 	movi	r2,-25
   12be4:	e0bfff15 	stw	r2,-4(fp)

  switch (req)
   12be8:	e0bffc17 	ldw	r2,-16(fp)
   12bec:	109a8060 	cmpeqi	r2,r2,27137
   12bf0:	1000041e 	bne	r2,zero,12c04 <altera_avalon_jtag_uart_ioctl+0x3c>
   12bf4:	e0bffc17 	ldw	r2,-16(fp)
   12bf8:	109a80a0 	cmpeqi	r2,r2,27138
   12bfc:	1000181e 	bne	r2,zero,12c60 <altera_avalon_jtag_uart_ioctl+0x98>
      rc = 0;
    }
    break;

  default:
    break;
   12c00:	00002906 	br	12ca8 <altera_avalon_jtag_uart_ioctl+0xe0>
    if (sp->timeout != INT_MAX)
   12c04:	e0bffd17 	ldw	r2,-12(fp)
   12c08:	10c00117 	ldw	r3,4(r2)
   12c0c:	00a00034 	movhi	r2,32768
   12c10:	10bfffc4 	addi	r2,r2,-1
   12c14:	18802126 	beq	r3,r2,12c9c <altera_avalon_jtag_uart_ioctl+0xd4>
      int timeout = *((int *)arg);
   12c18:	e0bffb17 	ldw	r2,-20(fp)
   12c1c:	10800017 	ldw	r2,0(r2)
   12c20:	e0bffe15 	stw	r2,-8(fp)
      sp->timeout = (timeout >= 2 && timeout < INT_MAX) ? timeout : INT_MAX - 1;
   12c24:	e0bffe17 	ldw	r2,-8(fp)
   12c28:	10800090 	cmplti	r2,r2,2
   12c2c:	1000061e 	bne	r2,zero,12c48 <altera_avalon_jtag_uart_ioctl+0x80>
   12c30:	e0fffe17 	ldw	r3,-8(fp)
   12c34:	00a00034 	movhi	r2,32768
   12c38:	10bfffc4 	addi	r2,r2,-1
   12c3c:	18800226 	beq	r3,r2,12c48 <altera_avalon_jtag_uart_ioctl+0x80>
   12c40:	e0bffe17 	ldw	r2,-8(fp)
   12c44:	00000206 	br	12c50 <altera_avalon_jtag_uart_ioctl+0x88>
   12c48:	00a00034 	movhi	r2,32768
   12c4c:	10bfff84 	addi	r2,r2,-2
   12c50:	e0fffd17 	ldw	r3,-12(fp)
   12c54:	18800115 	stw	r2,4(r3)
      rc = 0;
   12c58:	e03fff15 	stw	zero,-4(fp)
    break;
   12c5c:	00000f06 	br	12c9c <altera_avalon_jtag_uart_ioctl+0xd4>
    if (sp->timeout != INT_MAX)
   12c60:	e0bffd17 	ldw	r2,-12(fp)
   12c64:	10c00117 	ldw	r3,4(r2)
   12c68:	00a00034 	movhi	r2,32768
   12c6c:	10bfffc4 	addi	r2,r2,-1
   12c70:	18800c26 	beq	r3,r2,12ca4 <altera_avalon_jtag_uart_ioctl+0xdc>
      *((int *)arg) = (sp->host_inactive < sp->timeout) ? 1 : 0;
   12c74:	e0bffd17 	ldw	r2,-12(fp)
   12c78:	10c00917 	ldw	r3,36(r2)
   12c7c:	e0bffd17 	ldw	r2,-12(fp)
   12c80:	10800117 	ldw	r2,4(r2)
   12c84:	1885803a 	cmpltu	r2,r3,r2
   12c88:	10c03fcc 	andi	r3,r2,255
   12c8c:	e0bffb17 	ldw	r2,-20(fp)
   12c90:	10c00015 	stw	r3,0(r2)
      rc = 0;
   12c94:	e03fff15 	stw	zero,-4(fp)
    break;
   12c98:	00000206 	br	12ca4 <altera_avalon_jtag_uart_ioctl+0xdc>
    break;
   12c9c:	0001883a 	nop
   12ca0:	00000106 	br	12ca8 <altera_avalon_jtag_uart_ioctl+0xe0>
    break;
   12ca4:	0001883a 	nop
  }

  return rc;
   12ca8:	e0bfff17 	ldw	r2,-4(fp)
}
   12cac:	e037883a 	mov	sp,fp
   12cb0:	df000017 	ldw	fp,0(sp)
   12cb4:	dec00104 	addi	sp,sp,4
   12cb8:	f800283a 	ret

00012cbc <altera_avalon_jtag_uart_read>:
/* ----------------------------------------------------------- */

int 
altera_avalon_jtag_uart_read(altera_avalon_jtag_uart_state* sp, 
  char * buffer, int space, int flags)
{
   12cbc:	defff304 	addi	sp,sp,-52
   12cc0:	dfc00c15 	stw	ra,48(sp)
   12cc4:	df000b15 	stw	fp,44(sp)
   12cc8:	df000b04 	addi	fp,sp,44
   12ccc:	e13ff815 	stw	r4,-32(fp)
   12cd0:	e17ff715 	stw	r5,-36(fp)
   12cd4:	e1bff615 	stw	r6,-40(fp)
   12cd8:	e1fff515 	stw	r7,-44(fp)
  char * ptr = buffer;
   12cdc:	e0bff717 	ldw	r2,-36(fp)
   12ce0:	e0bfff15 	stw	r2,-4(fp)
   * When running in a multi threaded environment, obtain the "read_lock"
   * semaphore. This ensures that reading from the device is thread-safe.
   */
  ALT_SEM_PEND (sp->read_lock, 0);

  while (space > 0)
   12ce4:	00004706 	br	12e04 <altera_avalon_jtag_uart_read+0x148>
    unsigned int in, out;

    /* Read as much data as possible */
    do
    {
      in  = sp->rx_in;
   12ce8:	e0bff817 	ldw	r2,-32(fp)
   12cec:	10800a17 	ldw	r2,40(r2)
   12cf0:	e0bffd15 	stw	r2,-12(fp)
      out = sp->rx_out;
   12cf4:	e0bff817 	ldw	r2,-32(fp)
   12cf8:	10800b17 	ldw	r2,44(r2)
   12cfc:	e0bffc15 	stw	r2,-16(fp)

      if (in >= out)
   12d00:	e0fffd17 	ldw	r3,-12(fp)
   12d04:	e0bffc17 	ldw	r2,-16(fp)
   12d08:	18800536 	bltu	r3,r2,12d20 <altera_avalon_jtag_uart_read+0x64>
        n = in - out;
   12d0c:	e0fffd17 	ldw	r3,-12(fp)
   12d10:	e0bffc17 	ldw	r2,-16(fp)
   12d14:	1885c83a 	sub	r2,r3,r2
   12d18:	e0bffe15 	stw	r2,-8(fp)
   12d1c:	00000406 	br	12d30 <altera_avalon_jtag_uart_read+0x74>
      else
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - out;
   12d20:	00c20004 	movi	r3,2048
   12d24:	e0bffc17 	ldw	r2,-16(fp)
   12d28:	1885c83a 	sub	r2,r3,r2
   12d2c:	e0bffe15 	stw	r2,-8(fp)

      if (n == 0)
   12d30:	e0bffe17 	ldw	r2,-8(fp)
   12d34:	10001e26 	beq	r2,zero,12db0 <altera_avalon_jtag_uart_read+0xf4>
        break; /* No more data available */

      if (n > space)
   12d38:	e0fff617 	ldw	r3,-40(fp)
   12d3c:	e0bffe17 	ldw	r2,-8(fp)
   12d40:	1880022e 	bgeu	r3,r2,12d4c <altera_avalon_jtag_uart_read+0x90>
        n = space;
   12d44:	e0bff617 	ldw	r2,-40(fp)
   12d48:	e0bffe15 	stw	r2,-8(fp)

      memcpy(ptr, sp->rx_buf + out, n);
   12d4c:	e0bff817 	ldw	r2,-32(fp)
   12d50:	10c00e04 	addi	r3,r2,56
   12d54:	e0bffc17 	ldw	r2,-16(fp)
   12d58:	1885883a 	add	r2,r3,r2
   12d5c:	e1bffe17 	ldw	r6,-8(fp)
   12d60:	100b883a 	mov	r5,r2
   12d64:	e13fff17 	ldw	r4,-4(fp)
   12d68:	00119e00 	call	119e0 <memcpy>
      ptr   += n;
   12d6c:	e0ffff17 	ldw	r3,-4(fp)
   12d70:	e0bffe17 	ldw	r2,-8(fp)
   12d74:	1885883a 	add	r2,r3,r2
   12d78:	e0bfff15 	stw	r2,-4(fp)
      space -= n;
   12d7c:	e0fff617 	ldw	r3,-40(fp)
   12d80:	e0bffe17 	ldw	r2,-8(fp)
   12d84:	1885c83a 	sub	r2,r3,r2
   12d88:	e0bff615 	stw	r2,-40(fp)

      sp->rx_out = (out + n) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
   12d8c:	e0fffc17 	ldw	r3,-16(fp)
   12d90:	e0bffe17 	ldw	r2,-8(fp)
   12d94:	1885883a 	add	r2,r3,r2
   12d98:	10c1ffcc 	andi	r3,r2,2047
   12d9c:	e0bff817 	ldw	r2,-32(fp)
   12da0:	10c00b15 	stw	r3,44(r2)
    }
    while (space > 0);
   12da4:	e0bff617 	ldw	r2,-40(fp)
   12da8:	00bfcf16 	blt	zero,r2,12ce8 <altera_avalon_jtag_uart_read+0x2c>
   12dac:	00000106 	br	12db4 <altera_avalon_jtag_uart_read+0xf8>
        break; /* No more data available */
   12db0:	0001883a 	nop

    /* If we read any data then return it */
    if (ptr != buffer)
   12db4:	e0ffff17 	ldw	r3,-4(fp)
   12db8:	e0bff717 	ldw	r2,-36(fp)
   12dbc:	1880141e 	bne	r3,r2,12e10 <altera_avalon_jtag_uart_read+0x154>
      break;

    /* If in non-blocking mode then return error */
    if (flags & O_NONBLOCK)
   12dc0:	e0bff517 	ldw	r2,-44(fp)
   12dc4:	1090000c 	andi	r2,r2,16384
   12dc8:	1000131e 	bne	r2,zero,12e18 <altera_avalon_jtag_uart_read+0x15c>
      while (in == sp->rx_in && sp->host_inactive < sp->timeout)
        ;
    }
#else
    /* No OS: Always spin */
    while (in == sp->rx_in && sp->host_inactive < sp->timeout)
   12dcc:	0001883a 	nop
   12dd0:	e0bff817 	ldw	r2,-32(fp)
   12dd4:	10800a17 	ldw	r2,40(r2)
   12dd8:	e0fffd17 	ldw	r3,-12(fp)
   12ddc:	1880051e 	bne	r3,r2,12df4 <altera_avalon_jtag_uart_read+0x138>
   12de0:	e0bff817 	ldw	r2,-32(fp)
   12de4:	10c00917 	ldw	r3,36(r2)
   12de8:	e0bff817 	ldw	r2,-32(fp)
   12dec:	10800117 	ldw	r2,4(r2)
   12df0:	18bff736 	bltu	r3,r2,12dd0 <altera_avalon_jtag_uart_read+0x114>
      ;
#endif /* __ucosii__ */

    if (in == sp->rx_in)
   12df4:	e0bff817 	ldw	r2,-32(fp)
   12df8:	10800a17 	ldw	r2,40(r2)
   12dfc:	e0fffd17 	ldw	r3,-12(fp)
   12e00:	18800726 	beq	r3,r2,12e20 <altera_avalon_jtag_uart_read+0x164>
  while (space > 0)
   12e04:	e0bff617 	ldw	r2,-40(fp)
   12e08:	00bfb716 	blt	zero,r2,12ce8 <altera_avalon_jtag_uart_read+0x2c>
   12e0c:	00000506 	br	12e24 <altera_avalon_jtag_uart_read+0x168>
      break;
   12e10:	0001883a 	nop
   12e14:	00000306 	br	12e24 <altera_avalon_jtag_uart_read+0x168>
      break;
   12e18:	0001883a 	nop
   12e1c:	00000106 	br	12e24 <altera_avalon_jtag_uart_read+0x168>
      break;
   12e20:	0001883a 	nop
   * semaphore so that other threads can access the buffer.
   */

  ALT_SEM_POST (sp->read_lock);

  if (ptr != buffer)
   12e24:	e0ffff17 	ldw	r3,-4(fp)
   12e28:	e0bff717 	ldw	r2,-36(fp)
   12e2c:	18801926 	beq	r3,r2,12e94 <altera_avalon_jtag_uart_read+0x1d8>
  NIOS2_READ_STATUS (context);
   12e30:	0005303a 	rdctl	r2,status
   12e34:	e0bff915 	stw	r2,-28(fp)
  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   12e38:	e0fff917 	ldw	r3,-28(fp)
   12e3c:	00bfff84 	movi	r2,-2
   12e40:	1884703a 	and	r2,r3,r2
   12e44:	1001703a 	wrctl	status,r2
  return context;
   12e48:	e0bff917 	ldw	r2,-28(fp)
  {
    /* If we read any data then there is space in the buffer so enable interrupts */
    context = alt_irq_disable_all();
   12e4c:	e0bffb15 	stw	r2,-20(fp)
    sp->irq_enable |= ALTERA_AVALON_JTAG_UART_CONTROL_RE_MSK;
   12e50:	e0bff817 	ldw	r2,-32(fp)
   12e54:	10800817 	ldw	r2,32(r2)
   12e58:	10c00054 	ori	r3,r2,1
   12e5c:	e0bff817 	ldw	r2,-32(fp)
   12e60:	10c00815 	stw	r3,32(r2)
    IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable);
   12e64:	e0bff817 	ldw	r2,-32(fp)
   12e68:	10800017 	ldw	r2,0(r2)
   12e6c:	10800104 	addi	r2,r2,4
   12e70:	1007883a 	mov	r3,r2
   12e74:	e0bff817 	ldw	r2,-32(fp)
   12e78:	10800817 	ldw	r2,32(r2)
   12e7c:	18800035 	stwio	r2,0(r3)
   12e80:	e0bffb17 	ldw	r2,-20(fp)
   12e84:	e0bffa15 	stw	r2,-24(fp)
  NIOS2_WRITE_STATUS (context);
   12e88:	e0bffa17 	ldw	r2,-24(fp)
   12e8c:	1001703a 	wrctl	status,r2
}
   12e90:	0001883a 	nop
    alt_irq_enable_all(context);
  }

  if (ptr != buffer)
   12e94:	e0ffff17 	ldw	r3,-4(fp)
   12e98:	e0bff717 	ldw	r2,-36(fp)
   12e9c:	18800426 	beq	r3,r2,12eb0 <altera_avalon_jtag_uart_read+0x1f4>
    return ptr - buffer;
   12ea0:	e0ffff17 	ldw	r3,-4(fp)
   12ea4:	e0bff717 	ldw	r2,-36(fp)
   12ea8:	1885c83a 	sub	r2,r3,r2
   12eac:	00000606 	br	12ec8 <altera_avalon_jtag_uart_read+0x20c>
  else if (flags & O_NONBLOCK)
   12eb0:	e0bff517 	ldw	r2,-44(fp)
   12eb4:	1090000c 	andi	r2,r2,16384
   12eb8:	10000226 	beq	r2,zero,12ec4 <altera_avalon_jtag_uart_read+0x208>
    return -EWOULDBLOCK;
   12ebc:	00bffd44 	movi	r2,-11
   12ec0:	00000106 	br	12ec8 <altera_avalon_jtag_uart_read+0x20c>
  else
    return -EIO;
   12ec4:	00bffec4 	movi	r2,-5
}
   12ec8:	e037883a 	mov	sp,fp
   12ecc:	dfc00117 	ldw	ra,4(sp)
   12ed0:	df000017 	ldw	fp,0(sp)
   12ed4:	dec00204 	addi	sp,sp,8
   12ed8:	f800283a 	ret

00012edc <altera_avalon_jtag_uart_write>:
/* ----------------------------------------------------------- */

int 
altera_avalon_jtag_uart_write(altera_avalon_jtag_uart_state* sp, 
  const char * ptr, int count, int flags)
{
   12edc:	defff304 	addi	sp,sp,-52
   12ee0:	dfc00c15 	stw	ra,48(sp)
   12ee4:	df000b15 	stw	fp,44(sp)
   12ee8:	df000b04 	addi	fp,sp,44
   12eec:	e13ff815 	stw	r4,-32(fp)
   12ef0:	e17ff715 	stw	r5,-36(fp)
   12ef4:	e1bff615 	stw	r6,-40(fp)
   12ef8:	e1fff515 	stw	r7,-44(fp)
  /* Remove warning at optimisation level 03 by seting out to 0 */
  unsigned int in, out=0;
   12efc:	e03fff15 	stw	zero,-4(fp)
  unsigned int n;
  alt_irq_context context;

  const char * start = ptr;
   12f00:	e0bff717 	ldw	r2,-36(fp)
   12f04:	e0bffd15 	stw	r2,-12(fp)
  ALT_SEM_PEND (sp->write_lock, 0);

  do
  {
    /* Copy as much as we can into the transmit buffer */
    while (count > 0)
   12f08:	00003706 	br	12fe8 <altera_avalon_jtag_uart_write+0x10c>
    {
      /* We need a stable value of the out pointer to calculate the space available */
      in  = sp->tx_in;
   12f0c:	e0bff817 	ldw	r2,-32(fp)
   12f10:	10800c17 	ldw	r2,48(r2)
   12f14:	e0bffc15 	stw	r2,-16(fp)
      out = sp->tx_out;
   12f18:	e0bff817 	ldw	r2,-32(fp)
   12f1c:	10800d17 	ldw	r2,52(r2)
   12f20:	e0bfff15 	stw	r2,-4(fp)

      if (in < out)
   12f24:	e0fffc17 	ldw	r3,-16(fp)
   12f28:	e0bfff17 	ldw	r2,-4(fp)
   12f2c:	1880062e 	bgeu	r3,r2,12f48 <altera_avalon_jtag_uart_write+0x6c>
        n = out - 1 - in;
   12f30:	e0ffff17 	ldw	r3,-4(fp)
   12f34:	e0bffc17 	ldw	r2,-16(fp)
   12f38:	1885c83a 	sub	r2,r3,r2
   12f3c:	10bfffc4 	addi	r2,r2,-1
   12f40:	e0bffe15 	stw	r2,-8(fp)
   12f44:	00000b06 	br	12f74 <altera_avalon_jtag_uart_write+0x98>
      else if (out > 0)
   12f48:	e0bfff17 	ldw	r2,-4(fp)
   12f4c:	10000526 	beq	r2,zero,12f64 <altera_avalon_jtag_uart_write+0x88>
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - in;
   12f50:	00c20004 	movi	r3,2048
   12f54:	e0bffc17 	ldw	r2,-16(fp)
   12f58:	1885c83a 	sub	r2,r3,r2
   12f5c:	e0bffe15 	stw	r2,-8(fp)
   12f60:	00000406 	br	12f74 <altera_avalon_jtag_uart_write+0x98>
      else
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - 1 - in;
   12f64:	00c1ffc4 	movi	r3,2047
   12f68:	e0bffc17 	ldw	r2,-16(fp)
   12f6c:	1885c83a 	sub	r2,r3,r2
   12f70:	e0bffe15 	stw	r2,-8(fp)

      if (n == 0)
   12f74:	e0bffe17 	ldw	r2,-8(fp)
   12f78:	10001e26 	beq	r2,zero,12ff4 <altera_avalon_jtag_uart_write+0x118>
        break;

      if (n > count)
   12f7c:	e0fff617 	ldw	r3,-40(fp)
   12f80:	e0bffe17 	ldw	r2,-8(fp)
   12f84:	1880022e 	bgeu	r3,r2,12f90 <altera_avalon_jtag_uart_write+0xb4>
        n = count;
   12f88:	e0bff617 	ldw	r2,-40(fp)
   12f8c:	e0bffe15 	stw	r2,-8(fp)

      memcpy(sp->tx_buf + in, ptr, n);
   12f90:	e0bff817 	ldw	r2,-32(fp)
   12f94:	10c20e04 	addi	r3,r2,2104
   12f98:	e0bffc17 	ldw	r2,-16(fp)
   12f9c:	1885883a 	add	r2,r3,r2
   12fa0:	e1bffe17 	ldw	r6,-8(fp)
   12fa4:	e17ff717 	ldw	r5,-36(fp)
   12fa8:	1009883a 	mov	r4,r2
   12fac:	00119e00 	call	119e0 <memcpy>
      ptr   += n;
   12fb0:	e0fff717 	ldw	r3,-36(fp)
   12fb4:	e0bffe17 	ldw	r2,-8(fp)
   12fb8:	1885883a 	add	r2,r3,r2
   12fbc:	e0bff715 	stw	r2,-36(fp)
      count -= n;
   12fc0:	e0fff617 	ldw	r3,-40(fp)
   12fc4:	e0bffe17 	ldw	r2,-8(fp)
   12fc8:	1885c83a 	sub	r2,r3,r2
   12fcc:	e0bff615 	stw	r2,-40(fp)

      sp->tx_in = (in + n) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
   12fd0:	e0fffc17 	ldw	r3,-16(fp)
   12fd4:	e0bffe17 	ldw	r2,-8(fp)
   12fd8:	1885883a 	add	r2,r3,r2
   12fdc:	10c1ffcc 	andi	r3,r2,2047
   12fe0:	e0bff817 	ldw	r2,-32(fp)
   12fe4:	10c00c15 	stw	r3,48(r2)
    while (count > 0)
   12fe8:	e0bff617 	ldw	r2,-40(fp)
   12fec:	00bfc716 	blt	zero,r2,12f0c <altera_avalon_jtag_uart_write+0x30>
   12ff0:	00000106 	br	12ff8 <altera_avalon_jtag_uart_write+0x11c>
        break;
   12ff4:	0001883a 	nop
  NIOS2_READ_STATUS (context);
   12ff8:	0005303a 	rdctl	r2,status
   12ffc:	e0bff915 	stw	r2,-28(fp)
  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   13000:	e0fff917 	ldw	r3,-28(fp)
   13004:	00bfff84 	movi	r2,-2
   13008:	1884703a 	and	r2,r3,r2
   1300c:	1001703a 	wrctl	status,r2
  return context;
   13010:	e0bff917 	ldw	r2,-28(fp)
     * to enable interrupts if there is no space left in the FIFO
     *
     * For now kick the interrupt routine every time to make it transmit 
     * the data 
     */
    context = alt_irq_disable_all();
   13014:	e0bffb15 	stw	r2,-20(fp)
    sp->irq_enable |= ALTERA_AVALON_JTAG_UART_CONTROL_WE_MSK;
   13018:	e0bff817 	ldw	r2,-32(fp)
   1301c:	10800817 	ldw	r2,32(r2)
   13020:	10c00094 	ori	r3,r2,2
   13024:	e0bff817 	ldw	r2,-32(fp)
   13028:	10c00815 	stw	r3,32(r2)
    IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable);
   1302c:	e0bff817 	ldw	r2,-32(fp)
   13030:	10800017 	ldw	r2,0(r2)
   13034:	10800104 	addi	r2,r2,4
   13038:	1007883a 	mov	r3,r2
   1303c:	e0bff817 	ldw	r2,-32(fp)
   13040:	10800817 	ldw	r2,32(r2)
   13044:	18800035 	stwio	r2,0(r3)
   13048:	e0bffb17 	ldw	r2,-20(fp)
   1304c:	e0bffa15 	stw	r2,-24(fp)
  NIOS2_WRITE_STATUS (context);
   13050:	e0bffa17 	ldw	r2,-24(fp)
   13054:	1001703a 	wrctl	status,r2
}
   13058:	0001883a 	nop
    /* 
     * If there is any data left then either return now or block until 
     * some has been sent 
     */
    /* consider: test whether there is anything there while doing this and delay for at most 2s. */
    if (count > 0)
   1305c:	e0bff617 	ldw	r2,-40(fp)
   13060:	0080100e 	bge	zero,r2,130a4 <altera_avalon_jtag_uart_write+0x1c8>
    {
      if (flags & O_NONBLOCK)
   13064:	e0bff517 	ldw	r2,-44(fp)
   13068:	1090000c 	andi	r2,r2,16384
   1306c:	1000101e 	bne	r2,zero,130b0 <altera_avalon_jtag_uart_write+0x1d4>
      /*
       * No OS present: Always wait for data to be removed from buffer.  Once
       * the interrupt routine has removed some data then we will be able to
       * insert some more.
       */
      while (out == sp->tx_out && sp->host_inactive < sp->timeout)
   13070:	0001883a 	nop
   13074:	e0bff817 	ldw	r2,-32(fp)
   13078:	10800d17 	ldw	r2,52(r2)
   1307c:	e0ffff17 	ldw	r3,-4(fp)
   13080:	1880051e 	bne	r3,r2,13098 <altera_avalon_jtag_uart_write+0x1bc>
   13084:	e0bff817 	ldw	r2,-32(fp)
   13088:	10c00917 	ldw	r3,36(r2)
   1308c:	e0bff817 	ldw	r2,-32(fp)
   13090:	10800117 	ldw	r2,4(r2)
   13094:	18bff736 	bltu	r3,r2,13074 <altera_avalon_jtag_uart_write+0x198>
        ;
#endif /* __ucosii__ */

      if  (sp->host_inactive)
   13098:	e0bff817 	ldw	r2,-32(fp)
   1309c:	10800917 	ldw	r2,36(r2)
   130a0:	1000051e 	bne	r2,zero,130b8 <altera_avalon_jtag_uart_write+0x1dc>
         break;
    }
  }
  while (count > 0);
   130a4:	e0bff617 	ldw	r2,-40(fp)
   130a8:	00bfcf16 	blt	zero,r2,12fe8 <altera_avalon_jtag_uart_write+0x10c>
   130ac:	00000306 	br	130bc <altera_avalon_jtag_uart_write+0x1e0>
        break;
   130b0:	0001883a 	nop
   130b4:	00000106 	br	130bc <altera_avalon_jtag_uart_write+0x1e0>
         break;
   130b8:	0001883a 	nop
   * Now that access to the circular buffer is complete, release the write
   * semaphore so that other threads can access the buffer.
   */
  ALT_SEM_POST (sp->write_lock);

  if (ptr != start)
   130bc:	e0fff717 	ldw	r3,-36(fp)
   130c0:	e0bffd17 	ldw	r2,-12(fp)
   130c4:	18800426 	beq	r3,r2,130d8 <altera_avalon_jtag_uart_write+0x1fc>
    return ptr - start;
   130c8:	e0fff717 	ldw	r3,-36(fp)
   130cc:	e0bffd17 	ldw	r2,-12(fp)
   130d0:	1885c83a 	sub	r2,r3,r2
   130d4:	00000606 	br	130f0 <altera_avalon_jtag_uart_write+0x214>
  else if (flags & O_NONBLOCK)
   130d8:	e0bff517 	ldw	r2,-44(fp)
   130dc:	1090000c 	andi	r2,r2,16384
   130e0:	10000226 	beq	r2,zero,130ec <altera_avalon_jtag_uart_write+0x210>
    return -EWOULDBLOCK;
   130e4:	00bffd44 	movi	r2,-11
   130e8:	00000106 	br	130f0 <altera_avalon_jtag_uart_write+0x214>
    sp->tx_out = sp->tx_in = 0;
    return ptr - start + count;
  }
#endif
  else
    return -EIO; /* Host not connected */
   130ec:	00bffec4 	movi	r2,-5
}
   130f0:	e037883a 	mov	sp,fp
   130f4:	dfc00117 	ldw	ra,4(sp)
   130f8:	df000017 	ldw	fp,0(sp)
   130fc:	dec00204 	addi	sp,sp,8
   13100:	f800283a 	ret

00013104 <alt_avalon_timer_sc_irq>:
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
static void alt_avalon_timer_sc_irq (void* base)
#else
static void alt_avalon_timer_sc_irq (void* base, alt_u32 id)
#endif
{
   13104:	defff904 	addi	sp,sp,-28
   13108:	dfc00615 	stw	ra,24(sp)
   1310c:	df000515 	stw	fp,20(sp)
   13110:	df000504 	addi	fp,sp,20
   13114:	e13ffc15 	stw	r4,-16(fp)
   13118:	e17ffb15 	stw	r5,-20(fp)
  alt_irq_context cpu_sr;
  
  /* clear the interrupt */
  IOWR_ALTERA_AVALON_TIMER_STATUS (base, 0);
   1311c:	0007883a 	mov	r3,zero
   13120:	e0bffc17 	ldw	r2,-16(fp)
   13124:	10c00035 	stwio	r3,0(r2)
  /* 
   * Dummy read to ensure IRQ is negated before the ISR returns.
   * The control register is read because reading the status
   * register has side-effects per the register map documentation.
   */
  IORD_ALTERA_AVALON_TIMER_CONTROL (base);
   13128:	e0bffc17 	ldw	r2,-16(fp)
   1312c:	10800104 	addi	r2,r2,4
   13130:	10800037 	ldwio	r2,0(r2)
  NIOS2_READ_STATUS (context);
   13134:	0005303a 	rdctl	r2,status
   13138:	e0bffd15 	stw	r2,-12(fp)
  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   1313c:	e0fffd17 	ldw	r3,-12(fp)
   13140:	00bfff84 	movi	r2,-2
   13144:	1884703a 	and	r2,r3,r2
   13148:	1001703a 	wrctl	status,r2
  return context;
   1314c:	e0bffd17 	ldw	r2,-12(fp)

  /* 
   * Notify the system of a clock tick. disable interrupts 
   * during this time to safely support ISR preemption
   */
  cpu_sr = alt_irq_disable_all();
   13150:	e0bfff15 	stw	r2,-4(fp)
  alt_tick ();
   13154:	0013fc80 	call	13fc8 <alt_tick>
   13158:	e0bfff17 	ldw	r2,-4(fp)
   1315c:	e0bffe15 	stw	r2,-8(fp)
  NIOS2_WRITE_STATUS (context);
   13160:	e0bffe17 	ldw	r2,-8(fp)
   13164:	1001703a 	wrctl	status,r2
}
   13168:	0001883a 	nop
  alt_irq_enable_all(cpu_sr);
}
   1316c:	0001883a 	nop
   13170:	e037883a 	mov	sp,fp
   13174:	dfc00117 	ldw	ra,4(sp)
   13178:	df000017 	ldw	fp,0(sp)
   1317c:	dec00204 	addi	sp,sp,8
   13180:	f800283a 	ret

00013184 <alt_avalon_timer_sc_init>:
 * auto-generated alt_sys_init() function.
 */

void alt_avalon_timer_sc_init (void* base, alt_u32 irq_controller_id, 
                                alt_u32 irq, alt_u32 freq)
{
   13184:	defff904 	addi	sp,sp,-28
   13188:	dfc00615 	stw	ra,24(sp)
   1318c:	df000515 	stw	fp,20(sp)
   13190:	df000504 	addi	fp,sp,20
   13194:	e13ffe15 	stw	r4,-8(fp)
   13198:	e17ffd15 	stw	r5,-12(fp)
   1319c:	e1bffc15 	stw	r6,-16(fp)
   131a0:	e1fffb15 	stw	r7,-20(fp)
   131a4:	e0bffb17 	ldw	r2,-20(fp)
   131a8:	e0bfff15 	stw	r2,-4(fp)
 * in order to initialise the value of the clock frequency.
 */

static ALT_INLINE int ALT_ALWAYS_INLINE alt_sysclk_init (alt_u32 nticks)
{
  if (! _alt_tick_rate)
   131ac:	d0a6bf17 	ldw	r2,-25860(gp)
   131b0:	1000031e 	bne	r2,zero,131c0 <alt_avalon_timer_sc_init+0x3c>
  {
    _alt_tick_rate = nticks;
   131b4:	e0bfff17 	ldw	r2,-4(fp)
   131b8:	d0a6bf15 	stw	r2,-25860(gp)
    return 0;
   131bc:	00000106 	br	131c4 <alt_avalon_timer_sc_init+0x40>
  }
  else
  {
    return -1;
   131c0:	0001883a 	nop
  
  alt_sysclk_init (freq);
  
  /* set to free running mode */
  
  IOWR_ALTERA_AVALON_TIMER_CONTROL (base, 
   131c4:	e0bffe17 	ldw	r2,-8(fp)
   131c8:	10800104 	addi	r2,r2,4
   131cc:	00c001c4 	movi	r3,7
   131d0:	10c00035 	stwio	r3,0(r2)
  /* register the interrupt handler, and enable the interrupt */
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
  alt_ic_isr_register(irq_controller_id, irq, alt_avalon_timer_sc_irq, 
                      base, NULL);
#else
  alt_irq_register (irq, base, alt_avalon_timer_sc_irq);
   131d4:	01800074 	movhi	r6,1
   131d8:	318c4104 	addi	r6,r6,12548
   131dc:	e17ffe17 	ldw	r5,-8(fp)
   131e0:	e13ffc17 	ldw	r4,-16(fp)
   131e4:	0011f640 	call	11f64 <alt_irq_register>
#endif  
}
   131e8:	0001883a 	nop
   131ec:	e037883a 	mov	sp,fp
   131f0:	dfc00117 	ldw	ra,4(sp)
   131f4:	df000017 	ldw	fp,0(sp)
   131f8:	dec00204 	addi	sp,sp,8
   131fc:	f800283a 	ret

00013200 <alt_up_accelerometer_spi_open_dev>:

#include "altera_up_avalon_accelerometer_spi.h"
#include "altera_up_avalon_accelerometer_spi_regs.h"

alt_up_accelerometer_spi_dev* alt_up_accelerometer_spi_open_dev(const char* name)
{
   13200:	defffc04 	addi	sp,sp,-16
   13204:	dfc00315 	stw	ra,12(sp)
   13208:	df000215 	stw	fp,8(sp)
   1320c:	df000204 	addi	fp,sp,8
   13210:	e13ffe15 	stw	r4,-8(fp)
  // find the device from the device list 
  // (see altera_hal/HAL/inc/priv/alt_file.h 
  // and altera_hal/HAL/src/alt_find_dev.c 
  // for details)
  alt_up_accelerometer_spi_dev *dev = (alt_up_accelerometer_spi_dev*)alt_find_dev(name, &alt_dev_list);
   13214:	d1600804 	addi	r5,gp,-32736
   13218:	e13ffe17 	ldw	r4,-8(fp)
   1321c:	0013a3c0 	call	13a3c <alt_find_dev>
   13220:	e0bfff15 	stw	r2,-4(fp)

  return dev;
   13224:	e0bfff17 	ldw	r2,-4(fp)
}
   13228:	e037883a 	mov	sp,fp
   1322c:	dfc00117 	ldw	ra,4(sp)
   13230:	df000017 	ldw	fp,0(sp)
   13234:	dec00204 	addi	sp,sp,8
   13238:	f800283a 	ret

0001323c <alt_up_accelerometer_spi_read_address_register>:
 * @param addr -- a pointer to the location where the read address should be stored
 *
 * @return 0 for success 
 **/
int alt_up_accelerometer_spi_read_address_register(alt_up_accelerometer_spi_dev *accel_spi, alt_u8 *addr)
{
   1323c:	defffd04 	addi	sp,sp,-12
   13240:	df000215 	stw	fp,8(sp)
   13244:	df000204 	addi	fp,sp,8
   13248:	e13fff15 	stw	r4,-4(fp)
   1324c:	e17ffe15 	stw	r5,-8(fp)
	// reads data from the device Address register
	*(addr) = IORD_ALT_UP_ACCELEROMETER_SPI_ADDRESS(accel_spi->base); 
   13250:	e0bfff17 	ldw	r2,-4(fp)
   13254:	10800a17 	ldw	r2,40(r2)
   13258:	10800023 	ldbuio	r2,0(r2)
   1325c:	10803fcc 	andi	r2,r2,255
   13260:	1007883a 	mov	r3,r2
   13264:	e0bffe17 	ldw	r2,-8(fp)
   13268:	10c00005 	stb	r3,0(r2)

	return 0;
   1326c:	0005883a 	mov	r2,zero
}
   13270:	e037883a 	mov	sp,fp
   13274:	df000017 	ldw	fp,0(sp)
   13278:	dec00104 	addi	sp,sp,4
   1327c:	f800283a 	ret

00013280 <alt_up_accelerometer_spi_read>:
 * @param data -- a pointer to the location where the read data should be stored
 *
 * @return 0 for success
 **/
int alt_up_accelerometer_spi_read(alt_up_accelerometer_spi_dev *accel_spi, alt_u8 addr, alt_u8 *data)
{
   13280:	defffc04 	addi	sp,sp,-16
   13284:	df000315 	stw	fp,12(sp)
   13288:	df000304 	addi	fp,sp,12
   1328c:	e13fff15 	stw	r4,-4(fp)
   13290:	2805883a 	mov	r2,r5
   13294:	e1bffd15 	stw	r6,-12(fp)
   13298:	e0bffe05 	stb	r2,-8(fp)
	// set the register address in the Address register
	IOWR_ALT_UP_ACCELEROMETER_SPI_ADDRESS(accel_spi->base, addr & ALT_UP_ACCELEROMETER_SPI_ADDRESS_ADDR_MSK); 
   1329c:	e0bfff17 	ldw	r2,-4(fp)
   132a0:	10800a17 	ldw	r2,40(r2)
   132a4:	1007883a 	mov	r3,r2
   132a8:	e0bffe03 	ldbu	r2,-8(fp)
   132ac:	10800fcc 	andi	r2,r2,63
   132b0:	18800025 	stbio	r2,0(r3)

	// read data to the device Data register
	*(data) = IORD_ALT_UP_ACCELEROMETER_SPI_DATA(accel_spi->base) & ALT_UP_ACCELEROMETER_SPI_DATA_DATA_MSK;
   132b4:	e0bfff17 	ldw	r2,-4(fp)
   132b8:	10800a17 	ldw	r2,40(r2)
   132bc:	10800044 	addi	r2,r2,1
   132c0:	10800023 	ldbuio	r2,0(r2)
   132c4:	10803fcc 	andi	r2,r2,255
   132c8:	1007883a 	mov	r3,r2
   132cc:	e0bffd17 	ldw	r2,-12(fp)
   132d0:	10c00005 	stb	r3,0(r2)

	return 0;
   132d4:	0005883a 	mov	r2,zero
}
   132d8:	e037883a 	mov	sp,fp
   132dc:	df000017 	ldw	fp,0(sp)
   132e0:	dec00104 	addi	sp,sp,4
   132e4:	f800283a 	ret

000132e8 <alt_up_accelerometer_spi_write>:
 * @param data -- the data to be written
 *
 * @return 0 for success
 **/
int alt_up_accelerometer_spi_write(alt_up_accelerometer_spi_dev *accel_spi, alt_u8 addr, alt_u8 data)
{
   132e8:	defffc04 	addi	sp,sp,-16
   132ec:	df000315 	stw	fp,12(sp)
   132f0:	df000304 	addi	fp,sp,12
   132f4:	e13fff15 	stw	r4,-4(fp)
   132f8:	2805883a 	mov	r2,r5
   132fc:	3007883a 	mov	r3,r6
   13300:	e0bffe05 	stb	r2,-8(fp)
   13304:	1805883a 	mov	r2,r3
   13308:	e0bffd05 	stb	r2,-12(fp)
	// set the register address in the Address register
	IOWR_ALT_UP_ACCELEROMETER_SPI_ADDRESS(accel_spi->base, addr & ALT_UP_ACCELEROMETER_SPI_ADDRESS_ADDR_MSK); 
   1330c:	e0bfff17 	ldw	r2,-4(fp)
   13310:	10800a17 	ldw	r2,40(r2)
   13314:	1007883a 	mov	r3,r2
   13318:	e0bffe03 	ldbu	r2,-8(fp)
   1331c:	10800fcc 	andi	r2,r2,63
   13320:	18800025 	stbio	r2,0(r3)

	// write data to the device Data register
	IOWR_ALT_UP_ACCELEROMETER_SPI_DATA(accel_spi->base, data & ALT_UP_ACCELEROMETER_SPI_DATA_DATA_MSK); 
   13324:	e0bfff17 	ldw	r2,-4(fp)
   13328:	10800a17 	ldw	r2,40(r2)
   1332c:	10800044 	addi	r2,r2,1
   13330:	1007883a 	mov	r3,r2
   13334:	e0bffd03 	ldbu	r2,-12(fp)
   13338:	18800025 	stbio	r2,0(r3)

	return 0;
   1333c:	0005883a 	mov	r2,zero
}
   13340:	e037883a 	mov	sp,fp
   13344:	df000017 	ldw	fp,0(sp)
   13348:	dec00104 	addi	sp,sp,4
   1334c:	f800283a 	ret

00013350 <alt_up_accelerometer_spi_read_x_axis>:
 * @param x_axis -- a pointer to the location where the x axis data should be stored
 *
 * @return 0 for success or -1 for failure
 **/
int alt_up_accelerometer_spi_read_x_axis(alt_up_accelerometer_spi_dev *accel_spi, alt_32 *x_axis)
{
   13350:	defffd04 	addi	sp,sp,-12
   13354:	df000215 	stw	fp,8(sp)
   13358:	df000204 	addi	fp,sp,8
   1335c:	e13fff15 	stw	r4,-4(fp)
   13360:	e17ffe15 	stw	r5,-8(fp)
	// set the register address in the Address register
	IOWR_ALT_UP_ACCELEROMETER_SPI_ADDRESS(accel_spi->base, ACCELEROMETER_SPI_X_AXIS_LOWER_BYTE & ALT_UP_ACCELEROMETER_SPI_ADDRESS_ADDR_MSK); 
   13364:	e0bfff17 	ldw	r2,-4(fp)
   13368:	10800a17 	ldw	r2,40(r2)
   1336c:	1007883a 	mov	r3,r2
   13370:	00800c84 	movi	r2,50
   13374:	18800025 	stbio	r2,0(r3)

	// read data to the device Data register
	*(x_axis) = IORD_ALT_UP_ACCELEROMETER_SPI_DATA(accel_spi->base) & ALT_UP_ACCELEROMETER_SPI_DATA_DATA_MSK;
   13378:	e0bfff17 	ldw	r2,-4(fp)
   1337c:	10800a17 	ldw	r2,40(r2)
   13380:	10800044 	addi	r2,r2,1
   13384:	10800023 	ldbuio	r2,0(r2)
   13388:	10803fcc 	andi	r2,r2,255
   1338c:	10ffffcc 	andi	r3,r2,65535
   13390:	e0bffe17 	ldw	r2,-8(fp)
   13394:	10c00015 	stw	r3,0(r2)

	// set the register address in the Address register
	IOWR_ALT_UP_ACCELEROMETER_SPI_ADDRESS(accel_spi->base, ACCELEROMETER_SPI_X_AXIS_UPPER_BYTE & ALT_UP_ACCELEROMETER_SPI_ADDRESS_ADDR_MSK); 
   13398:	e0bfff17 	ldw	r2,-4(fp)
   1339c:	10800a17 	ldw	r2,40(r2)
   133a0:	1007883a 	mov	r3,r2
   133a4:	00800cc4 	movi	r2,51
   133a8:	18800025 	stbio	r2,0(r3)

	// read data to the device Data register
	*(x_axis) += (IORD_ALT_UP_ACCELEROMETER_SPI_DATA(accel_spi->base) & ALT_UP_ACCELEROMETER_SPI_DATA_DATA_MSK) << 8;
   133ac:	e0bfff17 	ldw	r2,-4(fp)
   133b0:	10800a17 	ldw	r2,40(r2)
   133b4:	10800044 	addi	r2,r2,1
   133b8:	10800023 	ldbuio	r2,0(r2)
   133bc:	10803fcc 	andi	r2,r2,255
   133c0:	1006923a 	slli	r3,r2,8
   133c4:	00804034 	movhi	r2,256
   133c8:	10bfc004 	addi	r2,r2,-256
   133cc:	1884703a 	and	r2,r3,r2
   133d0:	e0fffe17 	ldw	r3,-8(fp)
   133d4:	18c00017 	ldw	r3,0(r3)
   133d8:	10c5883a 	add	r2,r2,r3
   133dc:	1007883a 	mov	r3,r2
   133e0:	e0bffe17 	ldw	r2,-8(fp)
   133e4:	10c00015 	stw	r3,0(r2)

	if (*(x_axis) & 0x00008000)
   133e8:	e0bffe17 	ldw	r2,-8(fp)
   133ec:	10800017 	ldw	r2,0(r2)
   133f0:	10a0000c 	andi	r2,r2,32768
   133f4:	10000626 	beq	r2,zero,13410 <alt_up_accelerometer_spi_read_x_axis+0xc0>
	{
		*(x_axis) |= 0xFFFF0000;
   133f8:	e0bffe17 	ldw	r2,-8(fp)
   133fc:	10800017 	ldw	r2,0(r2)
   13400:	10bffff4 	orhi	r2,r2,65535
   13404:	1007883a 	mov	r3,r2
   13408:	e0bffe17 	ldw	r2,-8(fp)
   1340c:	10c00015 	stw	r3,0(r2)
	}

	return 0;
   13410:	0005883a 	mov	r2,zero
}
   13414:	e037883a 	mov	sp,fp
   13418:	df000017 	ldw	fp,0(sp)
   1341c:	dec00104 	addi	sp,sp,4
   13420:	f800283a 	ret

00013424 <alt_up_accelerometer_spi_read_y_axis>:
 * @param y_axis -- a pointer to the location where the y axis data should be stored
 *
 * @return 0 for success or -1 for failure
 **/
int alt_up_accelerometer_spi_read_y_axis(alt_up_accelerometer_spi_dev *accel_spi, alt_32 *y_axis)
{
   13424:	defffd04 	addi	sp,sp,-12
   13428:	df000215 	stw	fp,8(sp)
   1342c:	df000204 	addi	fp,sp,8
   13430:	e13fff15 	stw	r4,-4(fp)
   13434:	e17ffe15 	stw	r5,-8(fp)
	// set the register address in the Address register
	IOWR_ALT_UP_ACCELEROMETER_SPI_ADDRESS(accel_spi->base, ACCELEROMETER_SPI_Y_AXIS_LOWER_BYTE & ALT_UP_ACCELEROMETER_SPI_ADDRESS_ADDR_MSK); 
   13438:	e0bfff17 	ldw	r2,-4(fp)
   1343c:	10800a17 	ldw	r2,40(r2)
   13440:	1007883a 	mov	r3,r2
   13444:	00800d04 	movi	r2,52
   13448:	18800025 	stbio	r2,0(r3)

	// read data to the device Data register
	*(y_axis) = IORD_ALT_UP_ACCELEROMETER_SPI_DATA(accel_spi->base) & ALT_UP_ACCELEROMETER_SPI_DATA_DATA_MSK;
   1344c:	e0bfff17 	ldw	r2,-4(fp)
   13450:	10800a17 	ldw	r2,40(r2)
   13454:	10800044 	addi	r2,r2,1
   13458:	10800023 	ldbuio	r2,0(r2)
   1345c:	10803fcc 	andi	r2,r2,255
   13460:	10ffffcc 	andi	r3,r2,65535
   13464:	e0bffe17 	ldw	r2,-8(fp)
   13468:	10c00015 	stw	r3,0(r2)

	// set the register address in the Address register
	IOWR_ALT_UP_ACCELEROMETER_SPI_ADDRESS(accel_spi->base, ACCELEROMETER_SPI_Y_AXIS_UPPER_BYTE & ALT_UP_ACCELEROMETER_SPI_ADDRESS_ADDR_MSK); 
   1346c:	e0bfff17 	ldw	r2,-4(fp)
   13470:	10800a17 	ldw	r2,40(r2)
   13474:	1007883a 	mov	r3,r2
   13478:	00800d44 	movi	r2,53
   1347c:	18800025 	stbio	r2,0(r3)

	// read data to the device Data register
	*(y_axis) += (IORD_ALT_UP_ACCELEROMETER_SPI_DATA(accel_spi->base) & ALT_UP_ACCELEROMETER_SPI_DATA_DATA_MSK) << 8;
   13480:	e0bfff17 	ldw	r2,-4(fp)
   13484:	10800a17 	ldw	r2,40(r2)
   13488:	10800044 	addi	r2,r2,1
   1348c:	10800023 	ldbuio	r2,0(r2)
   13490:	10803fcc 	andi	r2,r2,255
   13494:	1006923a 	slli	r3,r2,8
   13498:	00804034 	movhi	r2,256
   1349c:	10bfc004 	addi	r2,r2,-256
   134a0:	1884703a 	and	r2,r3,r2
   134a4:	e0fffe17 	ldw	r3,-8(fp)
   134a8:	18c00017 	ldw	r3,0(r3)
   134ac:	10c5883a 	add	r2,r2,r3
   134b0:	1007883a 	mov	r3,r2
   134b4:	e0bffe17 	ldw	r2,-8(fp)
   134b8:	10c00015 	stw	r3,0(r2)

	if (*(y_axis) & 0x00008000)
   134bc:	e0bffe17 	ldw	r2,-8(fp)
   134c0:	10800017 	ldw	r2,0(r2)
   134c4:	10a0000c 	andi	r2,r2,32768
   134c8:	10000626 	beq	r2,zero,134e4 <alt_up_accelerometer_spi_read_y_axis+0xc0>
	{
		*(y_axis) |= 0xFFFF0000;
   134cc:	e0bffe17 	ldw	r2,-8(fp)
   134d0:	10800017 	ldw	r2,0(r2)
   134d4:	10bffff4 	orhi	r2,r2,65535
   134d8:	1007883a 	mov	r3,r2
   134dc:	e0bffe17 	ldw	r2,-8(fp)
   134e0:	10c00015 	stw	r3,0(r2)
	}

	return 0;
   134e4:	0005883a 	mov	r2,zero
}
   134e8:	e037883a 	mov	sp,fp
   134ec:	df000017 	ldw	fp,0(sp)
   134f0:	dec00104 	addi	sp,sp,4
   134f4:	f800283a 	ret

000134f8 <alt_up_accelerometer_spi_read_z_axis>:
 * @param z_axis -- a pointer to the location where the z axis data should be stored
 *
 * @return 0 for success or -1 for failure
 **/
int alt_up_accelerometer_spi_read_z_axis(alt_up_accelerometer_spi_dev *accel_spi, alt_32 *z_axis)
{
   134f8:	defffd04 	addi	sp,sp,-12
   134fc:	df000215 	stw	fp,8(sp)
   13500:	df000204 	addi	fp,sp,8
   13504:	e13fff15 	stw	r4,-4(fp)
   13508:	e17ffe15 	stw	r5,-8(fp)
	// set the register address in the Address register
	IOWR_ALT_UP_ACCELEROMETER_SPI_ADDRESS(accel_spi->base, ACCELEROMETER_SPI_Z_AXIS_LOWER_BYTE & ALT_UP_ACCELEROMETER_SPI_ADDRESS_ADDR_MSK); 
   1350c:	e0bfff17 	ldw	r2,-4(fp)
   13510:	10800a17 	ldw	r2,40(r2)
   13514:	1007883a 	mov	r3,r2
   13518:	00800d84 	movi	r2,54
   1351c:	18800025 	stbio	r2,0(r3)

	// read data to the device Data register
	*(z_axis) = IORD_ALT_UP_ACCELEROMETER_SPI_DATA(accel_spi->base) & ALT_UP_ACCELEROMETER_SPI_DATA_DATA_MSK;
   13520:	e0bfff17 	ldw	r2,-4(fp)
   13524:	10800a17 	ldw	r2,40(r2)
   13528:	10800044 	addi	r2,r2,1
   1352c:	10800023 	ldbuio	r2,0(r2)
   13530:	10803fcc 	andi	r2,r2,255
   13534:	10ffffcc 	andi	r3,r2,65535
   13538:	e0bffe17 	ldw	r2,-8(fp)
   1353c:	10c00015 	stw	r3,0(r2)

	// set the register address in the Address register
	IOWR_ALT_UP_ACCELEROMETER_SPI_ADDRESS(accel_spi->base, ACCELEROMETER_SPI_Z_AXIS_UPPER_BYTE & ALT_UP_ACCELEROMETER_SPI_ADDRESS_ADDR_MSK); 
   13540:	e0bfff17 	ldw	r2,-4(fp)
   13544:	10800a17 	ldw	r2,40(r2)
   13548:	1007883a 	mov	r3,r2
   1354c:	00800dc4 	movi	r2,55
   13550:	18800025 	stbio	r2,0(r3)

	// read data to the device Data register
	*(z_axis) += (IORD_ALT_UP_ACCELEROMETER_SPI_DATA(accel_spi->base) & ALT_UP_ACCELEROMETER_SPI_DATA_DATA_MSK) << 8;
   13554:	e0bfff17 	ldw	r2,-4(fp)
   13558:	10800a17 	ldw	r2,40(r2)
   1355c:	10800044 	addi	r2,r2,1
   13560:	10800023 	ldbuio	r2,0(r2)
   13564:	10803fcc 	andi	r2,r2,255
   13568:	1006923a 	slli	r3,r2,8
   1356c:	00804034 	movhi	r2,256
   13570:	10bfc004 	addi	r2,r2,-256
   13574:	1884703a 	and	r2,r3,r2
   13578:	e0fffe17 	ldw	r3,-8(fp)
   1357c:	18c00017 	ldw	r3,0(r3)
   13580:	10c5883a 	add	r2,r2,r3
   13584:	1007883a 	mov	r3,r2
   13588:	e0bffe17 	ldw	r2,-8(fp)
   1358c:	10c00015 	stw	r3,0(r2)

	if (*(z_axis) & 0x00008000)
   13590:	e0bffe17 	ldw	r2,-8(fp)
   13594:	10800017 	ldw	r2,0(r2)
   13598:	10a0000c 	andi	r2,r2,32768
   1359c:	10000626 	beq	r2,zero,135b8 <alt_up_accelerometer_spi_read_z_axis+0xc0>
	{
		*(z_axis) |= 0xFFFF0000;
   135a0:	e0bffe17 	ldw	r2,-8(fp)
   135a4:	10800017 	ldw	r2,0(r2)
   135a8:	10bffff4 	orhi	r2,r2,65535
   135ac:	1007883a 	mov	r3,r2
   135b0:	e0bffe17 	ldw	r2,-8(fp)
   135b4:	10c00015 	stw	r3,0(r2)
	}

	return 0;
   135b8:	0005883a 	mov	r2,zero
}
   135bc:	e037883a 	mov	sp,fp
   135c0:	df000017 	ldw	fp,0(sp)
   135c4:	dec00104 	addi	sp,sp,4
   135c8:	f800283a 	ret

000135cc <alt_alarm_start>:
 */ 

int alt_alarm_start (alt_alarm* alarm, alt_u32 nticks,
                     alt_u32 (*callback) (void* context),
                     void* context)
{
   135cc:	defff404 	addi	sp,sp,-48
   135d0:	df000b15 	stw	fp,44(sp)
   135d4:	df000b04 	addi	fp,sp,44
   135d8:	e13ff815 	stw	r4,-32(fp)
   135dc:	e17ff715 	stw	r5,-36(fp)
   135e0:	e1bff615 	stw	r6,-40(fp)
   135e4:	e1fff515 	stw	r7,-44(fp)
  alt_irq_context irq_context;
  alt_u64 current_nticks = 0;
   135e8:	e03ffe15 	stw	zero,-8(fp)
   135ec:	e03fff15 	stw	zero,-4(fp)
  return _alt_tick_rate;
   135f0:	d0a6bf17 	ldw	r2,-25860(gp)
  
  if (alt_ticks_per_second ())
   135f4:	10004826 	beq	r2,zero,13718 <alt_alarm_start+0x14c>
  {
    if (alarm)
   135f8:	e0bff817 	ldw	r2,-32(fp)
   135fc:	10004426 	beq	r2,zero,13710 <alt_alarm_start+0x144>
    {
      alarm->callback = callback;
   13600:	e0bff817 	ldw	r2,-32(fp)
   13604:	e0fff617 	ldw	r3,-40(fp)
   13608:	10c00415 	stw	r3,16(r2)
      alarm->context  = context;
   1360c:	e0bff817 	ldw	r2,-32(fp)
   13610:	e0fff517 	ldw	r3,-44(fp)
   13614:	10c00515 	stw	r3,20(r2)
  NIOS2_READ_STATUS (context);
   13618:	0005303a 	rdctl	r2,status
   1361c:	e0bff915 	stw	r2,-28(fp)
  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   13620:	e0fff917 	ldw	r3,-28(fp)
   13624:	00bfff84 	movi	r2,-2
   13628:	1884703a 	and	r2,r3,r2
   1362c:	1001703a 	wrctl	status,r2
  return context;
   13630:	e0bff917 	ldw	r2,-28(fp)
 
      irq_context = alt_irq_disable_all ();
   13634:	e0bffd15 	stw	r2,-12(fp)
 * alt_nticks() returns the elapsed number of system clock ticks since reset.
 */

static ALT_INLINE alt_u64 ALT_ALWAYS_INLINE alt_nticks (void)
{
  return _alt_nticks;
   13638:	d0a6c017 	ldw	r2,-25856(gp)
   1363c:	d0e6c117 	ldw	r3,-25852(gp)
      
      current_nticks = alt_nticks();
   13640:	e0bffe15 	stw	r2,-8(fp)
   13644:	e0ffff15 	stw	r3,-4(fp)
      
      alarm->time = (alt_u64)nticks + current_nticks + 1; 
   13648:	e0bff717 	ldw	r2,-36(fp)
   1364c:	1011883a 	mov	r8,r2
   13650:	0013883a 	mov	r9,zero
   13654:	e13ffe17 	ldw	r4,-8(fp)
   13658:	e17fff17 	ldw	r5,-4(fp)
   1365c:	4105883a 	add	r2,r8,r4
   13660:	120d803a 	cmpltu	r6,r2,r8
   13664:	4947883a 	add	r3,r9,r5
   13668:	30c9883a 	add	r4,r6,r3
   1366c:	2007883a 	mov	r3,r4
   13670:	1009883a 	mov	r4,r2
   13674:	180b883a 	mov	r5,r3
   13678:	01800044 	movi	r6,1
   1367c:	000f883a 	mov	r7,zero
   13680:	2185883a 	add	r2,r4,r6
   13684:	1111803a 	cmpltu	r8,r2,r4
   13688:	29c7883a 	add	r3,r5,r7
   1368c:	40c9883a 	add	r4,r8,r3
   13690:	2007883a 	mov	r3,r4
   13694:	1009883a 	mov	r4,r2
   13698:	180b883a 	mov	r5,r3
   1369c:	e0bff817 	ldw	r2,-32(fp)
   136a0:	11000215 	stw	r4,8(r2)
   136a4:	11400315 	stw	r5,12(r2)
          
      alt_llist_insert (&alt_alarm_list, &alarm->llist);
   136a8:	e0bff817 	ldw	r2,-32(fp)
   136ac:	d0e00c04 	addi	r3,gp,-32720
   136b0:	e0fffb15 	stw	r3,-20(fp)
   136b4:	e0bffa15 	stw	r2,-24(fp)
 */

static ALT_INLINE void ALT_ALWAYS_INLINE alt_llist_insert(alt_llist* list, 
                alt_llist* entry)
{
  entry->previous = list;
   136b8:	e0bffa17 	ldw	r2,-24(fp)
   136bc:	e0fffb17 	ldw	r3,-20(fp)
   136c0:	10c00115 	stw	r3,4(r2)
  entry->next     = list->next;
   136c4:	e0bffb17 	ldw	r2,-20(fp)
   136c8:	10c00017 	ldw	r3,0(r2)
   136cc:	e0bffa17 	ldw	r2,-24(fp)
   136d0:	10c00015 	stw	r3,0(r2)

  list->next->previous = entry;
   136d4:	e0bffb17 	ldw	r2,-20(fp)
   136d8:	10800017 	ldw	r2,0(r2)
   136dc:	e0fffa17 	ldw	r3,-24(fp)
   136e0:	10c00115 	stw	r3,4(r2)
  list->next           = entry;
   136e4:	e0bffb17 	ldw	r2,-20(fp)
   136e8:	e0fffa17 	ldw	r3,-24(fp)
   136ec:	10c00015 	stw	r3,0(r2)
}
   136f0:	0001883a 	nop
   136f4:	e0bffd17 	ldw	r2,-12(fp)
   136f8:	e0bffc15 	stw	r2,-16(fp)
  NIOS2_WRITE_STATUS (context);
   136fc:	e0bffc17 	ldw	r2,-16(fp)
   13700:	1001703a 	wrctl	status,r2
}
   13704:	0001883a 	nop
      alt_irq_enable_all (irq_context);

      return 0;
   13708:	0005883a 	mov	r2,zero
   1370c:	00000306 	br	1371c <alt_alarm_start+0x150>
    }
    else
    {
      return -EINVAL;
   13710:	00bffa84 	movi	r2,-22
   13714:	00000106 	br	1371c <alt_alarm_start+0x150>
    }
  }
  else
  {
    return -ENOTSUP;
   13718:	00bfde84 	movi	r2,-134
  }
}
   1371c:	e037883a 	mov	sp,fp
   13720:	df000017 	ldw	fp,0(sp)
   13724:	dec00104 	addi	sp,sp,4
   13728:	f800283a 	ret

0001372c <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
   1372c:	defffe04 	addi	sp,sp,-8
   13730:	dfc00115 	stw	ra,4(sp)
   13734:	df000015 	stw	fp,0(sp)
   13738:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
   1373c:	d0a00b17 	ldw	r2,-32724(gp)
   13740:	10000326 	beq	r2,zero,13750 <alt_get_errno+0x24>
   13744:	d0a00b17 	ldw	r2,-32724(gp)
   13748:	103ee83a 	callr	r2
   1374c:	00000106 	br	13754 <alt_get_errno+0x28>
   13750:	d0a6ba04 	addi	r2,gp,-25880
}
   13754:	e037883a 	mov	sp,fp
   13758:	dfc00117 	ldw	ra,4(sp)
   1375c:	df000017 	ldw	fp,0(sp)
   13760:	dec00204 	addi	sp,sp,8
   13764:	f800283a 	ret

00013768 <close>:
 *
 * ALT_CLOSE is mapped onto the close() system call in alt_syscall.h
 */
 
int ALT_CLOSE (int fildes)
{
   13768:	defffb04 	addi	sp,sp,-20
   1376c:	dfc00415 	stw	ra,16(sp)
   13770:	df000315 	stw	fp,12(sp)
   13774:	df000304 	addi	fp,sp,12
   13778:	e13ffd15 	stw	r4,-12(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (fildes < 0) ? NULL : &alt_fd_list[fildes];
   1377c:	e0bffd17 	ldw	r2,-12(fp)
   13780:	10000916 	blt	r2,zero,137a8 <close+0x40>
   13784:	e0fffd17 	ldw	r3,-12(fp)
   13788:	1805883a 	mov	r2,r3
   1378c:	1085883a 	add	r2,r2,r2
   13790:	10c5883a 	add	r2,r2,r3
   13794:	100490ba 	slli	r2,r2,2
   13798:	00c00074 	movhi	r3,1
   1379c:	18ded104 	addi	r3,r3,31556
   137a0:	10c5883a 	add	r2,r2,r3
   137a4:	00000106 	br	137ac <close+0x44>
   137a8:	0005883a 	mov	r2,zero
   137ac:	e0bfff15 	stw	r2,-4(fp)

  if (fd)
   137b0:	e0bfff17 	ldw	r2,-4(fp)
   137b4:	10001926 	beq	r2,zero,1381c <close+0xb4>
    /*
     * If the associated file system/device has a close function, call it so 
     * that any necessary cleanup code can run.
     */

    rval = (fd->dev->close) ? fd->dev->close(fd) : 0;
   137b8:	e0bfff17 	ldw	r2,-4(fp)
   137bc:	10800017 	ldw	r2,0(r2)
   137c0:	10800417 	ldw	r2,16(r2)
   137c4:	10000626 	beq	r2,zero,137e0 <close+0x78>
   137c8:	e0bfff17 	ldw	r2,-4(fp)
   137cc:	10800017 	ldw	r2,0(r2)
   137d0:	10800417 	ldw	r2,16(r2)
   137d4:	e13fff17 	ldw	r4,-4(fp)
   137d8:	103ee83a 	callr	r2
   137dc:	00000106 	br	137e4 <close+0x7c>
   137e0:	0005883a 	mov	r2,zero
   137e4:	e0bffe15 	stw	r2,-8(fp)

    /* Free the file descriptor structure and return. */

    alt_release_fd (fildes);
   137e8:	e13ffd17 	ldw	r4,-12(fp)
   137ec:	0013eb40 	call	13eb4 <alt_release_fd>
    if (rval < 0)
   137f0:	e0bffe17 	ldw	r2,-8(fp)
   137f4:	1000070e 	bge	r2,zero,13814 <close+0xac>
    {
      ALT_ERRNO = -rval;
   137f8:	001372c0 	call	1372c <alt_get_errno>
   137fc:	1007883a 	mov	r3,r2
   13800:	e0bffe17 	ldw	r2,-8(fp)
   13804:	0085c83a 	sub	r2,zero,r2
   13808:	18800015 	stw	r2,0(r3)
      return -1;
   1380c:	00bfffc4 	movi	r2,-1
   13810:	00000706 	br	13830 <close+0xc8>
    }
    return 0;
   13814:	0005883a 	mov	r2,zero
   13818:	00000506 	br	13830 <close+0xc8>
  }
  else
  {
    ALT_ERRNO = EBADFD;
   1381c:	001372c0 	call	1372c <alt_get_errno>
   13820:	1007883a 	mov	r3,r2
   13824:	00801444 	movi	r2,81
   13828:	18800015 	stw	r2,0(r3)
    return -1;
   1382c:	00bfffc4 	movi	r2,-1
  }
}
   13830:	e037883a 	mov	sp,fp
   13834:	dfc00117 	ldw	ra,4(sp)
   13838:	df000017 	ldw	fp,0(sp)
   1383c:	dec00204 	addi	sp,sp,8
   13840:	f800283a 	ret

00013844 <alt_dcache_flush_all>:
/*
 * alt_dcache_flush_all() is called to flush the entire data cache.
 */

void alt_dcache_flush_all (void)
{
   13844:	deffff04 	addi	sp,sp,-4
   13848:	df000015 	stw	fp,0(sp)
   1384c:	d839883a 	mov	fp,sp
  for (i = (char*) 0; i < (char*) NIOS2_DCACHE_SIZE; i+= NIOS2_DCACHE_LINE_SIZE)
  { 
    __asm__ volatile ("flushd (%0)" :: "r" (i));
  }
#endif /* NIOS2_DCACHE_SIZE > 0 */
}
   13850:	0001883a 	nop
   13854:	e037883a 	mov	sp,fp
   13858:	df000017 	ldw	fp,0(sp)
   1385c:	dec00104 	addi	sp,sp,4
   13860:	f800283a 	ret

00013864 <alt_dev_null_write>:
 * by the alt_dev_null device. It simple discards all data passed to it, and
 * indicates that the data has been successfully transmitted.
 */

static int alt_dev_null_write (alt_fd* fd, const char* ptr, int len)
{
   13864:	defffc04 	addi	sp,sp,-16
   13868:	df000315 	stw	fp,12(sp)
   1386c:	df000304 	addi	fp,sp,12
   13870:	e13fff15 	stw	r4,-4(fp)
   13874:	e17ffe15 	stw	r5,-8(fp)
   13878:	e1bffd15 	stw	r6,-12(fp)
  return len;
   1387c:	e0bffd17 	ldw	r2,-12(fp)
}
   13880:	e037883a 	mov	sp,fp
   13884:	df000017 	ldw	fp,0(sp)
   13888:	dec00104 	addi	sp,sp,4
   1388c:	f800283a 	ret

00013890 <alt_get_errno>:
{
   13890:	defffe04 	addi	sp,sp,-8
   13894:	dfc00115 	stw	ra,4(sp)
   13898:	df000015 	stw	fp,0(sp)
   1389c:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
   138a0:	d0a00b17 	ldw	r2,-32724(gp)
   138a4:	10000326 	beq	r2,zero,138b4 <alt_get_errno+0x24>
   138a8:	d0a00b17 	ldw	r2,-32724(gp)
   138ac:	103ee83a 	callr	r2
   138b0:	00000106 	br	138b8 <alt_get_errno+0x28>
   138b4:	d0a6ba04 	addi	r2,gp,-25880
}
   138b8:	e037883a 	mov	sp,fp
   138bc:	dfc00117 	ldw	ra,4(sp)
   138c0:	df000017 	ldw	fp,0(sp)
   138c4:	dec00204 	addi	sp,sp,8
   138c8:	f800283a 	ret

000138cc <alt_dev_llist_insert>:
/*
 *
 */

int alt_dev_llist_insert (alt_dev_llist* dev, alt_llist* list)
{
   138cc:	defffa04 	addi	sp,sp,-24
   138d0:	dfc00515 	stw	ra,20(sp)
   138d4:	df000415 	stw	fp,16(sp)
   138d8:	df000404 	addi	fp,sp,16
   138dc:	e13ffd15 	stw	r4,-12(fp)
   138e0:	e17ffc15 	stw	r5,-16(fp)
  /*
   * check that the device exists, and that it has a valid name.
   */

  if (!dev || !dev->name)
   138e4:	e0bffd17 	ldw	r2,-12(fp)
   138e8:	10000326 	beq	r2,zero,138f8 <alt_dev_llist_insert+0x2c>
   138ec:	e0bffd17 	ldw	r2,-12(fp)
   138f0:	10800217 	ldw	r2,8(r2)
   138f4:	1000061e 	bne	r2,zero,13910 <alt_dev_llist_insert+0x44>
  {
    ALT_ERRNO = EINVAL;
   138f8:	00138900 	call	13890 <alt_get_errno>
   138fc:	1007883a 	mov	r3,r2
   13900:	00800584 	movi	r2,22
   13904:	18800015 	stw	r2,0(r3)
    return -EINVAL;
   13908:	00bffa84 	movi	r2,-22
   1390c:	00001406 	br	13960 <alt_dev_llist_insert+0x94>
  
  /*
   * register the device.
   */
  
  alt_llist_insert(list, &dev->llist);
   13910:	e0bffd17 	ldw	r2,-12(fp)
   13914:	e0fffc17 	ldw	r3,-16(fp)
   13918:	e0ffff15 	stw	r3,-4(fp)
   1391c:	e0bffe15 	stw	r2,-8(fp)
  entry->previous = list;
   13920:	e0bffe17 	ldw	r2,-8(fp)
   13924:	e0ffff17 	ldw	r3,-4(fp)
   13928:	10c00115 	stw	r3,4(r2)
  entry->next     = list->next;
   1392c:	e0bfff17 	ldw	r2,-4(fp)
   13930:	10c00017 	ldw	r3,0(r2)
   13934:	e0bffe17 	ldw	r2,-8(fp)
   13938:	10c00015 	stw	r3,0(r2)
  list->next->previous = entry;
   1393c:	e0bfff17 	ldw	r2,-4(fp)
   13940:	10800017 	ldw	r2,0(r2)
   13944:	e0fffe17 	ldw	r3,-8(fp)
   13948:	10c00115 	stw	r3,4(r2)
  list->next           = entry;
   1394c:	e0bfff17 	ldw	r2,-4(fp)
   13950:	e0fffe17 	ldw	r3,-8(fp)
   13954:	10c00015 	stw	r3,0(r2)
}
   13958:	0001883a 	nop

  return 0;  
   1395c:	0005883a 	mov	r2,zero
}
   13960:	e037883a 	mov	sp,fp
   13964:	dfc00117 	ldw	ra,4(sp)
   13968:	df000017 	ldw	fp,0(sp)
   1396c:	dec00204 	addi	sp,sp,8
   13970:	f800283a 	ret

00013974 <_do_ctors>:
/*
 * Run the C++ static constructors.
 */

void _do_ctors(void)
{
   13974:	defffd04 	addi	sp,sp,-12
   13978:	dfc00215 	stw	ra,8(sp)
   1397c:	df000115 	stw	fp,4(sp)
   13980:	df000104 	addi	fp,sp,4
  constructor* ctor;

  for (ctor = &__CTOR_END__[-1]; ctor >= __CTOR_LIST__; ctor--)
   13984:	00800074 	movhi	r2,1
   13988:	10980c04 	addi	r2,r2,24624
   1398c:	e0bfff15 	stw	r2,-4(fp)
   13990:	00000606 	br	139ac <_do_ctors+0x38>
        (*ctor) (); 
   13994:	e0bfff17 	ldw	r2,-4(fp)
   13998:	10800017 	ldw	r2,0(r2)
   1399c:	103ee83a 	callr	r2
  for (ctor = &__CTOR_END__[-1]; ctor >= __CTOR_LIST__; ctor--)
   139a0:	e0bfff17 	ldw	r2,-4(fp)
   139a4:	10bfff04 	addi	r2,r2,-4
   139a8:	e0bfff15 	stw	r2,-4(fp)
   139ac:	e0ffff17 	ldw	r3,-4(fp)
   139b0:	00800074 	movhi	r2,1
   139b4:	10980d04 	addi	r2,r2,24628
   139b8:	18bff62e 	bgeu	r3,r2,13994 <_do_ctors+0x20>
}
   139bc:	0001883a 	nop
   139c0:	0001883a 	nop
   139c4:	e037883a 	mov	sp,fp
   139c8:	dfc00117 	ldw	ra,4(sp)
   139cc:	df000017 	ldw	fp,0(sp)
   139d0:	dec00204 	addi	sp,sp,8
   139d4:	f800283a 	ret

000139d8 <_do_dtors>:
/*
 * Run the C++ static destructors.
 */

void _do_dtors(void)
{
   139d8:	defffd04 	addi	sp,sp,-12
   139dc:	dfc00215 	stw	ra,8(sp)
   139e0:	df000115 	stw	fp,4(sp)
   139e4:	df000104 	addi	fp,sp,4
  destructor* dtor;

  for (dtor = &__DTOR_END__[-1]; dtor >= __DTOR_LIST__; dtor--)
   139e8:	00800074 	movhi	r2,1
   139ec:	10980c04 	addi	r2,r2,24624
   139f0:	e0bfff15 	stw	r2,-4(fp)
   139f4:	00000606 	br	13a10 <_do_dtors+0x38>
        (*dtor) (); 
   139f8:	e0bfff17 	ldw	r2,-4(fp)
   139fc:	10800017 	ldw	r2,0(r2)
   13a00:	103ee83a 	callr	r2
  for (dtor = &__DTOR_END__[-1]; dtor >= __DTOR_LIST__; dtor--)
   13a04:	e0bfff17 	ldw	r2,-4(fp)
   13a08:	10bfff04 	addi	r2,r2,-4
   13a0c:	e0bfff15 	stw	r2,-4(fp)
   13a10:	e0ffff17 	ldw	r3,-4(fp)
   13a14:	00800074 	movhi	r2,1
   13a18:	10980d04 	addi	r2,r2,24628
   13a1c:	18bff62e 	bgeu	r3,r2,139f8 <_do_dtors+0x20>
}
   13a20:	0001883a 	nop
   13a24:	0001883a 	nop
   13a28:	e037883a 	mov	sp,fp
   13a2c:	dfc00117 	ldw	ra,4(sp)
   13a30:	df000017 	ldw	fp,0(sp)
   13a34:	dec00204 	addi	sp,sp,8
   13a38:	f800283a 	ret

00013a3c <alt_find_dev>:
 * "name" must be an exact match for the devices registered name for a match to
 * be found.
 */
 
alt_dev* alt_find_dev(const char* name, alt_llist* llist)
{
   13a3c:	defffa04 	addi	sp,sp,-24
   13a40:	dfc00515 	stw	ra,20(sp)
   13a44:	df000415 	stw	fp,16(sp)
   13a48:	df000404 	addi	fp,sp,16
   13a4c:	e13ffd15 	stw	r4,-12(fp)
   13a50:	e17ffc15 	stw	r5,-16(fp)
  alt_dev* next = (alt_dev*) llist->next;
   13a54:	e0bffc17 	ldw	r2,-16(fp)
   13a58:	10800017 	ldw	r2,0(r2)
   13a5c:	e0bfff15 	stw	r2,-4(fp)
  alt_32 len;

  len  = strlen(name) + 1;
   13a60:	e13ffd17 	ldw	r4,-12(fp)
   13a64:	001442c0 	call	1442c <strlen>
   13a68:	10800044 	addi	r2,r2,1
   13a6c:	e0bffe15 	stw	r2,-8(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 

  while (next != (alt_dev*) llist)
   13a70:	00000d06 	br	13aa8 <alt_find_dev+0x6c>
    /* 
     * memcmp() is used here rather than strcmp() in order to reduce the size
     * of the executable.
     */

    if (!memcmp (next->name, name, len))
   13a74:	e0bfff17 	ldw	r2,-4(fp)
   13a78:	10800217 	ldw	r2,8(r2)
   13a7c:	e0fffe17 	ldw	r3,-8(fp)
   13a80:	180d883a 	mov	r6,r3
   13a84:	e17ffd17 	ldw	r5,-12(fp)
   13a88:	1009883a 	mov	r4,r2
   13a8c:	00143940 	call	14394 <memcmp>
   13a90:	1000021e 	bne	r2,zero,13a9c <alt_find_dev+0x60>
    {
      /* match found */

      return next;
   13a94:	e0bfff17 	ldw	r2,-4(fp)
   13a98:	00000706 	br	13ab8 <alt_find_dev+0x7c>
    }
    next = (alt_dev*) next->llist.next;
   13a9c:	e0bfff17 	ldw	r2,-4(fp)
   13aa0:	10800017 	ldw	r2,0(r2)
   13aa4:	e0bfff15 	stw	r2,-4(fp)
  while (next != (alt_dev*) llist)
   13aa8:	e0ffff17 	ldw	r3,-4(fp)
   13aac:	e0bffc17 	ldw	r2,-16(fp)
   13ab0:	18bff01e 	bne	r3,r2,13a74 <alt_find_dev+0x38>
  }
  
  /* No match found */
  
  return NULL;
   13ab4:	0005883a 	mov	r2,zero
}
   13ab8:	e037883a 	mov	sp,fp
   13abc:	dfc00117 	ldw	ra,4(sp)
   13ac0:	df000017 	ldw	fp,0(sp)
   13ac4:	dec00204 	addi	sp,sp,8
   13ac8:	f800283a 	ret

00013acc <alt_icache_flush_all>:
/*
 * alt_icache_flush_all() is called to flush the entire instruction cache.
 */

void alt_icache_flush_all (void)
{
   13acc:	deffff04 	addi	sp,sp,-4
   13ad0:	df000015 	stw	fp,0(sp)
   13ad4:	d839883a 	mov	fp,sp
#if NIOS2_ICACHE_SIZE > 0
  alt_icache_flush (0, NIOS2_ICACHE_SIZE);
#endif
}
   13ad8:	0001883a 	nop
   13adc:	e037883a 	mov	sp,fp
   13ae0:	df000017 	ldw	fp,0(sp)
   13ae4:	dec00104 	addi	sp,sp,4
   13ae8:	f800283a 	ret

00013aec <alt_open_fd>:
 * If the device can not be succesfully opened, then the input file descriptor
 * remains unchanged.
 */

static void alt_open_fd(alt_fd* fd, const char* name, int flags, int mode)
{
   13aec:	defff904 	addi	sp,sp,-28
   13af0:	dfc00615 	stw	ra,24(sp)
   13af4:	df000515 	stw	fp,20(sp)
   13af8:	df000504 	addi	fp,sp,20
   13afc:	e13ffe15 	stw	r4,-8(fp)
   13b00:	e17ffd15 	stw	r5,-12(fp)
   13b04:	e1bffc15 	stw	r6,-16(fp)
   13b08:	e1fffb15 	stw	r7,-20(fp)
  int old;

  old = open (name, flags, mode);
   13b0c:	e1bffb17 	ldw	r6,-20(fp)
   13b10:	e17ffc17 	ldw	r5,-16(fp)
   13b14:	e13ffd17 	ldw	r4,-12(fp)
   13b18:	0013d540 	call	13d54 <open>
   13b1c:	e0bfff15 	stw	r2,-4(fp)

  if (old >= 0)
   13b20:	e0bfff17 	ldw	r2,-4(fp)
   13b24:	10002016 	blt	r2,zero,13ba8 <alt_open_fd+0xbc>
  {
    fd->dev      = alt_fd_list[old].dev;
   13b28:	e0ffff17 	ldw	r3,-4(fp)
   13b2c:	1805883a 	mov	r2,r3
   13b30:	1085883a 	add	r2,r2,r2
   13b34:	10c5883a 	add	r2,r2,r3
   13b38:	100490ba 	slli	r2,r2,2
   13b3c:	00c00074 	movhi	r3,1
   13b40:	10c7883a 	add	r3,r2,r3
   13b44:	18ded117 	ldw	r3,31556(r3)
   13b48:	e0bffe17 	ldw	r2,-8(fp)
   13b4c:	10c00015 	stw	r3,0(r2)
    fd->priv     = alt_fd_list[old].priv;
   13b50:	e0ffff17 	ldw	r3,-4(fp)
   13b54:	1805883a 	mov	r2,r3
   13b58:	1085883a 	add	r2,r2,r2
   13b5c:	10c5883a 	add	r2,r2,r3
   13b60:	100490ba 	slli	r2,r2,2
   13b64:	00c00074 	movhi	r3,1
   13b68:	10c7883a 	add	r3,r2,r3
   13b6c:	18ded217 	ldw	r3,31560(r3)
   13b70:	e0bffe17 	ldw	r2,-8(fp)
   13b74:	10c00115 	stw	r3,4(r2)
    fd->fd_flags = alt_fd_list[old].fd_flags;
   13b78:	e0ffff17 	ldw	r3,-4(fp)
   13b7c:	1805883a 	mov	r2,r3
   13b80:	1085883a 	add	r2,r2,r2
   13b84:	10c5883a 	add	r2,r2,r3
   13b88:	100490ba 	slli	r2,r2,2
   13b8c:	00c00074 	movhi	r3,1
   13b90:	10c7883a 	add	r3,r2,r3
   13b94:	18ded317 	ldw	r3,31564(r3)
   13b98:	e0bffe17 	ldw	r2,-8(fp)
   13b9c:	10c00215 	stw	r3,8(r2)

    alt_release_fd (old);
   13ba0:	e13fff17 	ldw	r4,-4(fp)
   13ba4:	0013eb40 	call	13eb4 <alt_release_fd>
  }
} 
   13ba8:	0001883a 	nop
   13bac:	e037883a 	mov	sp,fp
   13bb0:	dfc00117 	ldw	ra,4(sp)
   13bb4:	df000017 	ldw	fp,0(sp)
   13bb8:	dec00204 	addi	sp,sp,8
   13bbc:	f800283a 	ret

00013bc0 <alt_io_redirect>:
 */
 
void alt_io_redirect(const char* stdout_dev, 
                     const char* stdin_dev, 
                     const char* stderr_dev)
{
   13bc0:	defffb04 	addi	sp,sp,-20
   13bc4:	dfc00415 	stw	ra,16(sp)
   13bc8:	df000315 	stw	fp,12(sp)
   13bcc:	df000304 	addi	fp,sp,12
   13bd0:	e13fff15 	stw	r4,-4(fp)
   13bd4:	e17ffe15 	stw	r5,-8(fp)
   13bd8:	e1bffd15 	stw	r6,-12(fp)
  /* Redirect the channels */

  alt_open_fd (&alt_fd_list[STDOUT_FILENO], stdout_dev, O_WRONLY, 0777);
   13bdc:	01c07fc4 	movi	r7,511
   13be0:	01800044 	movi	r6,1
   13be4:	e17fff17 	ldw	r5,-4(fp)
   13be8:	01000074 	movhi	r4,1
   13bec:	211ed404 	addi	r4,r4,31568
   13bf0:	0013aec0 	call	13aec <alt_open_fd>
  alt_open_fd (&alt_fd_list[STDIN_FILENO], stdin_dev, O_RDONLY, 0777);
   13bf4:	01c07fc4 	movi	r7,511
   13bf8:	000d883a 	mov	r6,zero
   13bfc:	e17ffe17 	ldw	r5,-8(fp)
   13c00:	01000074 	movhi	r4,1
   13c04:	211ed104 	addi	r4,r4,31556
   13c08:	0013aec0 	call	13aec <alt_open_fd>
  alt_open_fd (&alt_fd_list[STDERR_FILENO], stderr_dev, O_WRONLY, 0777);
   13c0c:	01c07fc4 	movi	r7,511
   13c10:	01800044 	movi	r6,1
   13c14:	e17ffd17 	ldw	r5,-12(fp)
   13c18:	01000074 	movhi	r4,1
   13c1c:	211ed704 	addi	r4,r4,31580
   13c20:	0013aec0 	call	13aec <alt_open_fd>
}  
   13c24:	0001883a 	nop
   13c28:	e037883a 	mov	sp,fp
   13c2c:	dfc00117 	ldw	ra,4(sp)
   13c30:	df000017 	ldw	fp,0(sp)
   13c34:	dec00204 	addi	sp,sp,8
   13c38:	f800283a 	ret

00013c3c <alt_get_errno>:
{
   13c3c:	defffe04 	addi	sp,sp,-8
   13c40:	dfc00115 	stw	ra,4(sp)
   13c44:	df000015 	stw	fp,0(sp)
   13c48:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
   13c4c:	d0a00b17 	ldw	r2,-32724(gp)
   13c50:	10000326 	beq	r2,zero,13c60 <alt_get_errno+0x24>
   13c54:	d0a00b17 	ldw	r2,-32724(gp)
   13c58:	103ee83a 	callr	r2
   13c5c:	00000106 	br	13c64 <alt_get_errno+0x28>
   13c60:	d0a6ba04 	addi	r2,gp,-25880
}
   13c64:	e037883a 	mov	sp,fp
   13c68:	dfc00117 	ldw	ra,4(sp)
   13c6c:	df000017 	ldw	fp,0(sp)
   13c70:	dec00204 	addi	sp,sp,8
   13c74:	f800283a 	ret

00013c78 <alt_file_locked>:
 * performed for devices. Filesystems are required to handle the ioctl() call
 * themselves, and report the error from the filesystems open() function. 
 */ 

static int alt_file_locked (alt_fd* fd)
{
   13c78:	defffd04 	addi	sp,sp,-12
   13c7c:	df000215 	stw	fp,8(sp)
   13c80:	df000204 	addi	fp,sp,8
   13c84:	e13ffe15 	stw	r4,-8(fp)

  /*
   * Mark the file descriptor as belonging to a device.
   */

  fd->fd_flags |= ALT_FD_DEV;
   13c88:	e0bffe17 	ldw	r2,-8(fp)
   13c8c:	10800217 	ldw	r2,8(r2)
   13c90:	10d00034 	orhi	r3,r2,16384
   13c94:	e0bffe17 	ldw	r2,-8(fp)
   13c98:	10c00215 	stw	r3,8(r2)
  /*
   * Loop through all current file descriptors searching for one that's locked
   * for exclusive access. If a match is found, generate an error.
   */

  for (i = 0; i <= alt_max_fd; i++)
   13c9c:	e03fff15 	stw	zero,-4(fp)
   13ca0:	00002306 	br	13d30 <alt_file_locked+0xb8>
  {
    if ((alt_fd_list[i].dev == fd->dev) &&
   13ca4:	e0ffff17 	ldw	r3,-4(fp)
   13ca8:	1805883a 	mov	r2,r3
   13cac:	1085883a 	add	r2,r2,r2
   13cb0:	10c5883a 	add	r2,r2,r3
   13cb4:	100490ba 	slli	r2,r2,2
   13cb8:	00c00074 	movhi	r3,1
   13cbc:	10c7883a 	add	r3,r2,r3
   13cc0:	18ded117 	ldw	r3,31556(r3)
   13cc4:	e0bffe17 	ldw	r2,-8(fp)
   13cc8:	10800017 	ldw	r2,0(r2)
   13ccc:	1880151e 	bne	r3,r2,13d24 <alt_file_locked+0xac>
        (alt_fd_list[i].fd_flags & ALT_FD_EXCL) &&
   13cd0:	e0ffff17 	ldw	r3,-4(fp)
   13cd4:	1805883a 	mov	r2,r3
   13cd8:	1085883a 	add	r2,r2,r2
   13cdc:	10c5883a 	add	r2,r2,r3
   13ce0:	100490ba 	slli	r2,r2,2
   13ce4:	00c00074 	movhi	r3,1
   13ce8:	10c7883a 	add	r3,r2,r3
   13cec:	189ed317 	ldw	r2,31564(r3)
    if ((alt_fd_list[i].dev == fd->dev) &&
   13cf0:	10000c0e 	bge	r2,zero,13d24 <alt_file_locked+0xac>
        (&alt_fd_list[i] != fd))
   13cf4:	e0ffff17 	ldw	r3,-4(fp)
   13cf8:	1805883a 	mov	r2,r3
   13cfc:	1085883a 	add	r2,r2,r2
   13d00:	10c5883a 	add	r2,r2,r3
   13d04:	100490ba 	slli	r2,r2,2
   13d08:	00c00074 	movhi	r3,1
   13d0c:	18ded104 	addi	r3,r3,31556
   13d10:	10c5883a 	add	r2,r2,r3
        (alt_fd_list[i].fd_flags & ALT_FD_EXCL) &&
   13d14:	e0fffe17 	ldw	r3,-8(fp)
   13d18:	18800226 	beq	r3,r2,13d24 <alt_file_locked+0xac>
    {
      return -EACCES;
   13d1c:	00bffcc4 	movi	r2,-13
   13d20:	00000806 	br	13d44 <alt_file_locked+0xcc>
  for (i = 0; i <= alt_max_fd; i++)
   13d24:	e0bfff17 	ldw	r2,-4(fp)
   13d28:	10800044 	addi	r2,r2,1
   13d2c:	e0bfff15 	stw	r2,-4(fp)
   13d30:	d0a00a17 	ldw	r2,-32728(gp)
   13d34:	1007883a 	mov	r3,r2
   13d38:	e0bfff17 	ldw	r2,-4(fp)
   13d3c:	18bfd92e 	bgeu	r3,r2,13ca4 <alt_file_locked+0x2c>
    }
  }
  
  /* The device is not locked */
 
  return 0;
   13d40:	0005883a 	mov	r2,zero
}
   13d44:	e037883a 	mov	sp,fp
   13d48:	df000017 	ldw	fp,0(sp)
   13d4c:	dec00104 	addi	sp,sp,4
   13d50:	f800283a 	ret

00013d54 <open>:
 *
 * ALT_OPEN is mapped onto the open() system call in alt_syscall.h
 */
 
int ALT_OPEN (const char* file, int flags, int mode)
{ 
   13d54:	defff604 	addi	sp,sp,-40
   13d58:	dfc00915 	stw	ra,36(sp)
   13d5c:	df000815 	stw	fp,32(sp)
   13d60:	df000804 	addi	fp,sp,32
   13d64:	e13ffa15 	stw	r4,-24(fp)
   13d68:	e17ff915 	stw	r5,-28(fp)
   13d6c:	e1bff815 	stw	r6,-32(fp)
  alt_dev* dev;
  alt_fd*  fd;
  int index  = -1;
   13d70:	00bfffc4 	movi	r2,-1
   13d74:	e0bffe15 	stw	r2,-8(fp)
  int status = -ENODEV;
   13d78:	00bffb44 	movi	r2,-19
   13d7c:	e0bffd15 	stw	r2,-12(fp)
  int isafs = 0;
   13d80:	e03ffc15 	stw	zero,-16(fp)
  /* 
   * Check the device list, to see if a device with a matching name is 
   * registered.
   */
  
  if (!(dev = alt_find_dev (file, &alt_dev_list)))
   13d84:	d1600804 	addi	r5,gp,-32736
   13d88:	e13ffa17 	ldw	r4,-24(fp)
   13d8c:	0013a3c0 	call	13a3c <alt_find_dev>
   13d90:	e0bfff15 	stw	r2,-4(fp)
   13d94:	e0bfff17 	ldw	r2,-4(fp)
   13d98:	1000051e 	bne	r2,zero,13db0 <open+0x5c>
  {
    /* No matching device, so try the filesystem list */

    dev   = alt_find_file (file);
   13d9c:	e13ffa17 	ldw	r4,-24(fp)
   13da0:	00141180 	call	14118 <alt_find_file>
   13da4:	e0bfff15 	stw	r2,-4(fp)
    isafs = 1;
   13da8:	00800044 	movi	r2,1
   13dac:	e0bffc15 	stw	r2,-16(fp)

  /* 
   * If a matching device or filesystem is found, allocate a file descriptor. 
   */

  if (dev)
   13db0:	e0bfff17 	ldw	r2,-4(fp)
   13db4:	10002c26 	beq	r2,zero,13e68 <open+0x114>
  {
    if ((index = alt_get_fd (dev)) < 0)
   13db8:	e13fff17 	ldw	r4,-4(fp)
   13dbc:	00142200 	call	14220 <alt_get_fd>
   13dc0:	e0bffe15 	stw	r2,-8(fp)
   13dc4:	e0bffe17 	ldw	r2,-8(fp)
   13dc8:	1000030e 	bge	r2,zero,13dd8 <open+0x84>
    {
      status = index;
   13dcc:	e0bffe17 	ldw	r2,-8(fp)
   13dd0:	e0bffd15 	stw	r2,-12(fp)
   13dd4:	00002606 	br	13e70 <open+0x11c>
    }
    else
    {
      fd = &alt_fd_list[index];
   13dd8:	e0fffe17 	ldw	r3,-8(fp)
   13ddc:	1805883a 	mov	r2,r3
   13de0:	1085883a 	add	r2,r2,r2
   13de4:	10c5883a 	add	r2,r2,r3
   13de8:	100490ba 	slli	r2,r2,2
   13dec:	00c00074 	movhi	r3,1
   13df0:	18ded104 	addi	r3,r3,31556
   13df4:	10c5883a 	add	r2,r2,r3
   13df8:	e0bffb15 	stw	r2,-20(fp)
      fd->fd_flags = (flags & ~ALT_FD_FLAGS_MASK);
   13dfc:	e0fff917 	ldw	r3,-28(fp)
   13e00:	00900034 	movhi	r2,16384
   13e04:	10bfffc4 	addi	r2,r2,-1
   13e08:	1886703a 	and	r3,r3,r2
   13e0c:	e0bffb17 	ldw	r2,-20(fp)
   13e10:	10c00215 	stw	r3,8(r2)
      
      /* If this is a device, ensure it isn't already locked */

      if (isafs || ((status = alt_file_locked (fd)) >= 0))
   13e14:	e0bffc17 	ldw	r2,-16(fp)
   13e18:	1000051e 	bne	r2,zero,13e30 <open+0xdc>
   13e1c:	e13ffb17 	ldw	r4,-20(fp)
   13e20:	0013c780 	call	13c78 <alt_file_locked>
   13e24:	e0bffd15 	stw	r2,-12(fp)
   13e28:	e0bffd17 	ldw	r2,-12(fp)
   13e2c:	10001016 	blt	r2,zero,13e70 <open+0x11c>
        /* 
         * If the device or filesystem provides an open() callback function,
         * call it now to perform any device/filesystem specific operations.
         */
    
        status = (dev->open) ? dev->open(fd, file, flags, mode): 0;
   13e30:	e0bfff17 	ldw	r2,-4(fp)
   13e34:	10800317 	ldw	r2,12(r2)
   13e38:	10000826 	beq	r2,zero,13e5c <open+0x108>
   13e3c:	e0bfff17 	ldw	r2,-4(fp)
   13e40:	10800317 	ldw	r2,12(r2)
   13e44:	e1fff817 	ldw	r7,-32(fp)
   13e48:	e1bff917 	ldw	r6,-28(fp)
   13e4c:	e17ffa17 	ldw	r5,-24(fp)
   13e50:	e13ffb17 	ldw	r4,-20(fp)
   13e54:	103ee83a 	callr	r2
   13e58:	00000106 	br	13e60 <open+0x10c>
   13e5c:	0005883a 	mov	r2,zero
   13e60:	e0bffd15 	stw	r2,-12(fp)
   13e64:	00000206 	br	13e70 <open+0x11c>
      }
    }
  }
  else
  {
    status = -ENODEV;
   13e68:	00bffb44 	movi	r2,-19
   13e6c:	e0bffd15 	stw	r2,-12(fp)
  }

  /* Allocation failed, so clean up and return an error */ 

  if (status < 0)
   13e70:	e0bffd17 	ldw	r2,-12(fp)
   13e74:	1000090e 	bge	r2,zero,13e9c <open+0x148>
  {
    alt_release_fd (index);  
   13e78:	e13ffe17 	ldw	r4,-8(fp)
   13e7c:	0013eb40 	call	13eb4 <alt_release_fd>
    ALT_ERRNO = -status;
   13e80:	0013c3c0 	call	13c3c <alt_get_errno>
   13e84:	1007883a 	mov	r3,r2
   13e88:	e0bffd17 	ldw	r2,-12(fp)
   13e8c:	0085c83a 	sub	r2,zero,r2
   13e90:	18800015 	stw	r2,0(r3)
    return -1;
   13e94:	00bfffc4 	movi	r2,-1
   13e98:	00000106 	br	13ea0 <open+0x14c>
  }
  
  /* return the reference upon success */

  return index;
   13e9c:	e0bffe17 	ldw	r2,-8(fp)
}
   13ea0:	e037883a 	mov	sp,fp
   13ea4:	dfc00117 	ldw	ra,4(sp)
   13ea8:	df000017 	ldw	fp,0(sp)
   13eac:	dec00204 	addi	sp,sp,8
   13eb0:	f800283a 	ret

00013eb4 <alt_release_fd>:
 * File descriptors correcponding to standard in, standard out and standard 
 * error cannont be released backed to the pool. They are always reserved.
 */

void alt_release_fd (int fd)
{
   13eb4:	defffe04 	addi	sp,sp,-8
   13eb8:	df000115 	stw	fp,4(sp)
   13ebc:	df000104 	addi	fp,sp,4
   13ec0:	e13fff15 	stw	r4,-4(fp)
  if (fd > 2)
   13ec4:	e0bfff17 	ldw	r2,-4(fp)
   13ec8:	108000d0 	cmplti	r2,r2,3
   13ecc:	1000101e 	bne	r2,zero,13f10 <alt_release_fd+0x5c>
  {
    alt_fd_list[fd].fd_flags = 0;
   13ed0:	e0ffff17 	ldw	r3,-4(fp)
   13ed4:	1805883a 	mov	r2,r3
   13ed8:	1085883a 	add	r2,r2,r2
   13edc:	10c5883a 	add	r2,r2,r3
   13ee0:	100490ba 	slli	r2,r2,2
   13ee4:	00c00074 	movhi	r3,1
   13ee8:	10c7883a 	add	r3,r2,r3
   13eec:	181ed315 	stw	zero,31564(r3)
    alt_fd_list[fd].dev      = 0;
   13ef0:	e0ffff17 	ldw	r3,-4(fp)
   13ef4:	1805883a 	mov	r2,r3
   13ef8:	1085883a 	add	r2,r2,r2
   13efc:	10c5883a 	add	r2,r2,r3
   13f00:	100490ba 	slli	r2,r2,2
   13f04:	00c00074 	movhi	r3,1
   13f08:	10c7883a 	add	r3,r2,r3
   13f0c:	181ed115 	stw	zero,31556(r3)
  }
}
   13f10:	0001883a 	nop
   13f14:	e037883a 	mov	sp,fp
   13f18:	df000017 	ldw	fp,0(sp)
   13f1c:	dec00104 	addi	sp,sp,4
   13f20:	f800283a 	ret

00013f24 <alt_alarm_stop>:
 * alarms. Alternatively an alarm can unregister itself by returning zero when 
 * the alarm executes.
 */

void alt_alarm_stop (alt_alarm* alarm)
{
   13f24:	defffa04 	addi	sp,sp,-24
   13f28:	df000515 	stw	fp,20(sp)
   13f2c:	df000504 	addi	fp,sp,20
   13f30:	e13ffb15 	stw	r4,-20(fp)
  NIOS2_READ_STATUS (context);
   13f34:	0005303a 	rdctl	r2,status
   13f38:	e0bffc15 	stw	r2,-16(fp)
  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   13f3c:	e0fffc17 	ldw	r3,-16(fp)
   13f40:	00bfff84 	movi	r2,-2
   13f44:	1884703a 	and	r2,r3,r2
   13f48:	1001703a 	wrctl	status,r2
  return context;
   13f4c:	e0bffc17 	ldw	r2,-16(fp)
  alt_irq_context irq_context;

  irq_context = alt_irq_disable_all();
   13f50:	e0bfff15 	stw	r2,-4(fp)
  alt_llist_remove (&alarm->llist);
   13f54:	e0bffb17 	ldw	r2,-20(fp)
   13f58:	e0bffd15 	stw	r2,-12(fp)
 * input argument is the element to remove.
 */
     
static ALT_INLINE void ALT_ALWAYS_INLINE alt_llist_remove(alt_llist* entry)
{
  entry->next->previous = entry->previous;
   13f5c:	e0bffd17 	ldw	r2,-12(fp)
   13f60:	10800017 	ldw	r2,0(r2)
   13f64:	e0fffd17 	ldw	r3,-12(fp)
   13f68:	18c00117 	ldw	r3,4(r3)
   13f6c:	10c00115 	stw	r3,4(r2)
  entry->previous->next = entry->next;
   13f70:	e0bffd17 	ldw	r2,-12(fp)
   13f74:	10800117 	ldw	r2,4(r2)
   13f78:	e0fffd17 	ldw	r3,-12(fp)
   13f7c:	18c00017 	ldw	r3,0(r3)
   13f80:	10c00015 	stw	r3,0(r2)
  /* 
   * Set the entry to point to itself, so that any further calls to
   * alt_llist_remove() are harmless.
   */

  entry->previous = entry;
   13f84:	e0bffd17 	ldw	r2,-12(fp)
   13f88:	e0fffd17 	ldw	r3,-12(fp)
   13f8c:	10c00115 	stw	r3,4(r2)
  entry->next     = entry;
   13f90:	e0bffd17 	ldw	r2,-12(fp)
   13f94:	e0fffd17 	ldw	r3,-12(fp)
   13f98:	10c00015 	stw	r3,0(r2)
} 
   13f9c:	0001883a 	nop
   13fa0:	e0bfff17 	ldw	r2,-4(fp)
   13fa4:	e0bffe15 	stw	r2,-8(fp)
  NIOS2_WRITE_STATUS (context);
   13fa8:	e0bffe17 	ldw	r2,-8(fp)
   13fac:	1001703a 	wrctl	status,r2
}
   13fb0:	0001883a 	nop
  alt_irq_enable_all (irq_context);
}
   13fb4:	0001883a 	nop
   13fb8:	e037883a 	mov	sp,fp
   13fbc:	df000017 	ldw	fp,0(sp)
   13fc0:	dec00104 	addi	sp,sp,4
   13fc4:	f800283a 	ret

00013fc8 <alt_tick>:
 * 
 * alt_tick() is expected to run at interrupt level.
 */

void alt_tick (void)
{
   13fc8:	defff904 	addi	sp,sp,-28
   13fcc:	dfc00615 	stw	ra,24(sp)
   13fd0:	df000515 	stw	fp,20(sp)
   13fd4:	dc400415 	stw	r17,16(sp)
   13fd8:	dc000315 	stw	r16,12(sp)
   13fdc:	df000504 	addi	fp,sp,20
  alt_alarm* next;
  alt_alarm* alarm = (alt_alarm*) alt_alarm_list.next;
   13fe0:	d0a00c17 	ldw	r2,-32720(gp)
   13fe4:	e0bffd15 	stw	r2,-12(fp)

  alt_u32    next_callback;

  /* update the tick counter */

  _alt_nticks++;
   13fe8:	d126c017 	ldw	r4,-25856(gp)
   13fec:	d166c117 	ldw	r5,-25852(gp)
   13ff0:	01800044 	movi	r6,1
   13ff4:	000f883a 	mov	r7,zero
   13ff8:	2185883a 	add	r2,r4,r6
   13ffc:	1111803a 	cmpltu	r8,r2,r4
   14000:	29c7883a 	add	r3,r5,r7
   14004:	40c9883a 	add	r4,r8,r3
   14008:	2007883a 	mov	r3,r4
   1400c:	1009883a 	mov	r4,r2
   14010:	180b883a 	mov	r5,r3
   14014:	d126c015 	stw	r4,-25856(gp)
   14018:	d166c115 	stw	r5,-25852(gp)
 
  /* process the registered callbacks */

  while (alarm != (alt_alarm*) &alt_alarm_list)
   1401c:	00002906 	br	140c4 <alt_tick+0xfc>
  {
    next = (alt_alarm*) alarm->llist.next;
   14020:	e0bffd17 	ldw	r2,-12(fp)
   14024:	10800017 	ldw	r2,0(r2)
   14028:	e0bffc15 	stw	r2,-16(fp)
    
    /* if the alarm period has expired, make the callback */    
    if (alarm->time <= _alt_nticks)
   1402c:	e13ffd17 	ldw	r4,-12(fp)
   14030:	20800217 	ldw	r2,8(r4)
   14034:	20c00317 	ldw	r3,12(r4)
   14038:	d126c017 	ldw	r4,-25856(gp)
   1403c:	d166c117 	ldw	r5,-25852(gp)
   14040:	28c01e36 	bltu	r5,r3,140bc <alt_tick+0xf4>
   14044:	1940011e 	bne	r3,r5,1404c <alt_tick+0x84>
   14048:	20801c36 	bltu	r4,r2,140bc <alt_tick+0xf4>
    {
      next_callback = alarm->callback (alarm->context);
   1404c:	e0bffd17 	ldw	r2,-12(fp)
   14050:	10800417 	ldw	r2,16(r2)
   14054:	e0fffd17 	ldw	r3,-12(fp)
   14058:	18c00517 	ldw	r3,20(r3)
   1405c:	1809883a 	mov	r4,r3
   14060:	103ee83a 	callr	r2
   14064:	e0bffb15 	stw	r2,-20(fp)

      /* deactivate the alarm if the return value is zero */

      if (next_callback == 0)
   14068:	e0bffb17 	ldw	r2,-20(fp)
   1406c:	1000031e 	bne	r2,zero,1407c <alt_tick+0xb4>
      {
        alt_alarm_stop (alarm);
   14070:	e13ffd17 	ldw	r4,-12(fp)
   14074:	0013f240 	call	13f24 <alt_alarm_stop>
   14078:	00001006 	br	140bc <alt_tick+0xf4>
      }
      else
      {
        alarm->time += next_callback;
   1407c:	e0bffd17 	ldw	r2,-12(fp)
   14080:	11000217 	ldw	r4,8(r2)
   14084:	11400317 	ldw	r5,12(r2)
   14088:	e0bffb17 	ldw	r2,-20(fp)
   1408c:	1021883a 	mov	r16,r2
   14090:	0023883a 	mov	r17,zero
   14094:	2405883a 	add	r2,r4,r16
   14098:	110d803a 	cmpltu	r6,r2,r4
   1409c:	2c47883a 	add	r3,r5,r17
   140a0:	30c9883a 	add	r4,r6,r3
   140a4:	2007883a 	mov	r3,r4
   140a8:	1009883a 	mov	r4,r2
   140ac:	180b883a 	mov	r5,r3
   140b0:	e0bffd17 	ldw	r2,-12(fp)
   140b4:	11000215 	stw	r4,8(r2)
   140b8:	11400315 	stw	r5,12(r2)
      }
    }
    alarm = next;
   140bc:	e0bffc17 	ldw	r2,-16(fp)
   140c0:	e0bffd15 	stw	r2,-12(fp)
  while (alarm != (alt_alarm*) &alt_alarm_list)
   140c4:	e0fffd17 	ldw	r3,-12(fp)
   140c8:	d0a00c04 	addi	r2,gp,-32720
   140cc:	18bfd41e 	bne	r3,r2,14020 <alt_tick+0x58>

  /* 
   * Update the operating system specific timer facilities.
   */

  ALT_OS_TIME_TICK();
   140d0:	0001883a 	nop
}
   140d4:	0001883a 	nop
   140d8:	e6fffe04 	addi	sp,fp,-8
   140dc:	dfc00317 	ldw	ra,12(sp)
   140e0:	df000217 	ldw	fp,8(sp)
   140e4:	dc400117 	ldw	r17,4(sp)
   140e8:	dc000017 	ldw	r16,0(sp)
   140ec:	dec00404 	addi	sp,sp,16
   140f0:	f800283a 	ret

000140f4 <altera_nios2_gen2_irq_init>:
/*
 * To initialize the internal interrupt controller, just clear the IENABLE
 * register so that all possible IRQs are disabled.
 */
void altera_nios2_gen2_irq_init(void) 
{
   140f4:	deffff04 	addi	sp,sp,-4
   140f8:	df000015 	stw	fp,0(sp)
   140fc:	d839883a 	mov	fp,sp
    NIOS2_WRITE_IENABLE(0);
   14100:	000170fa 	wrctl	ienable,zero
}
   14104:	0001883a 	nop
   14108:	e037883a 	mov	sp,fp
   1410c:	df000017 	ldw	fp,0(sp)
   14110:	dec00104 	addi	sp,sp,4
   14114:	f800283a 	ret

00014118 <alt_find_file>:
 * either '/' or '\0' is the prefix of the filename. For example the filename:
 * "/myfilesystem/junk.txt" would match: "/myfilesystem", but not: "/myfile". 
 */
 
alt_dev* alt_find_file (const char* name)
{
   14118:	defffb04 	addi	sp,sp,-20
   1411c:	dfc00415 	stw	ra,16(sp)
   14120:	df000315 	stw	fp,12(sp)
   14124:	df000304 	addi	fp,sp,12
   14128:	e13ffd15 	stw	r4,-12(fp)
  alt_dev* next = (alt_dev*) alt_fs_list.next;   
   1412c:	d0a00617 	ldw	r2,-32744(gp)
   14130:	e0bfff15 	stw	r2,-4(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 
 
  while (next != (alt_dev*) &alt_fs_list)
   14134:	00003106 	br	141fc <alt_find_file+0xe4>
  {
    len = strlen(next->name);
   14138:	e0bfff17 	ldw	r2,-4(fp)
   1413c:	10800217 	ldw	r2,8(r2)
   14140:	1009883a 	mov	r4,r2
   14144:	001442c0 	call	1442c <strlen>
   14148:	e0bffe15 	stw	r2,-8(fp)
    
    if (next->name[len-1] == '/')
   1414c:	e0bfff17 	ldw	r2,-4(fp)
   14150:	10c00217 	ldw	r3,8(r2)
   14154:	e0bffe17 	ldw	r2,-8(fp)
   14158:	10bfffc4 	addi	r2,r2,-1
   1415c:	1885883a 	add	r2,r3,r2
   14160:	10800003 	ldbu	r2,0(r2)
   14164:	10803fcc 	andi	r2,r2,255
   14168:	1080201c 	xori	r2,r2,128
   1416c:	10bfe004 	addi	r2,r2,-128
   14170:	10800bd8 	cmpnei	r2,r2,47
   14174:	1000031e 	bne	r2,zero,14184 <alt_find_file+0x6c>
    {
      len -= 1;
   14178:	e0bffe17 	ldw	r2,-8(fp)
   1417c:	10bfffc4 	addi	r2,r2,-1
   14180:	e0bffe15 	stw	r2,-8(fp)
    }

    if (((name[len] == '/') || (name[len] == '\0')) && 
   14184:	e0bffe17 	ldw	r2,-8(fp)
   14188:	e0fffd17 	ldw	r3,-12(fp)
   1418c:	1885883a 	add	r2,r3,r2
   14190:	10800003 	ldbu	r2,0(r2)
   14194:	10803fcc 	andi	r2,r2,255
   14198:	1080201c 	xori	r2,r2,128
   1419c:	10bfe004 	addi	r2,r2,-128
   141a0:	10800be0 	cmpeqi	r2,r2,47
   141a4:	1000081e 	bne	r2,zero,141c8 <alt_find_file+0xb0>
   141a8:	e0bffe17 	ldw	r2,-8(fp)
   141ac:	e0fffd17 	ldw	r3,-12(fp)
   141b0:	1885883a 	add	r2,r3,r2
   141b4:	10800003 	ldbu	r2,0(r2)
   141b8:	10803fcc 	andi	r2,r2,255
   141bc:	1080201c 	xori	r2,r2,128
   141c0:	10bfe004 	addi	r2,r2,-128
   141c4:	10000a1e 	bne	r2,zero,141f0 <alt_find_file+0xd8>
        !memcmp (next->name, name, len))
   141c8:	e0bfff17 	ldw	r2,-4(fp)
   141cc:	10800217 	ldw	r2,8(r2)
   141d0:	e0fffe17 	ldw	r3,-8(fp)
   141d4:	180d883a 	mov	r6,r3
   141d8:	e17ffd17 	ldw	r5,-12(fp)
   141dc:	1009883a 	mov	r4,r2
   141e0:	00143940 	call	14394 <memcmp>
    if (((name[len] == '/') || (name[len] == '\0')) && 
   141e4:	1000021e 	bne	r2,zero,141f0 <alt_find_file+0xd8>
    {
      /* match found */

      return next;
   141e8:	e0bfff17 	ldw	r2,-4(fp)
   141ec:	00000706 	br	1420c <alt_find_file+0xf4>
    }
    next = (alt_dev*) next->llist.next;
   141f0:	e0bfff17 	ldw	r2,-4(fp)
   141f4:	10800017 	ldw	r2,0(r2)
   141f8:	e0bfff15 	stw	r2,-4(fp)
  while (next != (alt_dev*) &alt_fs_list)
   141fc:	e0ffff17 	ldw	r3,-4(fp)
   14200:	d0a00604 	addi	r2,gp,-32744
   14204:	18bfcc1e 	bne	r3,r2,14138 <alt_find_file+0x20>
  }
  
  /* No match found */
  
  return NULL;     
   14208:	0005883a 	mov	r2,zero
}
   1420c:	e037883a 	mov	sp,fp
   14210:	dfc00117 	ldw	ra,4(sp)
   14214:	df000017 	ldw	fp,0(sp)
   14218:	dec00204 	addi	sp,sp,8
   1421c:	f800283a 	ret

00014220 <alt_get_fd>:
 * the offset of the file descriptor within the file descriptor array). A
 * negative value indicates failure.
 */

int alt_get_fd (alt_dev* dev)
{
   14220:	defffc04 	addi	sp,sp,-16
   14224:	df000315 	stw	fp,12(sp)
   14228:	df000304 	addi	fp,sp,12
   1422c:	e13ffd15 	stw	r4,-12(fp)
  alt_32 i;
  int rc = -EMFILE;
   14230:	00bffa04 	movi	r2,-24
   14234:	e0bffe15 	stw	r2,-8(fp)
   * indicates the highest file descriptor ever allocated. This is used to
   * improve efficency when searching the file descriptor list, and 
   * therefore reduce contention on the alt_fd_list_lock semaphore. 
   */

  for (i = 0; i < ALT_MAX_FD; i++)
   14238:	e03fff15 	stw	zero,-4(fp)
   1423c:	00001d06 	br	142b4 <alt_get_fd+0x94>
  {
    if (!alt_fd_list[i].dev)
   14240:	e0ffff17 	ldw	r3,-4(fp)
   14244:	1805883a 	mov	r2,r3
   14248:	1085883a 	add	r2,r2,r2
   1424c:	10c5883a 	add	r2,r2,r3
   14250:	100490ba 	slli	r2,r2,2
   14254:	00c00074 	movhi	r3,1
   14258:	10c7883a 	add	r3,r2,r3
   1425c:	189ed117 	ldw	r2,31556(r3)
   14260:	1000111e 	bne	r2,zero,142a8 <alt_get_fd+0x88>
    {
      alt_fd_list[i].dev = dev;
   14264:	e0ffff17 	ldw	r3,-4(fp)
   14268:	1805883a 	mov	r2,r3
   1426c:	1085883a 	add	r2,r2,r2
   14270:	10c5883a 	add	r2,r2,r3
   14274:	100490ba 	slli	r2,r2,2
   14278:	e13ffd17 	ldw	r4,-12(fp)
   1427c:	00c00074 	movhi	r3,1
   14280:	10c7883a 	add	r3,r2,r3
   14284:	191ed115 	stw	r4,31556(r3)
      if (i > alt_max_fd)
   14288:	d0e00a17 	ldw	r3,-32728(gp)
   1428c:	e0bfff17 	ldw	r2,-4(fp)
   14290:	1880020e 	bge	r3,r2,1429c <alt_get_fd+0x7c>
      {
        alt_max_fd = i;
   14294:	e0bfff17 	ldw	r2,-4(fp)
   14298:	d0a00a15 	stw	r2,-32728(gp)
      }
      rc = i;
   1429c:	e0bfff17 	ldw	r2,-4(fp)
   142a0:	e0bffe15 	stw	r2,-8(fp)
      goto alt_get_fd_exit;
   142a4:	00000706 	br	142c4 <alt_get_fd+0xa4>
  for (i = 0; i < ALT_MAX_FD; i++)
   142a8:	e0bfff17 	ldw	r2,-4(fp)
   142ac:	10800044 	addi	r2,r2,1
   142b0:	e0bfff15 	stw	r2,-4(fp)
   142b4:	e0bfff17 	ldw	r2,-4(fp)
   142b8:	10800810 	cmplti	r2,r2,32
   142bc:	103fe01e 	bne	r2,zero,14240 <alt_get_fd+0x20>
    }
  }

 alt_get_fd_exit:
   142c0:	0001883a 	nop
   * file descriptor pool.
   */

  ALT_SEM_POST(alt_fd_list_lock);

  return rc;
   142c4:	e0bffe17 	ldw	r2,-8(fp)
}
   142c8:	e037883a 	mov	sp,fp
   142cc:	df000017 	ldw	fp,0(sp)
   142d0:	dec00104 	addi	sp,sp,4
   142d4:	f800283a 	ret

000142d8 <alt_exception_cause_generated_bad_addr>:
 * Return: 1: BADADDR (bad_addr argument to handler) is valid
 *         0: BADADDR is not valid
 */
int 
alt_exception_cause_generated_bad_addr(alt_exception_cause cause)
{
   142d8:	defffe04 	addi	sp,sp,-8
   142dc:	df000115 	stw	fp,4(sp)
   142e0:	df000104 	addi	fp,sp,4
   142e4:	e13fff15 	stw	r4,-4(fp)
  switch (cause) {
   142e8:	e0bfff17 	ldw	r2,-4(fp)
   142ec:	10bffe84 	addi	r2,r2,-6
   142f0:	10c00428 	cmpgeui	r3,r2,16
   142f4:	18c03fcc 	andi	r3,r3,255
   142f8:	18000f1e 	bne	r3,zero,14338 <alt_exception_cause_generated_bad_addr+0x60>
   142fc:	00c00044 	movi	r3,1
   14300:	1884983a 	sll	r2,r3,r2
   14304:	10e2c8cc 	andi	r3,r2,35619
   14308:	1806c03a 	cmpne	r3,r3,zero
   1430c:	18c03fcc 	andi	r3,r3,255
   14310:	1800051e 	bne	r3,zero,14328 <alt_exception_cause_generated_bad_addr+0x50>
   14314:	1084100c 	andi	r2,r2,4160
   14318:	1004c03a 	cmpne	r2,r2,zero
   1431c:	10803fcc 	andi	r2,r2,255
   14320:	1000031e 	bne	r2,zero,14330 <alt_exception_cause_generated_bad_addr+0x58>
   14324:	00000406 	br	14338 <alt_exception_cause_generated_bad_addr+0x60>
  case NIOS2_EXCEPTION_MISALIGNED_TARGET_PC:
  case NIOS2_EXCEPTION_TLB_READ_PERM_VIOLATION:
  case NIOS2_EXCEPTION_TLB_WRITE_PERM_VIOLATION:
  case NIOS2_EXCEPTION_MPU_DATA_REGION_VIOLATION:
  case NIOS2_EXCEPTION_ECC_DATA_ERR:
    return 1;
   14328:	00800044 	movi	r2,1
   1432c:	00000306 	br	1433c <alt_exception_cause_generated_bad_addr+0x64>

  case NIOS2_EXCEPTION_TLB_MISS:
  case NIOS2_EXCEPTION_ECC_TLB_ERR:
    return 0;
   14330:	0005883a 	mov	r2,zero
   14334:	00000106 	br	1433c <alt_exception_cause_generated_bad_addr+0x64>

  default:
    return 0;
   14338:	0005883a 	mov	r2,zero
  }
}
   1433c:	e037883a 	mov	sp,fp
   14340:	df000017 	ldw	fp,0(sp)
   14344:	dec00104 	addi	sp,sp,4
   14348:	f800283a 	ret

0001434c <atexit>:
   1434c:	200b883a 	mov	r5,r4
   14350:	000f883a 	mov	r7,zero
   14354:	000d883a 	mov	r6,zero
   14358:	0009883a 	mov	r4,zero
   1435c:	00144c41 	jmpi	144c4 <__register_exitproc>

00014360 <exit>:
   14360:	defffe04 	addi	sp,sp,-8
   14364:	000b883a 	mov	r5,zero
   14368:	dc000015 	stw	r16,0(sp)
   1436c:	dfc00115 	stw	ra,4(sp)
   14370:	2021883a 	mov	r16,r4
   14374:	00145540 	call	14554 <__call_exitprocs>
   14378:	00800074 	movhi	r2,1
   1437c:	111f3317 	ldw	r4,31948(r2)
   14380:	20800f17 	ldw	r2,60(r4)
   14384:	10000126 	beq	r2,zero,1438c <exit+0x2c>
   14388:	103ee83a 	callr	r2
   1438c:	8009883a 	mov	r4,r16
   14390:	0015a740 	call	15a74 <_exit>

00014394 <memcmp>:
   14394:	30800128 	cmpgeui	r2,r6,4
   14398:	10000d26 	beq	r2,zero,143d0 <memcmp+0x3c>
   1439c:	2144b03a 	or	r2,r4,r5
   143a0:	108000cc 	andi	r2,r2,3
   143a4:	10000726 	beq	r2,zero,143c4 <memcmp+0x30>
   143a8:	30bfffc4 	addi	r2,r6,-1
   143ac:	00000a06 	br	143d8 <memcmp+0x44>
   143b0:	31bfff04 	addi	r6,r6,-4
   143b4:	30800128 	cmpgeui	r2,r6,4
   143b8:	21000104 	addi	r4,r4,4
   143bc:	29400104 	addi	r5,r5,4
   143c0:	10000326 	beq	r2,zero,143d0 <memcmp+0x3c>
   143c4:	20c00017 	ldw	r3,0(r4)
   143c8:	28800017 	ldw	r2,0(r5)
   143cc:	18bff826 	beq	r3,r2,143b0 <memcmp+0x1c>
   143d0:	30bfffc4 	addi	r2,r6,-1
   143d4:	30000b26 	beq	r6,zero,14404 <memcmp+0x70>
   143d8:	11800044 	addi	r6,r2,1
   143dc:	218d883a 	add	r6,r4,r6
   143e0:	00000106 	br	143e8 <memcmp+0x54>
   143e4:	21800726 	beq	r4,r6,14404 <memcmp+0x70>
   143e8:	20800003 	ldbu	r2,0(r4)
   143ec:	28c00003 	ldbu	r3,0(r5)
   143f0:	21000044 	addi	r4,r4,1
   143f4:	29400044 	addi	r5,r5,1
   143f8:	10fffa26 	beq	r2,r3,143e4 <memcmp+0x50>
   143fc:	10c5c83a 	sub	r2,r2,r3
   14400:	f800283a 	ret
   14404:	0005883a 	mov	r2,zero
   14408:	f800283a 	ret

0001440c <_putchar_r>:
   1440c:	21800217 	ldw	r6,8(r4)
   14410:	00146741 	jmpi	14674 <_putc_r>

00014414 <putchar>:
   14414:	00800074 	movhi	r2,1
   14418:	109f3417 	ldw	r2,31952(r2)
   1441c:	200b883a 	mov	r5,r4
   14420:	11800217 	ldw	r6,8(r2)
   14424:	1009883a 	mov	r4,r2
   14428:	00146741 	jmpi	14674 <_putc_r>

0001442c <strlen>:
   1442c:	208000cc 	andi	r2,r4,3
   14430:	10000926 	beq	r2,zero,14458 <strlen+0x2c>
   14434:	2005883a 	mov	r2,r4
   14438:	00000306 	br	14448 <strlen+0x1c>
   1443c:	10800044 	addi	r2,r2,1
   14440:	10c000cc 	andi	r3,r2,3
   14444:	18000526 	beq	r3,zero,1445c <strlen+0x30>
   14448:	10c00007 	ldb	r3,0(r2)
   1444c:	183ffb1e 	bne	r3,zero,1443c <strlen+0x10>
   14450:	1105c83a 	sub	r2,r2,r4
   14454:	f800283a 	ret
   14458:	2005883a 	mov	r2,r4
   1445c:	11400017 	ldw	r5,0(r2)
   14460:	01ffbff4 	movhi	r7,65279
   14464:	39ffbfc4 	addi	r7,r7,-257
   14468:	29c7883a 	add	r3,r5,r7
   1446c:	01a02074 	movhi	r6,32897
   14470:	014a303a 	nor	r5,zero,r5
   14474:	1946703a 	and	r3,r3,r5
   14478:	31a02004 	addi	r6,r6,-32640
   1447c:	1986703a 	and	r3,r3,r6
   14480:	1800071e 	bne	r3,zero,144a0 <strlen+0x74>
   14484:	11400117 	ldw	r5,4(r2)
   14488:	10800104 	addi	r2,r2,4
   1448c:	29c7883a 	add	r3,r5,r7
   14490:	014a303a 	nor	r5,zero,r5
   14494:	1946703a 	and	r3,r3,r5
   14498:	1986703a 	and	r3,r3,r6
   1449c:	183ff926 	beq	r3,zero,14484 <strlen+0x58>
   144a0:	10c00007 	ldb	r3,0(r2)
   144a4:	183fea26 	beq	r3,zero,14450 <strlen+0x24>
   144a8:	10c00047 	ldb	r3,1(r2)
   144ac:	10800044 	addi	r2,r2,1
   144b0:	183fe726 	beq	r3,zero,14450 <strlen+0x24>
   144b4:	10c00047 	ldb	r3,1(r2)
   144b8:	10800044 	addi	r2,r2,1
   144bc:	183ffa1e 	bne	r3,zero,144a8 <strlen+0x7c>
   144c0:	003fe306 	br	14450 <strlen+0x24>

000144c4 <__register_exitproc>:
   144c4:	00800074 	movhi	r2,1
   144c8:	10df3317 	ldw	r3,31948(r2)
   144cc:	18805217 	ldw	r2,328(r3)
   144d0:	10001726 	beq	r2,zero,14530 <__register_exitproc+0x6c>
   144d4:	10c00117 	ldw	r3,4(r2)
   144d8:	1a000808 	cmpgei	r8,r3,32
   144dc:	40001b1e 	bne	r8,zero,1454c <__register_exitproc+0x88>
   144e0:	20000b26 	beq	r4,zero,14510 <__register_exitproc+0x4c>
   144e4:	181090ba 	slli	r8,r3,2
   144e8:	02400044 	movi	r9,1
   144ec:	48d2983a 	sll	r9,r9,r3
   144f0:	1211883a 	add	r8,r2,r8
   144f4:	41802215 	stw	r6,136(r8)
   144f8:	11806217 	ldw	r6,392(r2)
   144fc:	21000098 	cmpnei	r4,r4,2
   14500:	324cb03a 	or	r6,r6,r9
   14504:	11806215 	stw	r6,392(r2)
   14508:	41c04215 	stw	r7,264(r8)
   1450c:	20000b26 	beq	r4,zero,1453c <__register_exitproc+0x78>
   14510:	19000084 	addi	r4,r3,2
   14514:	200890ba 	slli	r4,r4,2
   14518:	18c00044 	addi	r3,r3,1
   1451c:	10c00115 	stw	r3,4(r2)
   14520:	1105883a 	add	r2,r2,r4
   14524:	11400015 	stw	r5,0(r2)
   14528:	0005883a 	mov	r2,zero
   1452c:	f800283a 	ret
   14530:	18805304 	addi	r2,r3,332
   14534:	18805215 	stw	r2,328(r3)
   14538:	003fe606 	br	144d4 <__register_exitproc+0x10>
   1453c:	11006317 	ldw	r4,396(r2)
   14540:	2248b03a 	or	r4,r4,r9
   14544:	11006315 	stw	r4,396(r2)
   14548:	003ff106 	br	14510 <__register_exitproc+0x4c>
   1454c:	00bfffc4 	movi	r2,-1
   14550:	f800283a 	ret

00014554 <__call_exitprocs>:
   14554:	defff704 	addi	sp,sp,-36
   14558:	00800074 	movhi	r2,1
   1455c:	dcc00315 	stw	r19,12(sp)
   14560:	14df3317 	ldw	r19,31948(r2)
   14564:	dc800215 	stw	r18,8(sp)
   14568:	dfc00815 	stw	ra,32(sp)
   1456c:	9c805217 	ldw	r18,328(r19)
   14570:	ddc00715 	stw	r23,28(sp)
   14574:	dd800615 	stw	r22,24(sp)
   14578:	dd400515 	stw	r21,20(sp)
   1457c:	dd000415 	stw	r20,16(sp)
   14580:	dc400115 	stw	r17,4(sp)
   14584:	dc000015 	stw	r16,0(sp)
   14588:	90001026 	beq	r18,zero,145cc <__call_exitprocs+0x78>
   1458c:	202b883a 	mov	r21,r4
   14590:	282d883a 	mov	r22,r5
   14594:	05000044 	movi	r20,1
   14598:	94000117 	ldw	r16,4(r18)
   1459c:	847fffc4 	addi	r17,r16,-1
   145a0:	88000a16 	blt	r17,zero,145cc <__call_exitprocs+0x78>
   145a4:	84000044 	addi	r16,r16,1
   145a8:	802090ba 	slli	r16,r16,2
   145ac:	9421883a 	add	r16,r18,r16
   145b0:	b0001126 	beq	r22,zero,145f8 <__call_exitprocs+0xa4>
   145b4:	80804017 	ldw	r2,256(r16)
   145b8:	15800f26 	beq	r2,r22,145f8 <__call_exitprocs+0xa4>
   145bc:	8c7fffc4 	addi	r17,r17,-1
   145c0:	88bfffd8 	cmpnei	r2,r17,-1
   145c4:	843fff04 	addi	r16,r16,-4
   145c8:	103ff91e 	bne	r2,zero,145b0 <__call_exitprocs+0x5c>
   145cc:	dfc00817 	ldw	ra,32(sp)
   145d0:	ddc00717 	ldw	r23,28(sp)
   145d4:	dd800617 	ldw	r22,24(sp)
   145d8:	dd400517 	ldw	r21,20(sp)
   145dc:	dd000417 	ldw	r20,16(sp)
   145e0:	dcc00317 	ldw	r19,12(sp)
   145e4:	dc800217 	ldw	r18,8(sp)
   145e8:	dc400117 	ldw	r17,4(sp)
   145ec:	dc000017 	ldw	r16,0(sp)
   145f0:	dec00904 	addi	sp,sp,36
   145f4:	f800283a 	ret
   145f8:	90800117 	ldw	r2,4(r18)
   145fc:	81800017 	ldw	r6,0(r16)
   14600:	10bfffc4 	addi	r2,r2,-1
   14604:	14401726 	beq	r2,r17,14664 <__call_exitprocs+0x110>
   14608:	80000015 	stw	zero,0(r16)
   1460c:	303feb26 	beq	r6,zero,145bc <__call_exitprocs+0x68>
   14610:	a446983a 	sll	r3,r20,r17
   14614:	90806217 	ldw	r2,392(r18)
   14618:	95c00117 	ldw	r23,4(r18)
   1461c:	1884703a 	and	r2,r3,r2
   14620:	1000081e 	bne	r2,zero,14644 <__call_exitprocs+0xf0>
   14624:	303ee83a 	callr	r6
   14628:	90c00117 	ldw	r3,4(r18)
   1462c:	98805217 	ldw	r2,328(r19)
   14630:	1dc0011e 	bne	r3,r23,14638 <__call_exitprocs+0xe4>
   14634:	14bfe126 	beq	r2,r18,145bc <__call_exitprocs+0x68>
   14638:	103fe426 	beq	r2,zero,145cc <__call_exitprocs+0x78>
   1463c:	1025883a 	mov	r18,r2
   14640:	003fd506 	br	14598 <__call_exitprocs+0x44>
   14644:	90806317 	ldw	r2,396(r18)
   14648:	81002017 	ldw	r4,128(r16)
   1464c:	1886703a 	and	r3,r3,r2
   14650:	1800061e 	bne	r3,zero,1466c <__call_exitprocs+0x118>
   14654:	200b883a 	mov	r5,r4
   14658:	a809883a 	mov	r4,r21
   1465c:	303ee83a 	callr	r6
   14660:	003ff106 	br	14628 <__call_exitprocs+0xd4>
   14664:	94400115 	stw	r17,4(r18)
   14668:	003fe806 	br	1460c <__call_exitprocs+0xb8>
   1466c:	303ee83a 	callr	r6
   14670:	003fed06 	br	14628 <__call_exitprocs+0xd4>

00014674 <_putc_r>:
   14674:	defffc04 	addi	sp,sp,-16
   14678:	dc400215 	stw	r17,8(sp)
   1467c:	dfc00315 	stw	ra,12(sp)
   14680:	2023883a 	mov	r17,r4
   14684:	20000226 	beq	r4,zero,14690 <_putc_r+0x1c>
   14688:	20800e17 	ldw	r2,56(r4)
   1468c:	10000e26 	beq	r2,zero,146c8 <_putc_r+0x54>
   14690:	30800217 	ldw	r2,8(r6)
   14694:	10bfffc4 	addi	r2,r2,-1
   14698:	30800215 	stw	r2,8(r6)
   1469c:	10001316 	blt	r2,zero,146ec <_putc_r+0x78>
   146a0:	30800017 	ldw	r2,0(r6)
   146a4:	11400005 	stb	r5,0(r2)
   146a8:	30800017 	ldw	r2,0(r6)
   146ac:	10c00044 	addi	r3,r2,1
   146b0:	30c00015 	stw	r3,0(r6)
   146b4:	10800003 	ldbu	r2,0(r2)
   146b8:	dfc00317 	ldw	ra,12(sp)
   146bc:	dc400217 	ldw	r17,8(sp)
   146c0:	dec00404 	addi	sp,sp,16
   146c4:	f800283a 	ret
   146c8:	d9800115 	stw	r6,4(sp)
   146cc:	d9400015 	stw	r5,0(sp)
   146d0:	00150fc0 	call	150fc <__sinit>
   146d4:	d9800117 	ldw	r6,4(sp)
   146d8:	d9400017 	ldw	r5,0(sp)
   146dc:	30800217 	ldw	r2,8(r6)
   146e0:	10bfffc4 	addi	r2,r2,-1
   146e4:	30800215 	stw	r2,8(r6)
   146e8:	103fed0e 	bge	r2,zero,146a0 <_putc_r+0x2c>
   146ec:	30c00617 	ldw	r3,24(r6)
   146f0:	10c00e16 	blt	r2,r3,1472c <_putc_r+0xb8>
   146f4:	30800017 	ldw	r2,0(r6)
   146f8:	11400005 	stb	r5,0(r2)
   146fc:	30c00017 	ldw	r3,0(r6)
   14700:	18800003 	ldbu	r2,0(r3)
   14704:	108002a0 	cmpeqi	r2,r2,10
   14708:	1000071e 	bne	r2,zero,14728 <_putc_r+0xb4>
   1470c:	18800044 	addi	r2,r3,1
   14710:	30800015 	stw	r2,0(r6)
   14714:	18800003 	ldbu	r2,0(r3)
   14718:	dfc00317 	ldw	ra,12(sp)
   1471c:	dc400217 	ldw	r17,8(sp)
   14720:	dec00404 	addi	sp,sp,16
   14724:	f800283a 	ret
   14728:	01400284 	movi	r5,10
   1472c:	8809883a 	mov	r4,r17
   14730:	dfc00317 	ldw	ra,12(sp)
   14734:	dc400217 	ldw	r17,8(sp)
   14738:	dec00404 	addi	sp,sp,16
   1473c:	00148201 	jmpi	14820 <__swbuf_r>

00014740 <putc>:
   14740:	defffc04 	addi	sp,sp,-16
   14744:	00800074 	movhi	r2,1
   14748:	dc800215 	stw	r18,8(sp)
   1474c:	149f3417 	ldw	r18,31952(r2)
   14750:	dc400115 	stw	r17,4(sp)
   14754:	dfc00315 	stw	ra,12(sp)
   14758:	2023883a 	mov	r17,r4
   1475c:	90000226 	beq	r18,zero,14768 <putc+0x28>
   14760:	90800e17 	ldw	r2,56(r18)
   14764:	10000f26 	beq	r2,zero,147a4 <putc+0x64>
   14768:	28800217 	ldw	r2,8(r5)
   1476c:	10bfffc4 	addi	r2,r2,-1
   14770:	28800215 	stw	r2,8(r5)
   14774:	10001316 	blt	r2,zero,147c4 <putc+0x84>
   14778:	28800017 	ldw	r2,0(r5)
   1477c:	14400005 	stb	r17,0(r2)
   14780:	28800017 	ldw	r2,0(r5)
   14784:	10c00044 	addi	r3,r2,1
   14788:	28c00015 	stw	r3,0(r5)
   1478c:	10800003 	ldbu	r2,0(r2)
   14790:	dfc00317 	ldw	ra,12(sp)
   14794:	dc800217 	ldw	r18,8(sp)
   14798:	dc400117 	ldw	r17,4(sp)
   1479c:	dec00404 	addi	sp,sp,16
   147a0:	f800283a 	ret
   147a4:	9009883a 	mov	r4,r18
   147a8:	d9400015 	stw	r5,0(sp)
   147ac:	00150fc0 	call	150fc <__sinit>
   147b0:	d9400017 	ldw	r5,0(sp)
   147b4:	28800217 	ldw	r2,8(r5)
   147b8:	10bfffc4 	addi	r2,r2,-1
   147bc:	28800215 	stw	r2,8(r5)
   147c0:	103fed0e 	bge	r2,zero,14778 <putc+0x38>
   147c4:	28c00617 	ldw	r3,24(r5)
   147c8:	10c00a16 	blt	r2,r3,147f4 <putc+0xb4>
   147cc:	28800017 	ldw	r2,0(r5)
   147d0:	14400005 	stb	r17,0(r2)
   147d4:	28c00017 	ldw	r3,0(r5)
   147d8:	18800003 	ldbu	r2,0(r3)
   147dc:	108002a0 	cmpeqi	r2,r2,10
   147e0:	10000c1e 	bne	r2,zero,14814 <putc+0xd4>
   147e4:	18800044 	addi	r2,r3,1
   147e8:	28800015 	stw	r2,0(r5)
   147ec:	18800003 	ldbu	r2,0(r3)
   147f0:	003fe706 	br	14790 <putc+0x50>
   147f4:	280d883a 	mov	r6,r5
   147f8:	880b883a 	mov	r5,r17
   147fc:	9009883a 	mov	r4,r18
   14800:	dfc00317 	ldw	ra,12(sp)
   14804:	dc800217 	ldw	r18,8(sp)
   14808:	dc400117 	ldw	r17,4(sp)
   1480c:	dec00404 	addi	sp,sp,16
   14810:	00148201 	jmpi	14820 <__swbuf_r>
   14814:	280d883a 	mov	r6,r5
   14818:	01400284 	movi	r5,10
   1481c:	003ff706 	br	147fc <putc+0xbc>

00014820 <__swbuf_r>:
   14820:	defffb04 	addi	sp,sp,-20
   14824:	dcc00315 	stw	r19,12(sp)
   14828:	dc400115 	stw	r17,4(sp)
   1482c:	dc000015 	stw	r16,0(sp)
   14830:	dfc00415 	stw	ra,16(sp)
   14834:	dc800215 	stw	r18,8(sp)
   14838:	2027883a 	mov	r19,r4
   1483c:	2823883a 	mov	r17,r5
   14840:	3021883a 	mov	r16,r6
   14844:	20000226 	beq	r4,zero,14850 <__swbuf_r+0x30>
   14848:	20800e17 	ldw	r2,56(r4)
   1484c:	10003e26 	beq	r2,zero,14948 <__swbuf_r+0x128>
   14850:	80800617 	ldw	r2,24(r16)
   14854:	80c0030b 	ldhu	r3,12(r16)
   14858:	80800215 	stw	r2,8(r16)
   1485c:	1880020c 	andi	r2,r3,8
   14860:	10001f26 	beq	r2,zero,148e0 <__swbuf_r+0xc0>
   14864:	80800417 	ldw	r2,16(r16)
   14868:	10001d26 	beq	r2,zero,148e0 <__swbuf_r+0xc0>
   1486c:	1948000c 	andi	r5,r3,8192
   14870:	8c803fcc 	andi	r18,r17,255
   14874:	28002326 	beq	r5,zero,14904 <__swbuf_r+0xe4>
   14878:	80c00017 	ldw	r3,0(r16)
   1487c:	81000517 	ldw	r4,20(r16)
   14880:	1885c83a 	sub	r2,r3,r2
   14884:	1100290e 	bge	r2,r4,1492c <__swbuf_r+0x10c>
   14888:	10800044 	addi	r2,r2,1
   1488c:	81400217 	ldw	r5,8(r16)
   14890:	19000044 	addi	r4,r3,1
   14894:	81000015 	stw	r4,0(r16)
   14898:	297fffc4 	addi	r5,r5,-1
   1489c:	81400215 	stw	r5,8(r16)
   148a0:	1c400005 	stb	r17,0(r3)
   148a4:	80c00517 	ldw	r3,20(r16)
   148a8:	18802926 	beq	r3,r2,14950 <__swbuf_r+0x130>
   148ac:	8080030b 	ldhu	r2,12(r16)
   148b0:	1080004c 	andi	r2,r2,1
   148b4:	10000226 	beq	r2,zero,148c0 <__swbuf_r+0xa0>
   148b8:	90800298 	cmpnei	r2,r18,10
   148bc:	10002426 	beq	r2,zero,14950 <__swbuf_r+0x130>
   148c0:	9005883a 	mov	r2,r18
   148c4:	dfc00417 	ldw	ra,16(sp)
   148c8:	dcc00317 	ldw	r19,12(sp)
   148cc:	dc800217 	ldw	r18,8(sp)
   148d0:	dc400117 	ldw	r17,4(sp)
   148d4:	dc000017 	ldw	r16,0(sp)
   148d8:	dec00504 	addi	sp,sp,20
   148dc:	f800283a 	ret
   148e0:	800b883a 	mov	r5,r16
   148e4:	9809883a 	mov	r4,r19
   148e8:	00149800 	call	14980 <__swsetup_r>
   148ec:	10001c1e 	bne	r2,zero,14960 <__swbuf_r+0x140>
   148f0:	80c0030b 	ldhu	r3,12(r16)
   148f4:	80800417 	ldw	r2,16(r16)
   148f8:	8c803fcc 	andi	r18,r17,255
   148fc:	1948000c 	andi	r5,r3,8192
   14900:	283fdd1e 	bne	r5,zero,14878 <__swbuf_r+0x58>
   14904:	81001917 	ldw	r4,100(r16)
   14908:	18c80014 	ori	r3,r3,8192
   1490c:	0177ffc4 	movi	r5,-8193
   14910:	2148703a 	and	r4,r4,r5
   14914:	80c0030d 	sth	r3,12(r16)
   14918:	80c00017 	ldw	r3,0(r16)
   1491c:	81001915 	stw	r4,100(r16)
   14920:	81000517 	ldw	r4,20(r16)
   14924:	1885c83a 	sub	r2,r3,r2
   14928:	113fd716 	blt	r2,r4,14888 <__swbuf_r+0x68>
   1492c:	800b883a 	mov	r5,r16
   14930:	9809883a 	mov	r4,r19
   14934:	0014cd40 	call	14cd4 <_fflush_r>
   14938:	1000091e 	bne	r2,zero,14960 <__swbuf_r+0x140>
   1493c:	80c00017 	ldw	r3,0(r16)
   14940:	00800044 	movi	r2,1
   14944:	003fd106 	br	1488c <__swbuf_r+0x6c>
   14948:	00150fc0 	call	150fc <__sinit>
   1494c:	003fc006 	br	14850 <__swbuf_r+0x30>
   14950:	800b883a 	mov	r5,r16
   14954:	9809883a 	mov	r4,r19
   14958:	0014cd40 	call	14cd4 <_fflush_r>
   1495c:	103fd826 	beq	r2,zero,148c0 <__swbuf_r+0xa0>
   14960:	04bfffc4 	movi	r18,-1
   14964:	003fd606 	br	148c0 <__swbuf_r+0xa0>

00014968 <__swbuf>:
   14968:	00c00074 	movhi	r3,1
   1496c:	2005883a 	mov	r2,r4
   14970:	191f3417 	ldw	r4,31952(r3)
   14974:	280d883a 	mov	r6,r5
   14978:	100b883a 	mov	r5,r2
   1497c:	00148201 	jmpi	14820 <__swbuf_r>

00014980 <__swsetup_r>:
   14980:	00800074 	movhi	r2,1
   14984:	109f3417 	ldw	r2,31952(r2)
   14988:	defffd04 	addi	sp,sp,-12
   1498c:	dc400115 	stw	r17,4(sp)
   14990:	dc000015 	stw	r16,0(sp)
   14994:	dfc00215 	stw	ra,8(sp)
   14998:	2023883a 	mov	r17,r4
   1499c:	2821883a 	mov	r16,r5
   149a0:	10000226 	beq	r2,zero,149ac <__swsetup_r+0x2c>
   149a4:	10c00e17 	ldw	r3,56(r2)
   149a8:	18001d26 	beq	r3,zero,14a20 <__swsetup_r+0xa0>
   149ac:	80c0030b 	ldhu	r3,12(r16)
   149b0:	1880020c 	andi	r2,r3,8
   149b4:	10001f26 	beq	r2,zero,14a34 <__swsetup_r+0xb4>
   149b8:	80800417 	ldw	r2,16(r16)
   149bc:	10002626 	beq	r2,zero,14a58 <__swsetup_r+0xd8>
   149c0:	1900004c 	andi	r4,r3,1
   149c4:	20000b1e 	bne	r4,zero,149f4 <__swsetup_r+0x74>
   149c8:	1900008c 	andi	r4,r3,2
   149cc:	20002b1e 	bne	r4,zero,14a7c <__swsetup_r+0xfc>
   149d0:	81000517 	ldw	r4,20(r16)
   149d4:	81000215 	stw	r4,8(r16)
   149d8:	10000b26 	beq	r2,zero,14a08 <__swsetup_r+0x88>
   149dc:	0005883a 	mov	r2,zero
   149e0:	dfc00217 	ldw	ra,8(sp)
   149e4:	dc400117 	ldw	r17,4(sp)
   149e8:	dc000017 	ldw	r16,0(sp)
   149ec:	dec00304 	addi	sp,sp,12
   149f0:	f800283a 	ret
   149f4:	81000517 	ldw	r4,20(r16)
   149f8:	80000215 	stw	zero,8(r16)
   149fc:	0109c83a 	sub	r4,zero,r4
   14a00:	81000615 	stw	r4,24(r16)
   14a04:	103ff51e 	bne	r2,zero,149dc <__swsetup_r+0x5c>
   14a08:	1900200c 	andi	r4,r3,128
   14a0c:	203ff426 	beq	r4,zero,149e0 <__swsetup_r+0x60>
   14a10:	18c01014 	ori	r3,r3,64
   14a14:	80c0030d 	sth	r3,12(r16)
   14a18:	00bfffc4 	movi	r2,-1
   14a1c:	003ff006 	br	149e0 <__swsetup_r+0x60>
   14a20:	1009883a 	mov	r4,r2
   14a24:	00150fc0 	call	150fc <__sinit>
   14a28:	80c0030b 	ldhu	r3,12(r16)
   14a2c:	1880020c 	andi	r2,r3,8
   14a30:	103fe11e 	bne	r2,zero,149b8 <__swsetup_r+0x38>
   14a34:	1880040c 	andi	r2,r3,16
   14a38:	10002026 	beq	r2,zero,14abc <__swsetup_r+0x13c>
   14a3c:	1880010c 	andi	r2,r3,4
   14a40:	1000101e 	bne	r2,zero,14a84 <__swsetup_r+0x104>
   14a44:	80800417 	ldw	r2,16(r16)
   14a48:	19000214 	ori	r4,r3,8
   14a4c:	8100030d 	sth	r4,12(r16)
   14a50:	2007883a 	mov	r3,r4
   14a54:	103fda1e 	bne	r2,zero,149c0 <__swsetup_r+0x40>
   14a58:	1900a00c 	andi	r4,r3,640
   14a5c:	21008020 	cmpeqi	r4,r4,512
   14a60:	203fd71e 	bne	r4,zero,149c0 <__swsetup_r+0x40>
   14a64:	800b883a 	mov	r5,r16
   14a68:	8809883a 	mov	r4,r17
   14a6c:	00152840 	call	15284 <__smakebuf_r>
   14a70:	80c0030b 	ldhu	r3,12(r16)
   14a74:	80800417 	ldw	r2,16(r16)
   14a78:	003fd106 	br	149c0 <__swsetup_r+0x40>
   14a7c:	0009883a 	mov	r4,zero
   14a80:	003fd406 	br	149d4 <__swsetup_r+0x54>
   14a84:	81400c17 	ldw	r5,48(r16)
   14a88:	28000626 	beq	r5,zero,14aa4 <__swsetup_r+0x124>
   14a8c:	80801004 	addi	r2,r16,64
   14a90:	28800326 	beq	r5,r2,14aa0 <__swsetup_r+0x120>
   14a94:	8809883a 	mov	r4,r17
   14a98:	0011c5c0 	call	11c5c <_free_r>
   14a9c:	80c0030b 	ldhu	r3,12(r16)
   14aa0:	80000c15 	stw	zero,48(r16)
   14aa4:	80800417 	ldw	r2,16(r16)
   14aa8:	013ff6c4 	movi	r4,-37
   14aac:	20c6703a 	and	r3,r4,r3
   14ab0:	80000115 	stw	zero,4(r16)
   14ab4:	80800015 	stw	r2,0(r16)
   14ab8:	003fe306 	br	14a48 <__swsetup_r+0xc8>
   14abc:	00800244 	movi	r2,9
   14ac0:	88800015 	stw	r2,0(r17)
   14ac4:	18c01014 	ori	r3,r3,64
   14ac8:	003fd206 	br	14a14 <__swsetup_r+0x94>

00014acc <__sflush_r>:
   14acc:	2880030b 	ldhu	r2,12(r5)
   14ad0:	defffb04 	addi	sp,sp,-20
   14ad4:	dcc00315 	stw	r19,12(sp)
   14ad8:	dc000015 	stw	r16,0(sp)
   14adc:	dfc00415 	stw	ra,16(sp)
   14ae0:	dc800215 	stw	r18,8(sp)
   14ae4:	dc400115 	stw	r17,4(sp)
   14ae8:	10c0020c 	andi	r3,r2,8
   14aec:	2821883a 	mov	r16,r5
   14af0:	2027883a 	mov	r19,r4
   14af4:	18003c1e 	bne	r3,zero,14be8 <__sflush_r+0x11c>
   14af8:	29000117 	ldw	r4,4(r5)
   14afc:	10c20014 	ori	r3,r2,2048
   14b00:	28c0030d 	sth	r3,12(r5)
   14b04:	0100580e 	bge	zero,r4,14c68 <__sflush_r+0x19c>
   14b08:	82000a17 	ldw	r8,40(r16)
   14b0c:	40003426 	beq	r8,zero,14be0 <__sflush_r+0x114>
   14b10:	9c400017 	ldw	r17,0(r19)
   14b14:	1084000c 	andi	r2,r2,4096
   14b18:	98000015 	stw	zero,0(r19)
   14b1c:	81400717 	ldw	r5,28(r16)
   14b20:	1000561e 	bne	r2,zero,14c7c <__sflush_r+0x1b0>
   14b24:	000d883a 	mov	r6,zero
   14b28:	01c00044 	movi	r7,1
   14b2c:	9809883a 	mov	r4,r19
   14b30:	403ee83a 	callr	r8
   14b34:	100d883a 	mov	r6,r2
   14b38:	10bfffd8 	cmpnei	r2,r2,-1
   14b3c:	10005b26 	beq	r2,zero,14cac <__sflush_r+0x1e0>
   14b40:	80c0030b 	ldhu	r3,12(r16)
   14b44:	82000a17 	ldw	r8,40(r16)
   14b48:	18c0010c 	andi	r3,r3,4
   14b4c:	18000626 	beq	r3,zero,14b68 <__sflush_r+0x9c>
   14b50:	80c00117 	ldw	r3,4(r16)
   14b54:	80800c17 	ldw	r2,48(r16)
   14b58:	30cdc83a 	sub	r6,r6,r3
   14b5c:	10000226 	beq	r2,zero,14b68 <__sflush_r+0x9c>
   14b60:	80800f17 	ldw	r2,60(r16)
   14b64:	308dc83a 	sub	r6,r6,r2
   14b68:	81400717 	ldw	r5,28(r16)
   14b6c:	000f883a 	mov	r7,zero
   14b70:	9809883a 	mov	r4,r19
   14b74:	403ee83a 	callr	r8
   14b78:	10ffffd8 	cmpnei	r3,r2,-1
   14b7c:	1800411e 	bne	r3,zero,14c84 <__sflush_r+0x1b8>
   14b80:	99400017 	ldw	r5,0(r19)
   14b84:	28c007b0 	cmpltui	r3,r5,30
   14b88:	18002c26 	beq	r3,zero,14c3c <__sflush_r+0x170>
   14b8c:	00f7f034 	movhi	r3,57280
   14b90:	18ffff84 	addi	r3,r3,-2
   14b94:	1949d83a 	sra	r4,r3,r5
   14b98:	80c0030b 	ldhu	r3,12(r16)
   14b9c:	2100004c 	andi	r4,r4,1
   14ba0:	2000271e 	bne	r4,zero,14c40 <__sflush_r+0x174>
   14ba4:	81000417 	ldw	r4,16(r16)
   14ba8:	19bdffcc 	andi	r6,r3,63487
   14bac:	8180030d 	sth	r6,12(r16)
   14bb0:	80000115 	stw	zero,4(r16)
   14bb4:	81000015 	stw	r4,0(r16)
   14bb8:	18c4000c 	andi	r3,r3,4096
   14bbc:	1800431e 	bne	r3,zero,14ccc <__sflush_r+0x200>
   14bc0:	81400c17 	ldw	r5,48(r16)
   14bc4:	9c400015 	stw	r17,0(r19)
   14bc8:	28000526 	beq	r5,zero,14be0 <__sflush_r+0x114>
   14bcc:	80801004 	addi	r2,r16,64
   14bd0:	28800226 	beq	r5,r2,14bdc <__sflush_r+0x110>
   14bd4:	9809883a 	mov	r4,r19
   14bd8:	0011c5c0 	call	11c5c <_free_r>
   14bdc:	80000c15 	stw	zero,48(r16)
   14be0:	0005883a 	mov	r2,zero
   14be4:	00001906 	br	14c4c <__sflush_r+0x180>
   14be8:	2c800417 	ldw	r18,16(r5)
   14bec:	903ffc26 	beq	r18,zero,14be0 <__sflush_r+0x114>
   14bf0:	2c400017 	ldw	r17,0(r5)
   14bf4:	108000cc 	andi	r2,r2,3
   14bf8:	2c800015 	stw	r18,0(r5)
   14bfc:	8ca3c83a 	sub	r17,r17,r18
   14c00:	10001c1e 	bne	r2,zero,14c74 <__sflush_r+0x1a8>
   14c04:	28800517 	ldw	r2,20(r5)
   14c08:	80800215 	stw	r2,8(r16)
   14c0c:	04400316 	blt	zero,r17,14c1c <__sflush_r+0x150>
   14c10:	003ff306 	br	14be0 <__sflush_r+0x114>
   14c14:	90a5883a 	add	r18,r18,r2
   14c18:	047ff10e 	bge	zero,r17,14be0 <__sflush_r+0x114>
   14c1c:	80800917 	ldw	r2,36(r16)
   14c20:	81400717 	ldw	r5,28(r16)
   14c24:	880f883a 	mov	r7,r17
   14c28:	900d883a 	mov	r6,r18
   14c2c:	9809883a 	mov	r4,r19
   14c30:	103ee83a 	callr	r2
   14c34:	88a3c83a 	sub	r17,r17,r2
   14c38:	00bff616 	blt	zero,r2,14c14 <__sflush_r+0x148>
   14c3c:	80c0030b 	ldhu	r3,12(r16)
   14c40:	18c01014 	ori	r3,r3,64
   14c44:	80c0030d 	sth	r3,12(r16)
   14c48:	00bfffc4 	movi	r2,-1
   14c4c:	dfc00417 	ldw	ra,16(sp)
   14c50:	dcc00317 	ldw	r19,12(sp)
   14c54:	dc800217 	ldw	r18,8(sp)
   14c58:	dc400117 	ldw	r17,4(sp)
   14c5c:	dc000017 	ldw	r16,0(sp)
   14c60:	dec00504 	addi	sp,sp,20
   14c64:	f800283a 	ret
   14c68:	29000f17 	ldw	r4,60(r5)
   14c6c:	013fa616 	blt	zero,r4,14b08 <__sflush_r+0x3c>
   14c70:	003fdb06 	br	14be0 <__sflush_r+0x114>
   14c74:	0005883a 	mov	r2,zero
   14c78:	003fe306 	br	14c08 <__sflush_r+0x13c>
   14c7c:	81801417 	ldw	r6,80(r16)
   14c80:	003fb106 	br	14b48 <__sflush_r+0x7c>
   14c84:	80c0030b 	ldhu	r3,12(r16)
   14c88:	81000417 	ldw	r4,16(r16)
   14c8c:	80000115 	stw	zero,4(r16)
   14c90:	197dffcc 	andi	r5,r3,63487
   14c94:	8140030d 	sth	r5,12(r16)
   14c98:	81000015 	stw	r4,0(r16)
   14c9c:	18c4000c 	andi	r3,r3,4096
   14ca0:	183fc726 	beq	r3,zero,14bc0 <__sflush_r+0xf4>
   14ca4:	80801415 	stw	r2,80(r16)
   14ca8:	003fc506 	br	14bc0 <__sflush_r+0xf4>
   14cac:	98800017 	ldw	r2,0(r19)
   14cb0:	103fa326 	beq	r2,zero,14b40 <__sflush_r+0x74>
   14cb4:	10c00760 	cmpeqi	r3,r2,29
   14cb8:	1800021e 	bne	r3,zero,14cc4 <__sflush_r+0x1f8>
   14cbc:	10800598 	cmpnei	r2,r2,22
   14cc0:	103fde1e 	bne	r2,zero,14c3c <__sflush_r+0x170>
   14cc4:	9c400015 	stw	r17,0(r19)
   14cc8:	003fc506 	br	14be0 <__sflush_r+0x114>
   14ccc:	283fbc1e 	bne	r5,zero,14bc0 <__sflush_r+0xf4>
   14cd0:	003ff406 	br	14ca4 <__sflush_r+0x1d8>

00014cd4 <_fflush_r>:
   14cd4:	defffd04 	addi	sp,sp,-12
   14cd8:	dc000115 	stw	r16,4(sp)
   14cdc:	dfc00215 	stw	ra,8(sp)
   14ce0:	2021883a 	mov	r16,r4
   14ce4:	20000226 	beq	r4,zero,14cf0 <_fflush_r+0x1c>
   14ce8:	20800e17 	ldw	r2,56(r4)
   14cec:	10000726 	beq	r2,zero,14d0c <_fflush_r+0x38>
   14cf0:	2880030f 	ldh	r2,12(r5)
   14cf4:	10000a1e 	bne	r2,zero,14d20 <_fflush_r+0x4c>
   14cf8:	0005883a 	mov	r2,zero
   14cfc:	dfc00217 	ldw	ra,8(sp)
   14d00:	dc000117 	ldw	r16,4(sp)
   14d04:	dec00304 	addi	sp,sp,12
   14d08:	f800283a 	ret
   14d0c:	d9400015 	stw	r5,0(sp)
   14d10:	00150fc0 	call	150fc <__sinit>
   14d14:	d9400017 	ldw	r5,0(sp)
   14d18:	2880030f 	ldh	r2,12(r5)
   14d1c:	103ff626 	beq	r2,zero,14cf8 <_fflush_r+0x24>
   14d20:	8009883a 	mov	r4,r16
   14d24:	dfc00217 	ldw	ra,8(sp)
   14d28:	dc000117 	ldw	r16,4(sp)
   14d2c:	dec00304 	addi	sp,sp,12
   14d30:	0014acc1 	jmpi	14acc <__sflush_r>

00014d34 <fflush>:
   14d34:	20001726 	beq	r4,zero,14d94 <fflush+0x60>
   14d38:	00800074 	movhi	r2,1
   14d3c:	200b883a 	mov	r5,r4
   14d40:	111f3417 	ldw	r4,31952(r2)
   14d44:	20000226 	beq	r4,zero,14d50 <fflush+0x1c>
   14d48:	20800e17 	ldw	r2,56(r4)
   14d4c:	10000526 	beq	r2,zero,14d64 <fflush+0x30>
   14d50:	2880030f 	ldh	r2,12(r5)
   14d54:	1000021e 	bne	r2,zero,14d60 <fflush+0x2c>
   14d58:	0005883a 	mov	r2,zero
   14d5c:	f800283a 	ret
   14d60:	0014acc1 	jmpi	14acc <__sflush_r>
   14d64:	defffd04 	addi	sp,sp,-12
   14d68:	d9400115 	stw	r5,4(sp)
   14d6c:	d9000015 	stw	r4,0(sp)
   14d70:	dfc00215 	stw	ra,8(sp)
   14d74:	00150fc0 	call	150fc <__sinit>
   14d78:	d9400117 	ldw	r5,4(sp)
   14d7c:	d9000017 	ldw	r4,0(sp)
   14d80:	2880030f 	ldh	r2,12(r5)
   14d84:	10000826 	beq	r2,zero,14da8 <fflush+0x74>
   14d88:	dfc00217 	ldw	ra,8(sp)
   14d8c:	dec00304 	addi	sp,sp,12
   14d90:	0014acc1 	jmpi	14acc <__sflush_r>
   14d94:	00800074 	movhi	r2,1
   14d98:	111f3317 	ldw	r4,31948(r2)
   14d9c:	01400074 	movhi	r5,1
   14da0:	29533504 	addi	r5,r5,19668
   14da4:	00151dc1 	jmpi	151dc <_fwalk_reent>
   14da8:	0005883a 	mov	r2,zero
   14dac:	dfc00217 	ldw	ra,8(sp)
   14db0:	dec00304 	addi	sp,sp,12
   14db4:	f800283a 	ret

00014db8 <__fp_lock>:
   14db8:	0005883a 	mov	r2,zero
   14dbc:	f800283a 	ret

00014dc0 <_cleanup_r>:
   14dc0:	01400074 	movhi	r5,1
   14dc4:	2955fb04 	addi	r5,r5,22508
   14dc8:	00151dc1 	jmpi	151dc <_fwalk_reent>

00014dcc <__fp_unlock>:
   14dcc:	0005883a 	mov	r2,zero
   14dd0:	f800283a 	ret

00014dd4 <__sinit.part.0>:
   14dd4:	00c00074 	movhi	r3,1
   14dd8:	20800117 	ldw	r2,4(r4)
   14ddc:	18d37004 	addi	r3,r3,19904
   14de0:	20c00f15 	stw	r3,60(r4)
   14de4:	2140bb04 	addi	r5,r4,748
   14de8:	00c000c4 	movi	r3,3
   14dec:	20c0b915 	stw	r3,740(r4)
   14df0:	2140ba15 	stw	r5,744(r4)
   14df4:	2000b815 	stw	zero,736(r4)
   14df8:	10001705 	stb	zero,92(r2)
   14dfc:	10001745 	stb	zero,93(r2)
   14e00:	10001785 	stb	zero,94(r2)
   14e04:	100017c5 	stb	zero,95(r2)
   14e08:	10001805 	stb	zero,96(r2)
   14e0c:	10001845 	stb	zero,97(r2)
   14e10:	10001885 	stb	zero,98(r2)
   14e14:	100018c5 	stb	zero,99(r2)
   14e18:	00c00104 	movi	r3,4
   14e1c:	10c00315 	stw	r3,12(r2)
   14e20:	02000074 	movhi	r8,1
   14e24:	20c00217 	ldw	r3,8(r4)
   14e28:	01c00074 	movhi	r7,1
   14e2c:	01800074 	movhi	r6,1
   14e30:	01400074 	movhi	r5,1
   14e34:	42157c04 	addi	r8,r8,22000
   14e38:	39d59304 	addi	r7,r7,22092
   14e3c:	3195b304 	addi	r6,r6,22220
   14e40:	2955ca04 	addi	r5,r5,22312
   14e44:	02400074 	movhi	r9,1
   14e48:	10000015 	stw	zero,0(r2)
   14e4c:	10000115 	stw	zero,4(r2)
   14e50:	10000215 	stw	zero,8(r2)
   14e54:	10001915 	stw	zero,100(r2)
   14e58:	10000415 	stw	zero,16(r2)
   14e5c:	10000515 	stw	zero,20(r2)
   14e60:	10000615 	stw	zero,24(r2)
   14e64:	10800715 	stw	r2,28(r2)
   14e68:	12000815 	stw	r8,32(r2)
   14e6c:	11c00915 	stw	r7,36(r2)
   14e70:	11800a15 	stw	r6,40(r2)
   14e74:	11400b15 	stw	r5,44(r2)
   14e78:	4a400284 	addi	r9,r9,10
   14e7c:	1a400315 	stw	r9,12(r3)
   14e80:	18000015 	stw	zero,0(r3)
   14e84:	18000115 	stw	zero,4(r3)
   14e88:	18000215 	stw	zero,8(r3)
   14e8c:	18001915 	stw	zero,100(r3)
   14e90:	18000415 	stw	zero,16(r3)
   14e94:	18001705 	stb	zero,92(r3)
   14e98:	18001745 	stb	zero,93(r3)
   14e9c:	18001785 	stb	zero,94(r3)
   14ea0:	180017c5 	stb	zero,95(r3)
   14ea4:	18001805 	stb	zero,96(r3)
   14ea8:	18001845 	stb	zero,97(r3)
   14eac:	18001885 	stb	zero,98(r3)
   14eb0:	180018c5 	stb	zero,99(r3)
   14eb4:	20800317 	ldw	r2,12(r4)
   14eb8:	024000b4 	movhi	r9,2
   14ebc:	18000515 	stw	zero,20(r3)
   14ec0:	18000615 	stw	zero,24(r3)
   14ec4:	18c00715 	stw	r3,28(r3)
   14ec8:	1a000815 	stw	r8,32(r3)
   14ecc:	19c00915 	stw	r7,36(r3)
   14ed0:	19800a15 	stw	r6,40(r3)
   14ed4:	19400b15 	stw	r5,44(r3)
   14ed8:	4a400484 	addi	r9,r9,18
   14edc:	10000015 	stw	zero,0(r2)
   14ee0:	10000115 	stw	zero,4(r2)
   14ee4:	10000215 	stw	zero,8(r2)
   14ee8:	10001915 	stw	zero,100(r2)
   14eec:	12400315 	stw	r9,12(r2)
   14ef0:	10000415 	stw	zero,16(r2)
   14ef4:	10000515 	stw	zero,20(r2)
   14ef8:	10000615 	stw	zero,24(r2)
   14efc:	10001705 	stb	zero,92(r2)
   14f00:	10001745 	stb	zero,93(r2)
   14f04:	10001785 	stb	zero,94(r2)
   14f08:	100017c5 	stb	zero,95(r2)
   14f0c:	10001805 	stb	zero,96(r2)
   14f10:	10001845 	stb	zero,97(r2)
   14f14:	10001885 	stb	zero,98(r2)
   14f18:	100018c5 	stb	zero,99(r2)
   14f1c:	10800715 	stw	r2,28(r2)
   14f20:	12000815 	stw	r8,32(r2)
   14f24:	11c00915 	stw	r7,36(r2)
   14f28:	11800a15 	stw	r6,40(r2)
   14f2c:	11400b15 	stw	r5,44(r2)
   14f30:	00800044 	movi	r2,1
   14f34:	20800e15 	stw	r2,56(r4)
   14f38:	f800283a 	ret

00014f3c <__sfmoreglue>:
   14f3c:	defffc04 	addi	sp,sp,-16
   14f40:	dc800215 	stw	r18,8(sp)
   14f44:	2825883a 	mov	r18,r5
   14f48:	dc000015 	stw	r16,0(sp)
   14f4c:	01401a04 	movi	r5,104
   14f50:	2021883a 	mov	r16,r4
   14f54:	913fffc4 	addi	r4,r18,-1
   14f58:	dfc00315 	stw	ra,12(sp)
   14f5c:	dc400115 	stw	r17,4(sp)
   14f60:	0010d080 	call	10d08 <__mulsi3>
   14f64:	8009883a 	mov	r4,r16
   14f68:	11401d04 	addi	r5,r2,116
   14f6c:	1023883a 	mov	r17,r2
   14f70:	001122c0 	call	1122c <_malloc_r>
   14f74:	1021883a 	mov	r16,r2
   14f78:	10000726 	beq	r2,zero,14f98 <__sfmoreglue+0x5c>
   14f7c:	11000304 	addi	r4,r2,12
   14f80:	10000015 	stw	zero,0(r2)
   14f84:	14800115 	stw	r18,4(r2)
   14f88:	11000215 	stw	r4,8(r2)
   14f8c:	89801a04 	addi	r6,r17,104
   14f90:	000b883a 	mov	r5,zero
   14f94:	00154b00 	call	154b0 <memset>
   14f98:	8005883a 	mov	r2,r16
   14f9c:	dfc00317 	ldw	ra,12(sp)
   14fa0:	dc800217 	ldw	r18,8(sp)
   14fa4:	dc400117 	ldw	r17,4(sp)
   14fa8:	dc000017 	ldw	r16,0(sp)
   14fac:	dec00404 	addi	sp,sp,16
   14fb0:	f800283a 	ret

00014fb4 <__sfp>:
   14fb4:	defffc04 	addi	sp,sp,-16
   14fb8:	00800074 	movhi	r2,1
   14fbc:	dc400115 	stw	r17,4(sp)
   14fc0:	145f3317 	ldw	r17,31948(r2)
   14fc4:	dc800215 	stw	r18,8(sp)
   14fc8:	dfc00315 	stw	ra,12(sp)
   14fcc:	88800e17 	ldw	r2,56(r17)
   14fd0:	dc000015 	stw	r16,0(sp)
   14fd4:	2025883a 	mov	r18,r4
   14fd8:	10002d26 	beq	r2,zero,15090 <__sfp+0xdc>
   14fdc:	8c40b804 	addi	r17,r17,736
   14fe0:	88800117 	ldw	r2,4(r17)
   14fe4:	8c000217 	ldw	r16,8(r17)
   14fe8:	10bfffc4 	addi	r2,r2,-1
   14fec:	1000030e 	bge	r2,zero,14ffc <__sfp+0x48>
   14ff0:	00002306 	br	15080 <__sfp+0xcc>
   14ff4:	84001a04 	addi	r16,r16,104
   14ff8:	28002126 	beq	r5,zero,15080 <__sfp+0xcc>
   14ffc:	80c0030f 	ldh	r3,12(r16)
   15000:	10bfffc4 	addi	r2,r2,-1
   15004:	117fffd8 	cmpnei	r5,r2,-1
   15008:	183ffa1e 	bne	r3,zero,14ff4 <__sfp+0x40>
   1500c:	00bffff4 	movhi	r2,65535
   15010:	10800044 	addi	r2,r2,1
   15014:	80800315 	stw	r2,12(r16)
   15018:	80001915 	stw	zero,100(r16)
   1501c:	80000015 	stw	zero,0(r16)
   15020:	80000215 	stw	zero,8(r16)
   15024:	80000115 	stw	zero,4(r16)
   15028:	80000415 	stw	zero,16(r16)
   1502c:	80000515 	stw	zero,20(r16)
   15030:	80000615 	stw	zero,24(r16)
   15034:	80001705 	stb	zero,92(r16)
   15038:	80001745 	stb	zero,93(r16)
   1503c:	80001785 	stb	zero,94(r16)
   15040:	800017c5 	stb	zero,95(r16)
   15044:	80001805 	stb	zero,96(r16)
   15048:	80001845 	stb	zero,97(r16)
   1504c:	80001885 	stb	zero,98(r16)
   15050:	800018c5 	stb	zero,99(r16)
   15054:	80000c15 	stw	zero,48(r16)
   15058:	80000d15 	stw	zero,52(r16)
   1505c:	80001115 	stw	zero,68(r16)
   15060:	80001215 	stw	zero,72(r16)
   15064:	8005883a 	mov	r2,r16
   15068:	dfc00317 	ldw	ra,12(sp)
   1506c:	dc800217 	ldw	r18,8(sp)
   15070:	dc400117 	ldw	r17,4(sp)
   15074:	dc000017 	ldw	r16,0(sp)
   15078:	dec00404 	addi	sp,sp,16
   1507c:	f800283a 	ret
   15080:	8c000017 	ldw	r16,0(r17)
   15084:	80000526 	beq	r16,zero,1509c <__sfp+0xe8>
   15088:	8023883a 	mov	r17,r16
   1508c:	003fd406 	br	14fe0 <__sfp+0x2c>
   15090:	8809883a 	mov	r4,r17
   15094:	0014dd40 	call	14dd4 <__sinit.part.0>
   15098:	003fd006 	br	14fdc <__sfp+0x28>
   1509c:	01406b04 	movi	r5,428
   150a0:	9009883a 	mov	r4,r18
   150a4:	001122c0 	call	1122c <_malloc_r>
   150a8:	1021883a 	mov	r16,r2
   150ac:	10000a26 	beq	r2,zero,150d8 <__sfp+0x124>
   150b0:	10000015 	stw	zero,0(r2)
   150b4:	11000304 	addi	r4,r2,12
   150b8:	00800104 	movi	r2,4
   150bc:	80800115 	stw	r2,4(r16)
   150c0:	81000215 	stw	r4,8(r16)
   150c4:	01806804 	movi	r6,416
   150c8:	000b883a 	mov	r5,zero
   150cc:	00154b00 	call	154b0 <memset>
   150d0:	8c000015 	stw	r16,0(r17)
   150d4:	003fec06 	br	15088 <__sfp+0xd4>
   150d8:	88000015 	stw	zero,0(r17)
   150dc:	00800304 	movi	r2,12
   150e0:	90800015 	stw	r2,0(r18)
   150e4:	003fdf06 	br	15064 <__sfp+0xb0>

000150e8 <_cleanup>:
   150e8:	00800074 	movhi	r2,1
   150ec:	111f3317 	ldw	r4,31948(r2)
   150f0:	01400074 	movhi	r5,1
   150f4:	2955fb04 	addi	r5,r5,22508
   150f8:	00151dc1 	jmpi	151dc <_fwalk_reent>

000150fc <__sinit>:
   150fc:	20800e17 	ldw	r2,56(r4)
   15100:	10000126 	beq	r2,zero,15108 <__sinit+0xc>
   15104:	f800283a 	ret
   15108:	0014dd41 	jmpi	14dd4 <__sinit.part.0>

0001510c <__sfp_lock_acquire>:
   1510c:	f800283a 	ret

00015110 <__sfp_lock_release>:
   15110:	f800283a 	ret

00015114 <__sinit_lock_acquire>:
   15114:	f800283a 	ret

00015118 <__sinit_lock_release>:
   15118:	f800283a 	ret

0001511c <__fp_lock_all>:
   1511c:	00800074 	movhi	r2,1
   15120:	111f3417 	ldw	r4,31952(r2)
   15124:	01400074 	movhi	r5,1
   15128:	29536e04 	addi	r5,r5,19896
   1512c:	00151441 	jmpi	15144 <_fwalk>

00015130 <__fp_unlock_all>:
   15130:	00800074 	movhi	r2,1
   15134:	111f3417 	ldw	r4,31952(r2)
   15138:	01400074 	movhi	r5,1
   1513c:	29537304 	addi	r5,r5,19916
   15140:	00151441 	jmpi	15144 <_fwalk>

00015144 <_fwalk>:
   15144:	defffa04 	addi	sp,sp,-24
   15148:	dd000415 	stw	r20,16(sp)
   1514c:	dcc00315 	stw	r19,12(sp)
   15150:	dc800215 	stw	r18,8(sp)
   15154:	dfc00515 	stw	ra,20(sp)
   15158:	dc400115 	stw	r17,4(sp)
   1515c:	dc000015 	stw	r16,0(sp)
   15160:	2827883a 	mov	r19,r5
   15164:	2480b804 	addi	r18,r4,736
   15168:	0029883a 	mov	r20,zero
   1516c:	94400117 	ldw	r17,4(r18)
   15170:	94000217 	ldw	r16,8(r18)
   15174:	8c7fffc4 	addi	r17,r17,-1
   15178:	88000d16 	blt	r17,zero,151b0 <_fwalk+0x6c>
   1517c:	8080030b 	ldhu	r2,12(r16)
   15180:	8c7fffc4 	addi	r17,r17,-1
   15184:	108000b0 	cmpltui	r2,r2,2
   15188:	1000061e 	bne	r2,zero,151a4 <_fwalk+0x60>
   1518c:	8080038f 	ldh	r2,14(r16)
   15190:	8009883a 	mov	r4,r16
   15194:	10bfffe0 	cmpeqi	r2,r2,-1
   15198:	1000021e 	bne	r2,zero,151a4 <_fwalk+0x60>
   1519c:	983ee83a 	callr	r19
   151a0:	a0a8b03a 	or	r20,r20,r2
   151a4:	88bfffd8 	cmpnei	r2,r17,-1
   151a8:	84001a04 	addi	r16,r16,104
   151ac:	103ff31e 	bne	r2,zero,1517c <_fwalk+0x38>
   151b0:	94800017 	ldw	r18,0(r18)
   151b4:	903fed1e 	bne	r18,zero,1516c <_fwalk+0x28>
   151b8:	a005883a 	mov	r2,r20
   151bc:	dfc00517 	ldw	ra,20(sp)
   151c0:	dd000417 	ldw	r20,16(sp)
   151c4:	dcc00317 	ldw	r19,12(sp)
   151c8:	dc800217 	ldw	r18,8(sp)
   151cc:	dc400117 	ldw	r17,4(sp)
   151d0:	dc000017 	ldw	r16,0(sp)
   151d4:	dec00604 	addi	sp,sp,24
   151d8:	f800283a 	ret

000151dc <_fwalk_reent>:
   151dc:	defff904 	addi	sp,sp,-28
   151e0:	dd400515 	stw	r21,20(sp)
   151e4:	dd000415 	stw	r20,16(sp)
   151e8:	dcc00315 	stw	r19,12(sp)
   151ec:	dc800215 	stw	r18,8(sp)
   151f0:	dfc00615 	stw	ra,24(sp)
   151f4:	dc400115 	stw	r17,4(sp)
   151f8:	dc000015 	stw	r16,0(sp)
   151fc:	2025883a 	mov	r18,r4
   15200:	2829883a 	mov	r20,r5
   15204:	24c0b804 	addi	r19,r4,736
   15208:	002b883a 	mov	r21,zero
   1520c:	9c400117 	ldw	r17,4(r19)
   15210:	9c000217 	ldw	r16,8(r19)
   15214:	8c7fffc4 	addi	r17,r17,-1
   15218:	88000e16 	blt	r17,zero,15254 <_fwalk_reent+0x78>
   1521c:	8080030b 	ldhu	r2,12(r16)
   15220:	8c7fffc4 	addi	r17,r17,-1
   15224:	108000b0 	cmpltui	r2,r2,2
   15228:	1000071e 	bne	r2,zero,15248 <_fwalk_reent+0x6c>
   1522c:	8080038f 	ldh	r2,14(r16)
   15230:	800b883a 	mov	r5,r16
   15234:	9009883a 	mov	r4,r18
   15238:	10bfffe0 	cmpeqi	r2,r2,-1
   1523c:	1000021e 	bne	r2,zero,15248 <_fwalk_reent+0x6c>
   15240:	a03ee83a 	callr	r20
   15244:	a8aab03a 	or	r21,r21,r2
   15248:	88bfffd8 	cmpnei	r2,r17,-1
   1524c:	84001a04 	addi	r16,r16,104
   15250:	103ff21e 	bne	r2,zero,1521c <_fwalk_reent+0x40>
   15254:	9cc00017 	ldw	r19,0(r19)
   15258:	983fec1e 	bne	r19,zero,1520c <_fwalk_reent+0x30>
   1525c:	a805883a 	mov	r2,r21
   15260:	dfc00617 	ldw	ra,24(sp)
   15264:	dd400517 	ldw	r21,20(sp)
   15268:	dd000417 	ldw	r20,16(sp)
   1526c:	dcc00317 	ldw	r19,12(sp)
   15270:	dc800217 	ldw	r18,8(sp)
   15274:	dc400117 	ldw	r17,4(sp)
   15278:	dc000017 	ldw	r16,0(sp)
   1527c:	dec00704 	addi	sp,sp,28
   15280:	f800283a 	ret

00015284 <__smakebuf_r>:
   15284:	2880030b 	ldhu	r2,12(r5)
   15288:	deffe804 	addi	sp,sp,-96
   1528c:	dc001215 	stw	r16,72(sp)
   15290:	dfc01715 	stw	ra,92(sp)
   15294:	dd001615 	stw	r20,88(sp)
   15298:	dcc01515 	stw	r19,84(sp)
   1529c:	dc801415 	stw	r18,80(sp)
   152a0:	dc401315 	stw	r17,76(sp)
   152a4:	10c0008c 	andi	r3,r2,2
   152a8:	2821883a 	mov	r16,r5
   152ac:	18000d26 	beq	r3,zero,152e4 <__smakebuf_r+0x60>
   152b0:	288010c4 	addi	r2,r5,67
   152b4:	28800015 	stw	r2,0(r5)
   152b8:	28800415 	stw	r2,16(r5)
   152bc:	00800044 	movi	r2,1
   152c0:	28800515 	stw	r2,20(r5)
   152c4:	dfc01717 	ldw	ra,92(sp)
   152c8:	dd001617 	ldw	r20,88(sp)
   152cc:	dcc01517 	ldw	r19,84(sp)
   152d0:	dc801417 	ldw	r18,80(sp)
   152d4:	dc401317 	ldw	r17,76(sp)
   152d8:	dc001217 	ldw	r16,72(sp)
   152dc:	dec01804 	addi	sp,sp,96
   152e0:	f800283a 	ret
   152e4:	2940038f 	ldh	r5,14(r5)
   152e8:	2023883a 	mov	r17,r4
   152ec:	28002816 	blt	r5,zero,15390 <__smakebuf_r+0x10c>
   152f0:	d80d883a 	mov	r6,sp
   152f4:	00158f40 	call	158f4 <_fstat_r>
   152f8:	10002416 	blt	r2,zero,1538c <__smakebuf_r+0x108>
   152fc:	d8800117 	ldw	r2,4(sp)
   15300:	10bc000c 	andi	r2,r2,61440
   15304:	10880018 	cmpnei	r2,r2,8192
   15308:	1000421e 	bne	r2,zero,15414 <__smakebuf_r+0x190>
   1530c:	8140038f 	ldh	r5,14(r16)
   15310:	8809883a 	mov	r4,r17
   15314:	00159540 	call	15954 <_isatty_r>
   15318:	10000826 	beq	r2,zero,1533c <__smakebuf_r+0xb8>
   1531c:	8080030b 	ldhu	r2,12(r16)
   15320:	80c010c4 	addi	r3,r16,67
   15324:	80c00015 	stw	r3,0(r16)
   15328:	10800054 	ori	r2,r2,1
   1532c:	8080030d 	sth	r2,12(r16)
   15330:	00800044 	movi	r2,1
   15334:	80c00415 	stw	r3,16(r16)
   15338:	80800515 	stw	r2,20(r16)
   1533c:	04c00044 	movi	r19,1
   15340:	05010004 	movi	r20,1024
   15344:	04820004 	movi	r18,2048
   15348:	a00b883a 	mov	r5,r20
   1534c:	8809883a 	mov	r4,r17
   15350:	001122c0 	call	1122c <_malloc_r>
   15354:	10001726 	beq	r2,zero,153b4 <__smakebuf_r+0x130>
   15358:	80c0030b 	ldhu	r3,12(r16)
   1535c:	01000074 	movhi	r4,1
   15360:	21137004 	addi	r4,r4,19904
   15364:	89000f15 	stw	r4,60(r17)
   15368:	18c02014 	ori	r3,r3,128
   1536c:	80c0030d 	sth	r3,12(r16)
   15370:	80800015 	stw	r2,0(r16)
   15374:	80800415 	stw	r2,16(r16)
   15378:	85000515 	stw	r20,20(r16)
   1537c:	98001d1e 	bne	r19,zero,153f4 <__smakebuf_r+0x170>
   15380:	90e4b03a 	or	r18,r18,r3
   15384:	8480030d 	sth	r18,12(r16)
   15388:	003fce06 	br	152c4 <__smakebuf_r+0x40>
   1538c:	8080030b 	ldhu	r2,12(r16)
   15390:	1080200c 	andi	r2,r2,128
   15394:	0027883a 	mov	r19,zero
   15398:	10001326 	beq	r2,zero,153e8 <__smakebuf_r+0x164>
   1539c:	05001004 	movi	r20,64
   153a0:	a00b883a 	mov	r5,r20
   153a4:	8809883a 	mov	r4,r17
   153a8:	0025883a 	mov	r18,zero
   153ac:	001122c0 	call	1122c <_malloc_r>
   153b0:	103fe91e 	bne	r2,zero,15358 <__smakebuf_r+0xd4>
   153b4:	8080030b 	ldhu	r2,12(r16)
   153b8:	10c0800c 	andi	r3,r2,512
   153bc:	183fc11e 	bne	r3,zero,152c4 <__smakebuf_r+0x40>
   153c0:	00ffff04 	movi	r3,-4
   153c4:	10c4703a 	and	r2,r2,r3
   153c8:	10800094 	ori	r2,r2,2
   153cc:	80c010c4 	addi	r3,r16,67
   153d0:	8080030d 	sth	r2,12(r16)
   153d4:	00800044 	movi	r2,1
   153d8:	80c00015 	stw	r3,0(r16)
   153dc:	80c00415 	stw	r3,16(r16)
   153e0:	80800515 	stw	r2,20(r16)
   153e4:	003fb706 	br	152c4 <__smakebuf_r+0x40>
   153e8:	05010004 	movi	r20,1024
   153ec:	0025883a 	mov	r18,zero
   153f0:	003fd506 	br	15348 <__smakebuf_r+0xc4>
   153f4:	8140038f 	ldh	r5,14(r16)
   153f8:	8809883a 	mov	r4,r17
   153fc:	00159540 	call	15954 <_isatty_r>
   15400:	80c0030b 	ldhu	r3,12(r16)
   15404:	103fde26 	beq	r2,zero,15380 <__smakebuf_r+0xfc>
   15408:	18ffff0c 	andi	r3,r3,65532
   1540c:	18c00054 	ori	r3,r3,1
   15410:	003fdb06 	br	15380 <__smakebuf_r+0xfc>
   15414:	0027883a 	mov	r19,zero
   15418:	05010004 	movi	r20,1024
   1541c:	04820004 	movi	r18,2048
   15420:	003fc906 	br	15348 <__smakebuf_r+0xc4>

00015424 <__swhatbuf_r>:
   15424:	deffea04 	addi	sp,sp,-88
   15428:	dc001215 	stw	r16,72(sp)
   1542c:	2821883a 	mov	r16,r5
   15430:	2940038f 	ldh	r5,14(r5)
   15434:	dc801415 	stw	r18,80(sp)
   15438:	dc401315 	stw	r17,76(sp)
   1543c:	dfc01515 	stw	ra,84(sp)
   15440:	3023883a 	mov	r17,r6
   15444:	3825883a 	mov	r18,r7
   15448:	28001016 	blt	r5,zero,1548c <__swhatbuf_r+0x68>
   1544c:	d80d883a 	mov	r6,sp
   15450:	00158f40 	call	158f4 <_fstat_r>
   15454:	10000d16 	blt	r2,zero,1548c <__swhatbuf_r+0x68>
   15458:	d8c00117 	ldw	r3,4(sp)
   1545c:	01010004 	movi	r4,1024
   15460:	00820004 	movi	r2,2048
   15464:	18fc000c 	andi	r3,r3,61440
   15468:	18c80020 	cmpeqi	r3,r3,8192
   1546c:	90c00015 	stw	r3,0(r18)
   15470:	89000015 	stw	r4,0(r17)
   15474:	dfc01517 	ldw	ra,84(sp)
   15478:	dc801417 	ldw	r18,80(sp)
   1547c:	dc401317 	ldw	r17,76(sp)
   15480:	dc001217 	ldw	r16,72(sp)
   15484:	dec01604 	addi	sp,sp,88
   15488:	f800283a 	ret
   1548c:	8080030b 	ldhu	r2,12(r16)
   15490:	0007883a 	mov	r3,zero
   15494:	1080200c 	andi	r2,r2,128
   15498:	10000326 	beq	r2,zero,154a8 <__swhatbuf_r+0x84>
   1549c:	01001004 	movi	r4,64
   154a0:	0005883a 	mov	r2,zero
   154a4:	003ff106 	br	1546c <__swhatbuf_r+0x48>
   154a8:	01010004 	movi	r4,1024
   154ac:	003fef06 	br	1546c <__swhatbuf_r+0x48>

000154b0 <memset>:
   154b0:	defffb04 	addi	sp,sp,-20
   154b4:	dc800215 	stw	r18,8(sp)
   154b8:	dc400115 	stw	r17,4(sp)
   154bc:	dfc00415 	stw	ra,16(sp)
   154c0:	dcc00315 	stw	r19,12(sp)
   154c4:	dc000015 	stw	r16,0(sp)
   154c8:	208000cc 	andi	r2,r4,3
   154cc:	2023883a 	mov	r17,r4
   154d0:	2825883a 	mov	r18,r5
   154d4:	10004026 	beq	r2,zero,155d8 <memset+0x128>
   154d8:	34ffffc4 	addi	r19,r6,-1
   154dc:	30003326 	beq	r6,zero,155ac <memset+0xfc>
   154e0:	280f883a 	mov	r7,r5
   154e4:	2021883a 	mov	r16,r4
   154e8:	00000306 	br	154f8 <memset+0x48>
   154ec:	9cffffc4 	addi	r19,r19,-1
   154f0:	99bfffe0 	cmpeqi	r6,r19,-1
   154f4:	30002d1e 	bne	r6,zero,155ac <memset+0xfc>
   154f8:	84000044 	addi	r16,r16,1
   154fc:	818000cc 	andi	r6,r16,3
   15500:	81ffffc5 	stb	r7,-1(r16)
   15504:	303ff91e 	bne	r6,zero,154ec <memset+0x3c>
   15508:	98800128 	cmpgeui	r2,r19,4
   1550c:	10002126 	beq	r2,zero,15594 <memset+0xe4>
   15510:	01404074 	movhi	r5,257
   15514:	29404044 	addi	r5,r5,257
   15518:	91003fcc 	andi	r4,r18,255
   1551c:	0010d080 	call	10d08 <__mulsi3>
   15520:	98c00430 	cmpltui	r3,r19,16
   15524:	18002f1e 	bne	r3,zero,155e4 <memset+0x134>
   15528:	99bffc04 	addi	r6,r19,-16
   1552c:	300cd13a 	srli	r6,r6,4
   15530:	31800044 	addi	r6,r6,1
   15534:	300c913a 	slli	r6,r6,4
   15538:	818d883a 	add	r6,r16,r6
   1553c:	80800015 	stw	r2,0(r16)
   15540:	80800115 	stw	r2,4(r16)
   15544:	80800215 	stw	r2,8(r16)
   15548:	80800315 	stw	r2,12(r16)
   1554c:	84000404 	addi	r16,r16,16
   15550:	81bffa1e 	bne	r16,r6,1553c <memset+0x8c>
   15554:	9900030c 	andi	r4,r19,12
   15558:	98c003cc 	andi	r3,r19,15
   1555c:	20001b26 	beq	r4,zero,155cc <memset+0x11c>
   15560:	3009883a 	mov	r4,r6
   15564:	30cb883a 	add	r5,r6,r3
   15568:	21000104 	addi	r4,r4,4
   1556c:	290fc83a 	sub	r7,r5,r4
   15570:	39c00128 	cmpgeui	r7,r7,4
   15574:	20bfff15 	stw	r2,-4(r4)
   15578:	383ffb1e 	bne	r7,zero,15568 <memset+0xb8>
   1557c:	1c3fff04 	addi	r16,r3,-4
   15580:	8020d0ba 	srli	r16,r16,2
   15584:	1cc000cc 	andi	r19,r3,3
   15588:	84000044 	addi	r16,r16,1
   1558c:	802090ba 	slli	r16,r16,2
   15590:	3421883a 	add	r16,r6,r16
   15594:	98000526 	beq	r19,zero,155ac <memset+0xfc>
   15598:	900b883a 	mov	r5,r18
   1559c:	84c7883a 	add	r3,r16,r19
   155a0:	84000044 	addi	r16,r16,1
   155a4:	817fffc5 	stb	r5,-1(r16)
   155a8:	1c3ffd1e 	bne	r3,r16,155a0 <memset+0xf0>
   155ac:	8805883a 	mov	r2,r17
   155b0:	dfc00417 	ldw	ra,16(sp)
   155b4:	dcc00317 	ldw	r19,12(sp)
   155b8:	dc800217 	ldw	r18,8(sp)
   155bc:	dc400117 	ldw	r17,4(sp)
   155c0:	dc000017 	ldw	r16,0(sp)
   155c4:	dec00504 	addi	sp,sp,20
   155c8:	f800283a 	ret
   155cc:	1827883a 	mov	r19,r3
   155d0:	983ff11e 	bne	r19,zero,15598 <memset+0xe8>
   155d4:	003ff506 	br	155ac <memset+0xfc>
   155d8:	2021883a 	mov	r16,r4
   155dc:	3027883a 	mov	r19,r6
   155e0:	003fc906 	br	15508 <memset+0x58>
   155e4:	800d883a 	mov	r6,r16
   155e8:	9807883a 	mov	r3,r19
   155ec:	003fdc06 	br	15560 <memset+0xb0>

000155f0 <__sread>:
   155f0:	defffe04 	addi	sp,sp,-8
   155f4:	dc000015 	stw	r16,0(sp)
   155f8:	2821883a 	mov	r16,r5
   155fc:	2940038f 	ldh	r5,14(r5)
   15600:	dfc00115 	stw	ra,4(sp)
   15604:	0015a100 	call	15a10 <_read_r>
   15608:	10000716 	blt	r2,zero,15628 <__sread+0x38>
   1560c:	80c01417 	ldw	r3,80(r16)
   15610:	1887883a 	add	r3,r3,r2
   15614:	80c01415 	stw	r3,80(r16)
   15618:	dfc00117 	ldw	ra,4(sp)
   1561c:	dc000017 	ldw	r16,0(sp)
   15620:	dec00204 	addi	sp,sp,8
   15624:	f800283a 	ret
   15628:	80c0030b 	ldhu	r3,12(r16)
   1562c:	18fbffcc 	andi	r3,r3,61439
   15630:	80c0030d 	sth	r3,12(r16)
   15634:	dfc00117 	ldw	ra,4(sp)
   15638:	dc000017 	ldw	r16,0(sp)
   1563c:	dec00204 	addi	sp,sp,8
   15640:	f800283a 	ret

00015644 <__seofread>:
   15644:	0005883a 	mov	r2,zero
   15648:	f800283a 	ret

0001564c <__swrite>:
   1564c:	2880030b 	ldhu	r2,12(r5)
   15650:	defffb04 	addi	sp,sp,-20
   15654:	dcc00315 	stw	r19,12(sp)
   15658:	dc800215 	stw	r18,8(sp)
   1565c:	dc400115 	stw	r17,4(sp)
   15660:	dc000015 	stw	r16,0(sp)
   15664:	dfc00415 	stw	ra,16(sp)
   15668:	10c0400c 	andi	r3,r2,256
   1566c:	2821883a 	mov	r16,r5
   15670:	2023883a 	mov	r17,r4
   15674:	3025883a 	mov	r18,r6
   15678:	3827883a 	mov	r19,r7
   1567c:	18000d1e 	bne	r3,zero,156b4 <__swrite+0x68>
   15680:	8140038f 	ldh	r5,14(r16)
   15684:	10bbffcc 	andi	r2,r2,61439
   15688:	980f883a 	mov	r7,r19
   1568c:	900d883a 	mov	r6,r18
   15690:	8809883a 	mov	r4,r17
   15694:	8080030d 	sth	r2,12(r16)
   15698:	dfc00417 	ldw	ra,16(sp)
   1569c:	dcc00317 	ldw	r19,12(sp)
   156a0:	dc800217 	ldw	r18,8(sp)
   156a4:	dc400117 	ldw	r17,4(sp)
   156a8:	dc000017 	ldw	r16,0(sp)
   156ac:	dec00504 	addi	sp,sp,20
   156b0:	00157301 	jmpi	15730 <_write_r>
   156b4:	2940038f 	ldh	r5,14(r5)
   156b8:	01c00084 	movi	r7,2
   156bc:	000d883a 	mov	r6,zero
   156c0:	00159ac0 	call	159ac <_lseek_r>
   156c4:	8080030b 	ldhu	r2,12(r16)
   156c8:	003fed06 	br	15680 <__swrite+0x34>

000156cc <__sseek>:
   156cc:	defffe04 	addi	sp,sp,-8
   156d0:	dc000015 	stw	r16,0(sp)
   156d4:	2821883a 	mov	r16,r5
   156d8:	2940038f 	ldh	r5,14(r5)
   156dc:	dfc00115 	stw	ra,4(sp)
   156e0:	00159ac0 	call	159ac <_lseek_r>
   156e4:	10ffffd8 	cmpnei	r3,r2,-1
   156e8:	18000826 	beq	r3,zero,1570c <__sseek+0x40>
   156ec:	80c0030b 	ldhu	r3,12(r16)
   156f0:	80801415 	stw	r2,80(r16)
   156f4:	18c40014 	ori	r3,r3,4096
   156f8:	80c0030d 	sth	r3,12(r16)
   156fc:	dfc00117 	ldw	ra,4(sp)
   15700:	dc000017 	ldw	r16,0(sp)
   15704:	dec00204 	addi	sp,sp,8
   15708:	f800283a 	ret
   1570c:	80c0030b 	ldhu	r3,12(r16)
   15710:	18fbffcc 	andi	r3,r3,61439
   15714:	80c0030d 	sth	r3,12(r16)
   15718:	dfc00117 	ldw	ra,4(sp)
   1571c:	dc000017 	ldw	r16,0(sp)
   15720:	dec00204 	addi	sp,sp,8
   15724:	f800283a 	ret

00015728 <__sclose>:
   15728:	2940038f 	ldh	r5,14(r5)
   1572c:	00157941 	jmpi	15794 <_close_r>

00015730 <_write_r>:
   15730:	2807883a 	mov	r3,r5
   15734:	defffe04 	addi	sp,sp,-8
   15738:	dc000015 	stw	r16,0(sp)
   1573c:	300b883a 	mov	r5,r6
   15740:	008000b4 	movhi	r2,2
   15744:	380d883a 	mov	r6,r7
   15748:	2021883a 	mov	r16,r4
   1574c:	1809883a 	mov	r4,r3
   15750:	dfc00115 	stw	ra,4(sp)
   15754:	1025eb15 	stw	zero,-26708(r2)
   15758:	0015f300 	call	15f30 <write>
   1575c:	10ffffd8 	cmpnei	r3,r2,-1
   15760:	18000426 	beq	r3,zero,15774 <_write_r+0x44>
   15764:	dfc00117 	ldw	ra,4(sp)
   15768:	dc000017 	ldw	r16,0(sp)
   1576c:	dec00204 	addi	sp,sp,8
   15770:	f800283a 	ret
   15774:	00c000b4 	movhi	r3,2
   15778:	18e5eb17 	ldw	r3,-26708(r3)
   1577c:	183ff926 	beq	r3,zero,15764 <_write_r+0x34>
   15780:	80c00015 	stw	r3,0(r16)
   15784:	dfc00117 	ldw	ra,4(sp)
   15788:	dc000017 	ldw	r16,0(sp)
   1578c:	dec00204 	addi	sp,sp,8
   15790:	f800283a 	ret

00015794 <_close_r>:
   15794:	defffe04 	addi	sp,sp,-8
   15798:	dc000015 	stw	r16,0(sp)
   1579c:	008000b4 	movhi	r2,2
   157a0:	2021883a 	mov	r16,r4
   157a4:	2809883a 	mov	r4,r5
   157a8:	dfc00115 	stw	ra,4(sp)
   157ac:	1025eb15 	stw	zero,-26708(r2)
   157b0:	00137680 	call	13768 <close>
   157b4:	10ffffd8 	cmpnei	r3,r2,-1
   157b8:	18000426 	beq	r3,zero,157cc <_close_r+0x38>
   157bc:	dfc00117 	ldw	ra,4(sp)
   157c0:	dc000017 	ldw	r16,0(sp)
   157c4:	dec00204 	addi	sp,sp,8
   157c8:	f800283a 	ret
   157cc:	00c000b4 	movhi	r3,2
   157d0:	18e5eb17 	ldw	r3,-26708(r3)
   157d4:	183ff926 	beq	r3,zero,157bc <_close_r+0x28>
   157d8:	80c00015 	stw	r3,0(r16)
   157dc:	dfc00117 	ldw	ra,4(sp)
   157e0:	dc000017 	ldw	r16,0(sp)
   157e4:	dec00204 	addi	sp,sp,8
   157e8:	f800283a 	ret

000157ec <_fclose_r>:
   157ec:	defffc04 	addi	sp,sp,-16
   157f0:	dfc00315 	stw	ra,12(sp)
   157f4:	dc800215 	stw	r18,8(sp)
   157f8:	dc400115 	stw	r17,4(sp)
   157fc:	dc000015 	stw	r16,0(sp)
   15800:	28000726 	beq	r5,zero,15820 <_fclose_r+0x34>
   15804:	2821883a 	mov	r16,r5
   15808:	2023883a 	mov	r17,r4
   1580c:	20000226 	beq	r4,zero,15818 <_fclose_r+0x2c>
   15810:	20800e17 	ldw	r2,56(r4)
   15814:	10002726 	beq	r2,zero,158b4 <_fclose_r+0xc8>
   15818:	8080030f 	ldh	r2,12(r16)
   1581c:	1000081e 	bne	r2,zero,15840 <_fclose_r+0x54>
   15820:	0025883a 	mov	r18,zero
   15824:	9005883a 	mov	r2,r18
   15828:	dfc00317 	ldw	ra,12(sp)
   1582c:	dc800217 	ldw	r18,8(sp)
   15830:	dc400117 	ldw	r17,4(sp)
   15834:	dc000017 	ldw	r16,0(sp)
   15838:	dec00404 	addi	sp,sp,16
   1583c:	f800283a 	ret
   15840:	800b883a 	mov	r5,r16
   15844:	8809883a 	mov	r4,r17
   15848:	0014acc0 	call	14acc <__sflush_r>
   1584c:	80c00b17 	ldw	r3,44(r16)
   15850:	1025883a 	mov	r18,r2
   15854:	18000426 	beq	r3,zero,15868 <_fclose_r+0x7c>
   15858:	81400717 	ldw	r5,28(r16)
   1585c:	8809883a 	mov	r4,r17
   15860:	183ee83a 	callr	r3
   15864:	10001716 	blt	r2,zero,158c4 <_fclose_r+0xd8>
   15868:	8080030b 	ldhu	r2,12(r16)
   1586c:	1080200c 	andi	r2,r2,128
   15870:	1000181e 	bne	r2,zero,158d4 <_fclose_r+0xe8>
   15874:	81400c17 	ldw	r5,48(r16)
   15878:	28000526 	beq	r5,zero,15890 <_fclose_r+0xa4>
   1587c:	80801004 	addi	r2,r16,64
   15880:	28800226 	beq	r5,r2,1588c <_fclose_r+0xa0>
   15884:	8809883a 	mov	r4,r17
   15888:	0011c5c0 	call	11c5c <_free_r>
   1588c:	80000c15 	stw	zero,48(r16)
   15890:	81401117 	ldw	r5,68(r16)
   15894:	28000326 	beq	r5,zero,158a4 <_fclose_r+0xb8>
   15898:	8809883a 	mov	r4,r17
   1589c:	0011c5c0 	call	11c5c <_free_r>
   158a0:	80001115 	stw	zero,68(r16)
   158a4:	001510c0 	call	1510c <__sfp_lock_acquire>
   158a8:	8000030d 	sth	zero,12(r16)
   158ac:	00151100 	call	15110 <__sfp_lock_release>
   158b0:	003fdc06 	br	15824 <_fclose_r+0x38>
   158b4:	00150fc0 	call	150fc <__sinit>
   158b8:	8080030f 	ldh	r2,12(r16)
   158bc:	103fd826 	beq	r2,zero,15820 <_fclose_r+0x34>
   158c0:	003fdf06 	br	15840 <_fclose_r+0x54>
   158c4:	8080030b 	ldhu	r2,12(r16)
   158c8:	04bfffc4 	movi	r18,-1
   158cc:	1080200c 	andi	r2,r2,128
   158d0:	103fe826 	beq	r2,zero,15874 <_fclose_r+0x88>
   158d4:	81400417 	ldw	r5,16(r16)
   158d8:	8809883a 	mov	r4,r17
   158dc:	0011c5c0 	call	11c5c <_free_r>
   158e0:	003fe406 	br	15874 <_fclose_r+0x88>

000158e4 <fclose>:
   158e4:	00800074 	movhi	r2,1
   158e8:	200b883a 	mov	r5,r4
   158ec:	111f3417 	ldw	r4,31952(r2)
   158f0:	00157ec1 	jmpi	157ec <_fclose_r>

000158f4 <_fstat_r>:
   158f4:	2807883a 	mov	r3,r5
   158f8:	defffe04 	addi	sp,sp,-8
   158fc:	dc000015 	stw	r16,0(sp)
   15900:	008000b4 	movhi	r2,2
   15904:	300b883a 	mov	r5,r6
   15908:	2021883a 	mov	r16,r4
   1590c:	1809883a 	mov	r4,r3
   15910:	dfc00115 	stw	ra,4(sp)
   15914:	1025eb15 	stw	zero,-26708(r2)
   15918:	0015aec0 	call	15aec <fstat>
   1591c:	10ffffd8 	cmpnei	r3,r2,-1
   15920:	18000426 	beq	r3,zero,15934 <_fstat_r+0x40>
   15924:	dfc00117 	ldw	ra,4(sp)
   15928:	dc000017 	ldw	r16,0(sp)
   1592c:	dec00204 	addi	sp,sp,8
   15930:	f800283a 	ret
   15934:	00c000b4 	movhi	r3,2
   15938:	18e5eb17 	ldw	r3,-26708(r3)
   1593c:	183ff926 	beq	r3,zero,15924 <_fstat_r+0x30>
   15940:	80c00015 	stw	r3,0(r16)
   15944:	dfc00117 	ldw	ra,4(sp)
   15948:	dc000017 	ldw	r16,0(sp)
   1594c:	dec00204 	addi	sp,sp,8
   15950:	f800283a 	ret

00015954 <_isatty_r>:
   15954:	defffe04 	addi	sp,sp,-8
   15958:	dc000015 	stw	r16,0(sp)
   1595c:	008000b4 	movhi	r2,2
   15960:	2021883a 	mov	r16,r4
   15964:	2809883a 	mov	r4,r5
   15968:	dfc00115 	stw	ra,4(sp)
   1596c:	1025eb15 	stw	zero,-26708(r2)
   15970:	0015be40 	call	15be4 <isatty>
   15974:	10ffffd8 	cmpnei	r3,r2,-1
   15978:	18000426 	beq	r3,zero,1598c <_isatty_r+0x38>
   1597c:	dfc00117 	ldw	ra,4(sp)
   15980:	dc000017 	ldw	r16,0(sp)
   15984:	dec00204 	addi	sp,sp,8
   15988:	f800283a 	ret
   1598c:	00c000b4 	movhi	r3,2
   15990:	18e5eb17 	ldw	r3,-26708(r3)
   15994:	183ff926 	beq	r3,zero,1597c <_isatty_r+0x28>
   15998:	80c00015 	stw	r3,0(r16)
   1599c:	dfc00117 	ldw	ra,4(sp)
   159a0:	dc000017 	ldw	r16,0(sp)
   159a4:	dec00204 	addi	sp,sp,8
   159a8:	f800283a 	ret

000159ac <_lseek_r>:
   159ac:	2807883a 	mov	r3,r5
   159b0:	defffe04 	addi	sp,sp,-8
   159b4:	dc000015 	stw	r16,0(sp)
   159b8:	300b883a 	mov	r5,r6
   159bc:	008000b4 	movhi	r2,2
   159c0:	380d883a 	mov	r6,r7
   159c4:	2021883a 	mov	r16,r4
   159c8:	1809883a 	mov	r4,r3
   159cc:	dfc00115 	stw	ra,4(sp)
   159d0:	1025eb15 	stw	zero,-26708(r2)
   159d4:	0015cd00 	call	15cd0 <lseek>
   159d8:	10ffffd8 	cmpnei	r3,r2,-1
   159dc:	18000426 	beq	r3,zero,159f0 <_lseek_r+0x44>
   159e0:	dfc00117 	ldw	ra,4(sp)
   159e4:	dc000017 	ldw	r16,0(sp)
   159e8:	dec00204 	addi	sp,sp,8
   159ec:	f800283a 	ret
   159f0:	00c000b4 	movhi	r3,2
   159f4:	18e5eb17 	ldw	r3,-26708(r3)
   159f8:	183ff926 	beq	r3,zero,159e0 <_lseek_r+0x34>
   159fc:	80c00015 	stw	r3,0(r16)
   15a00:	dfc00117 	ldw	ra,4(sp)
   15a04:	dc000017 	ldw	r16,0(sp)
   15a08:	dec00204 	addi	sp,sp,8
   15a0c:	f800283a 	ret

00015a10 <_read_r>:
   15a10:	2807883a 	mov	r3,r5
   15a14:	defffe04 	addi	sp,sp,-8
   15a18:	dc000015 	stw	r16,0(sp)
   15a1c:	300b883a 	mov	r5,r6
   15a20:	008000b4 	movhi	r2,2
   15a24:	380d883a 	mov	r6,r7
   15a28:	2021883a 	mov	r16,r4
   15a2c:	1809883a 	mov	r4,r3
   15a30:	dfc00115 	stw	ra,4(sp)
   15a34:	1025eb15 	stw	zero,-26708(r2)
   15a38:	0015dec0 	call	15dec <read>
   15a3c:	10ffffd8 	cmpnei	r3,r2,-1
   15a40:	18000426 	beq	r3,zero,15a54 <_read_r+0x44>
   15a44:	dfc00117 	ldw	ra,4(sp)
   15a48:	dc000017 	ldw	r16,0(sp)
   15a4c:	dec00204 	addi	sp,sp,8
   15a50:	f800283a 	ret
   15a54:	00c000b4 	movhi	r3,2
   15a58:	18e5eb17 	ldw	r3,-26708(r3)
   15a5c:	183ff926 	beq	r3,zero,15a44 <_read_r+0x34>
   15a60:	80c00015 	stw	r3,0(r16)
   15a64:	dfc00117 	ldw	ra,4(sp)
   15a68:	dc000017 	ldw	r16,0(sp)
   15a6c:	dec00204 	addi	sp,sp,8
   15a70:	f800283a 	ret

00015a74 <_exit>:
 *
 * ALT_EXIT is mapped onto the _exit() system call in alt_syscall.h
 */

void ALT_EXIT (int exit_code)
{
   15a74:	defffd04 	addi	sp,sp,-12
   15a78:	df000215 	stw	fp,8(sp)
   15a7c:	df000204 	addi	fp,sp,8
   15a80:	e13ffe15 	stw	r4,-8(fp)
  ALT_LOG_PRINT_BOOT("[alt_exit.c] Entering _exit() function.\r\n");
  ALT_LOG_PRINT_BOOT("[alt_exit.c] Exit code from main was %d.\r\n",exit_code);
  /* Stop all other threads */

  ALT_LOG_PRINT_BOOT("[alt_exit.c] Calling ALT_OS_STOP().\r\n");
  ALT_OS_STOP();
   15a84:	0001883a 	nop
   15a88:	e0bffe17 	ldw	r2,-8(fp)
   15a8c:	e0bfff15 	stw	r2,-4(fp)
/*
 * Routine called on exit.
 */
static ALT_INLINE ALT_ALWAYS_INLINE void alt_sim_halt(int exit_code)
{
  register int r2 asm ("r2") = exit_code;
   15a90:	e0bfff17 	ldw	r2,-4(fp)
  __asm__ volatile ("\n0:\n\taddi %0,%0, -1\n\tbgt %0,zero,0b" : : "r" (ALT_CPU_FREQ/100) ); /* Delay for >30ms */

  __asm__ volatile ("break 2" : : "r"(r2), "r"(r3) ALT_GMON_DATA );

#else /* !DEBUG_STUB */
  if (r2) {
   15a94:	10000226 	beq	r2,zero,15aa0 <_exit+0x2c>
    ALT_SIM_FAIL();
   15a98:	002af070 	cmpltui	zero,zero,43969
  } else {
    ALT_SIM_PASS();
  }
#endif /* DEBUG_STUB */
}
   15a9c:	00000106 	br	15aa4 <_exit+0x30>
    ALT_SIM_PASS();
   15aa0:	002af0b0 	cmpltui	zero,zero,43970
}
   15aa4:	0001883a 	nop
  ALT_SIM_HALT(exit_code);

  /* spin forever, since there's no where to go back to */

  ALT_LOG_PRINT_BOOT("[alt_exit.c] Spinning forever.\r\n");
  while (1);
   15aa8:	0001883a 	nop
   15aac:	003ffe06 	br	15aa8 <_exit+0x34>

00015ab0 <alt_get_errno>:
{
   15ab0:	defffe04 	addi	sp,sp,-8
   15ab4:	dfc00115 	stw	ra,4(sp)
   15ab8:	df000015 	stw	fp,0(sp)
   15abc:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
   15ac0:	d0a00b17 	ldw	r2,-32724(gp)
   15ac4:	10000326 	beq	r2,zero,15ad4 <alt_get_errno+0x24>
   15ac8:	d0a00b17 	ldw	r2,-32724(gp)
   15acc:	103ee83a 	callr	r2
   15ad0:	00000106 	br	15ad8 <alt_get_errno+0x28>
   15ad4:	d0a6ba04 	addi	r2,gp,-25880
}
   15ad8:	e037883a 	mov	sp,fp
   15adc:	dfc00117 	ldw	ra,4(sp)
   15ae0:	df000017 	ldw	fp,0(sp)
   15ae4:	dec00204 	addi	sp,sp,8
   15ae8:	f800283a 	ret

00015aec <fstat>:
}

#else /* !ALT_USE_DIRECT_DRIVERS */

int ALT_FSTAT (int file, struct stat *st)
{
   15aec:	defffb04 	addi	sp,sp,-20
   15af0:	dfc00415 	stw	ra,16(sp)
   15af4:	df000315 	stw	fp,12(sp)
   15af8:	df000304 	addi	fp,sp,12
   15afc:	e13ffe15 	stw	r4,-8(fp)
   15b00:	e17ffd15 	stw	r5,-12(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
   15b04:	e0bffe17 	ldw	r2,-8(fp)
   15b08:	10000916 	blt	r2,zero,15b30 <fstat+0x44>
   15b0c:	e0fffe17 	ldw	r3,-8(fp)
   15b10:	1805883a 	mov	r2,r3
   15b14:	1085883a 	add	r2,r2,r2
   15b18:	10c5883a 	add	r2,r2,r3
   15b1c:	100490ba 	slli	r2,r2,2
   15b20:	00c00074 	movhi	r3,1
   15b24:	18ded104 	addi	r3,r3,31556
   15b28:	10c5883a 	add	r2,r2,r3
   15b2c:	00000106 	br	15b34 <fstat+0x48>
   15b30:	0005883a 	mov	r2,zero
   15b34:	e0bfff15 	stw	r2,-4(fp)
  
  if (fd)
   15b38:	e0bfff17 	ldw	r2,-4(fp)
   15b3c:	10001026 	beq	r2,zero,15b80 <fstat+0x94>
  {
    /* Call the drivers fstat() function to fill out the "st" structure. */

    if (fd->dev->fstat)
   15b40:	e0bfff17 	ldw	r2,-4(fp)
   15b44:	10800017 	ldw	r2,0(r2)
   15b48:	10800817 	ldw	r2,32(r2)
   15b4c:	10000726 	beq	r2,zero,15b6c <fstat+0x80>
    {
      return fd->dev->fstat(fd, st);
   15b50:	e0bfff17 	ldw	r2,-4(fp)
   15b54:	10800017 	ldw	r2,0(r2)
   15b58:	10800817 	ldw	r2,32(r2)
   15b5c:	e17ffd17 	ldw	r5,-12(fp)
   15b60:	e13fff17 	ldw	r4,-4(fp)
   15b64:	103ee83a 	callr	r2
   15b68:	00000a06 	br	15b94 <fstat+0xa8>
     * device.
     */
 
    else
    {
      st->st_mode = _IFCHR;
   15b6c:	e0bffd17 	ldw	r2,-12(fp)
   15b70:	00c80004 	movi	r3,8192
   15b74:	10c00115 	stw	r3,4(r2)
      return 0;
   15b78:	0005883a 	mov	r2,zero
   15b7c:	00000506 	br	15b94 <fstat+0xa8>
    }
  }
  else
  {
    ALT_ERRNO = EBADFD;
   15b80:	0015ab00 	call	15ab0 <alt_get_errno>
   15b84:	1007883a 	mov	r3,r2
   15b88:	00801444 	movi	r2,81
   15b8c:	18800015 	stw	r2,0(r3)
    return -1;
   15b90:	00bfffc4 	movi	r2,-1
  }
}
   15b94:	e037883a 	mov	sp,fp
   15b98:	dfc00117 	ldw	ra,4(sp)
   15b9c:	df000017 	ldw	fp,0(sp)
   15ba0:	dec00204 	addi	sp,sp,8
   15ba4:	f800283a 	ret

00015ba8 <alt_get_errno>:
{
   15ba8:	defffe04 	addi	sp,sp,-8
   15bac:	dfc00115 	stw	ra,4(sp)
   15bb0:	df000015 	stw	fp,0(sp)
   15bb4:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
   15bb8:	d0a00b17 	ldw	r2,-32724(gp)
   15bbc:	10000326 	beq	r2,zero,15bcc <alt_get_errno+0x24>
   15bc0:	d0a00b17 	ldw	r2,-32724(gp)
   15bc4:	103ee83a 	callr	r2
   15bc8:	00000106 	br	15bd0 <alt_get_errno+0x28>
   15bcc:	d0a6ba04 	addi	r2,gp,-25880
}
   15bd0:	e037883a 	mov	sp,fp
   15bd4:	dfc00117 	ldw	ra,4(sp)
   15bd8:	df000017 	ldw	fp,0(sp)
   15bdc:	dec00204 	addi	sp,sp,8
   15be0:	f800283a 	ret

00015be4 <isatty>:
 *
 * ALT_ISATTY is mapped onto the isatty() system call in alt_syscall.h
 */
 
int ALT_ISATTY (int file)
{
   15be4:	deffea04 	addi	sp,sp,-88
   15be8:	dfc01515 	stw	ra,84(sp)
   15bec:	df001415 	stw	fp,80(sp)
   15bf0:	df001404 	addi	fp,sp,80
   15bf4:	e13fec15 	stw	r4,-80(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
   15bf8:	e0bfec17 	ldw	r2,-80(fp)
   15bfc:	10000916 	blt	r2,zero,15c24 <isatty+0x40>
   15c00:	e0ffec17 	ldw	r3,-80(fp)
   15c04:	1805883a 	mov	r2,r3
   15c08:	1085883a 	add	r2,r2,r2
   15c0c:	10c5883a 	add	r2,r2,r3
   15c10:	100490ba 	slli	r2,r2,2
   15c14:	00c00074 	movhi	r3,1
   15c18:	18ded104 	addi	r3,r3,31556
   15c1c:	10c5883a 	add	r2,r2,r3
   15c20:	00000106 	br	15c28 <isatty+0x44>
   15c24:	0005883a 	mov	r2,zero
   15c28:	e0bfff15 	stw	r2,-4(fp)
  
  if (fd)
   15c2c:	e0bfff17 	ldw	r2,-4(fp)
   15c30:	10000e26 	beq	r2,zero,15c6c <isatty+0x88>
    /*
     * If a device driver does not provide an fstat() function, then it is 
     * treated as a terminal device by default.
     */

    if (!fd->dev->fstat)
   15c34:	e0bfff17 	ldw	r2,-4(fp)
   15c38:	10800017 	ldw	r2,0(r2)
   15c3c:	10800817 	ldw	r2,32(r2)
   15c40:	1000021e 	bne	r2,zero,15c4c <isatty+0x68>
    {
      return 1;
   15c44:	00800044 	movi	r2,1
   15c48:	00000d06 	br	15c80 <isatty+0x9c>
     * this is called so that the device can identify itself.
     */ 

    else
    {
      fstat (file, &stat);
   15c4c:	e0bfed04 	addi	r2,fp,-76
   15c50:	100b883a 	mov	r5,r2
   15c54:	e13fec17 	ldw	r4,-80(fp)
   15c58:	0015aec0 	call	15aec <fstat>
      return (stat.st_mode == _IFCHR) ? 1 : 0;
   15c5c:	e0bfee17 	ldw	r2,-72(fp)
   15c60:	10880020 	cmpeqi	r2,r2,8192
   15c64:	10803fcc 	andi	r2,r2,255
   15c68:	00000506 	br	15c80 <isatty+0x9c>
    }
  }
  else
  {
    ALT_ERRNO = EBADFD;
   15c6c:	0015ba80 	call	15ba8 <alt_get_errno>
   15c70:	1007883a 	mov	r3,r2
   15c74:	00801444 	movi	r2,81
   15c78:	18800015 	stw	r2,0(r3)
    return 0;
   15c7c:	0005883a 	mov	r2,zero
  }
}
   15c80:	e037883a 	mov	sp,fp
   15c84:	dfc00117 	ldw	ra,4(sp)
   15c88:	df000017 	ldw	fp,0(sp)
   15c8c:	dec00204 	addi	sp,sp,8
   15c90:	f800283a 	ret

00015c94 <alt_get_errno>:
{
   15c94:	defffe04 	addi	sp,sp,-8
   15c98:	dfc00115 	stw	ra,4(sp)
   15c9c:	df000015 	stw	fp,0(sp)
   15ca0:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
   15ca4:	d0a00b17 	ldw	r2,-32724(gp)
   15ca8:	10000326 	beq	r2,zero,15cb8 <alt_get_errno+0x24>
   15cac:	d0a00b17 	ldw	r2,-32724(gp)
   15cb0:	103ee83a 	callr	r2
   15cb4:	00000106 	br	15cbc <alt_get_errno+0x28>
   15cb8:	d0a6ba04 	addi	r2,gp,-25880
}
   15cbc:	e037883a 	mov	sp,fp
   15cc0:	dfc00117 	ldw	ra,4(sp)
   15cc4:	df000017 	ldw	fp,0(sp)
   15cc8:	dec00204 	addi	sp,sp,8
   15ccc:	f800283a 	ret

00015cd0 <lseek>:
 * ALT_LSEEK is mapped onto the lseek() system call in alt_syscall.h
 *
 */

off_t ALT_LSEEK (int file, off_t ptr, int dir)
{
   15cd0:	defff904 	addi	sp,sp,-28
   15cd4:	dfc00615 	stw	ra,24(sp)
   15cd8:	df000515 	stw	fp,20(sp)
   15cdc:	df000504 	addi	fp,sp,20
   15ce0:	e13ffd15 	stw	r4,-12(fp)
   15ce4:	e17ffc15 	stw	r5,-16(fp)
   15ce8:	e1bffb15 	stw	r6,-20(fp)
  alt_fd* fd;
  off_t   rc = 0; 
   15cec:	e03fff15 	stw	zero,-4(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
   15cf0:	e0bffd17 	ldw	r2,-12(fp)
   15cf4:	10000916 	blt	r2,zero,15d1c <lseek+0x4c>
   15cf8:	e0fffd17 	ldw	r3,-12(fp)
   15cfc:	1805883a 	mov	r2,r3
   15d00:	1085883a 	add	r2,r2,r2
   15d04:	10c5883a 	add	r2,r2,r3
   15d08:	100490ba 	slli	r2,r2,2
   15d0c:	00c00074 	movhi	r3,1
   15d10:	18ded104 	addi	r3,r3,31556
   15d14:	10c5883a 	add	r2,r2,r3
   15d18:	00000106 	br	15d20 <lseek+0x50>
   15d1c:	0005883a 	mov	r2,zero
   15d20:	e0bffe15 	stw	r2,-8(fp)
  
  if (fd) 
   15d24:	e0bffe17 	ldw	r2,-8(fp)
   15d28:	10001026 	beq	r2,zero,15d6c <lseek+0x9c>
    /*
     * If the device driver provides an implementation of the lseek() function,
     * then call that to process the request.
     */
 
    if (fd->dev->lseek)
   15d2c:	e0bffe17 	ldw	r2,-8(fp)
   15d30:	10800017 	ldw	r2,0(r2)
   15d34:	10800717 	ldw	r2,28(r2)
   15d38:	10000926 	beq	r2,zero,15d60 <lseek+0x90>
    {
      rc = fd->dev->lseek(fd, ptr, dir);
   15d3c:	e0bffe17 	ldw	r2,-8(fp)
   15d40:	10800017 	ldw	r2,0(r2)
   15d44:	10800717 	ldw	r2,28(r2)
   15d48:	e1bffb17 	ldw	r6,-20(fp)
   15d4c:	e17ffc17 	ldw	r5,-16(fp)
   15d50:	e13ffe17 	ldw	r4,-8(fp)
   15d54:	103ee83a 	callr	r2
   15d58:	e0bfff15 	stw	r2,-4(fp)
   15d5c:	00000506 	br	15d74 <lseek+0xa4>
     * Otherwise return an error.
     */

    else
    {
      rc = -ENOTSUP;
   15d60:	00bfde84 	movi	r2,-134
   15d64:	e0bfff15 	stw	r2,-4(fp)
   15d68:	00000206 	br	15d74 <lseek+0xa4>
    }
  }
  else  
  {
    rc = -EBADFD;
   15d6c:	00bfebc4 	movi	r2,-81
   15d70:	e0bfff15 	stw	r2,-4(fp)
  }

  if (rc < 0)
   15d74:	e0bfff17 	ldw	r2,-4(fp)
   15d78:	1000070e 	bge	r2,zero,15d98 <lseek+0xc8>
  {
    ALT_ERRNO = -rc;
   15d7c:	0015c940 	call	15c94 <alt_get_errno>
   15d80:	1007883a 	mov	r3,r2
   15d84:	e0bfff17 	ldw	r2,-4(fp)
   15d88:	0085c83a 	sub	r2,zero,r2
   15d8c:	18800015 	stw	r2,0(r3)
    rc = -1;
   15d90:	00bfffc4 	movi	r2,-1
   15d94:	e0bfff15 	stw	r2,-4(fp)
  }

  return rc;
   15d98:	e0bfff17 	ldw	r2,-4(fp)
}
   15d9c:	e037883a 	mov	sp,fp
   15da0:	dfc00117 	ldw	ra,4(sp)
   15da4:	df000017 	ldw	fp,0(sp)
   15da8:	dec00204 	addi	sp,sp,8
   15dac:	f800283a 	ret

00015db0 <alt_get_errno>:
{
   15db0:	defffe04 	addi	sp,sp,-8
   15db4:	dfc00115 	stw	ra,4(sp)
   15db8:	df000015 	stw	fp,0(sp)
   15dbc:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
   15dc0:	d0a00b17 	ldw	r2,-32724(gp)
   15dc4:	10000326 	beq	r2,zero,15dd4 <alt_get_errno+0x24>
   15dc8:	d0a00b17 	ldw	r2,-32724(gp)
   15dcc:	103ee83a 	callr	r2
   15dd0:	00000106 	br	15dd8 <alt_get_errno+0x28>
   15dd4:	d0a6ba04 	addi	r2,gp,-25880
}
   15dd8:	e037883a 	mov	sp,fp
   15ddc:	dfc00117 	ldw	ra,4(sp)
   15de0:	df000017 	ldw	fp,0(sp)
   15de4:	dec00204 	addi	sp,sp,8
   15de8:	f800283a 	ret

00015dec <read>:
}

#else /* !ALT_USE_DIRECT_DRIVERS */

int ALT_READ (int file, void *ptr, size_t len)
{
   15dec:	defff904 	addi	sp,sp,-28
   15df0:	dfc00615 	stw	ra,24(sp)
   15df4:	df000515 	stw	fp,20(sp)
   15df8:	df000504 	addi	fp,sp,20
   15dfc:	e13ffd15 	stw	r4,-12(fp)
   15e00:	e17ffc15 	stw	r5,-16(fp)
   15e04:	e1bffb15 	stw	r6,-20(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
   15e08:	e0bffd17 	ldw	r2,-12(fp)
   15e0c:	10000916 	blt	r2,zero,15e34 <read+0x48>
   15e10:	e0fffd17 	ldw	r3,-12(fp)
   15e14:	1805883a 	mov	r2,r3
   15e18:	1085883a 	add	r2,r2,r2
   15e1c:	10c5883a 	add	r2,r2,r3
   15e20:	100490ba 	slli	r2,r2,2
   15e24:	00c00074 	movhi	r3,1
   15e28:	18ded104 	addi	r3,r3,31556
   15e2c:	10c5883a 	add	r2,r2,r3
   15e30:	00000106 	br	15e38 <read+0x4c>
   15e34:	0005883a 	mov	r2,zero
   15e38:	e0bfff15 	stw	r2,-4(fp)
  
  if (fd)
   15e3c:	e0bfff17 	ldw	r2,-4(fp)
   15e40:	10002226 	beq	r2,zero,15ecc <read+0xe0>
     * If the file has not been opened with read access, or if the driver does
     * not provide an implementation of read(), generate an error. Otherwise
     * call the drivers read() function to process the request.
     */

    if (((fd->fd_flags & O_ACCMODE) != O_WRONLY) && 
   15e44:	e0bfff17 	ldw	r2,-4(fp)
   15e48:	10800217 	ldw	r2,8(r2)
   15e4c:	108000cc 	andi	r2,r2,3
   15e50:	10800060 	cmpeqi	r2,r2,1
   15e54:	1000181e 	bne	r2,zero,15eb8 <read+0xcc>
        (fd->dev->read))
   15e58:	e0bfff17 	ldw	r2,-4(fp)
   15e5c:	10800017 	ldw	r2,0(r2)
   15e60:	10800517 	ldw	r2,20(r2)
    if (((fd->fd_flags & O_ACCMODE) != O_WRONLY) && 
   15e64:	10001426 	beq	r2,zero,15eb8 <read+0xcc>
      {
        if ((rval = fd->dev->read(fd, ptr, len)) < 0)
   15e68:	e0bfff17 	ldw	r2,-4(fp)
   15e6c:	10800017 	ldw	r2,0(r2)
   15e70:	10800517 	ldw	r2,20(r2)
   15e74:	e0fffb17 	ldw	r3,-20(fp)
   15e78:	180d883a 	mov	r6,r3
   15e7c:	e17ffc17 	ldw	r5,-16(fp)
   15e80:	e13fff17 	ldw	r4,-4(fp)
   15e84:	103ee83a 	callr	r2
   15e88:	e0bffe15 	stw	r2,-8(fp)
   15e8c:	e0bffe17 	ldw	r2,-8(fp)
   15e90:	1000070e 	bge	r2,zero,15eb0 <read+0xc4>
        {
          ALT_ERRNO = -rval;
   15e94:	0015db00 	call	15db0 <alt_get_errno>
   15e98:	1007883a 	mov	r3,r2
   15e9c:	e0bffe17 	ldw	r2,-8(fp)
   15ea0:	0085c83a 	sub	r2,zero,r2
   15ea4:	18800015 	stw	r2,0(r3)
          return -1;
   15ea8:	00bfffc4 	movi	r2,-1
   15eac:	00000c06 	br	15ee0 <read+0xf4>
        }
        return rval;
   15eb0:	e0bffe17 	ldw	r2,-8(fp)
   15eb4:	00000a06 	br	15ee0 <read+0xf4>
      }
      else
      {
        ALT_ERRNO = EACCES;
   15eb8:	0015db00 	call	15db0 <alt_get_errno>
   15ebc:	1007883a 	mov	r3,r2
   15ec0:	00800344 	movi	r2,13
   15ec4:	18800015 	stw	r2,0(r3)
   15ec8:	00000406 	br	15edc <read+0xf0>
      }
    }
  else
  {
    ALT_ERRNO = EBADFD;
   15ecc:	0015db00 	call	15db0 <alt_get_errno>
   15ed0:	1007883a 	mov	r3,r2
   15ed4:	00801444 	movi	r2,81
   15ed8:	18800015 	stw	r2,0(r3)
  }
  return -1;
   15edc:	00bfffc4 	movi	r2,-1
}
   15ee0:	e037883a 	mov	sp,fp
   15ee4:	dfc00117 	ldw	ra,4(sp)
   15ee8:	df000017 	ldw	fp,0(sp)
   15eec:	dec00204 	addi	sp,sp,8
   15ef0:	f800283a 	ret

00015ef4 <alt_get_errno>:
{
   15ef4:	defffe04 	addi	sp,sp,-8
   15ef8:	dfc00115 	stw	ra,4(sp)
   15efc:	df000015 	stw	fp,0(sp)
   15f00:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
   15f04:	d0a00b17 	ldw	r2,-32724(gp)
   15f08:	10000326 	beq	r2,zero,15f18 <alt_get_errno+0x24>
   15f0c:	d0a00b17 	ldw	r2,-32724(gp)
   15f10:	103ee83a 	callr	r2
   15f14:	00000106 	br	15f1c <alt_get_errno+0x28>
   15f18:	d0a6ba04 	addi	r2,gp,-25880
}
   15f1c:	e037883a 	mov	sp,fp
   15f20:	dfc00117 	ldw	ra,4(sp)
   15f24:	df000017 	ldw	fp,0(sp)
   15f28:	dec00204 	addi	sp,sp,8
   15f2c:	f800283a 	ret

00015f30 <write>:
}

#else /* !ALT_USE_DIRECT_DRIVERS */

int ALT_WRITE (int file, const void *ptr, size_t len)
{
   15f30:	defff904 	addi	sp,sp,-28
   15f34:	dfc00615 	stw	ra,24(sp)
   15f38:	df000515 	stw	fp,20(sp)
   15f3c:	df000504 	addi	fp,sp,20
   15f40:	e13ffd15 	stw	r4,-12(fp)
   15f44:	e17ffc15 	stw	r5,-16(fp)
   15f48:	e1bffb15 	stw	r6,-20(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
   15f4c:	e0bffd17 	ldw	r2,-12(fp)
   15f50:	10000916 	blt	r2,zero,15f78 <write+0x48>
   15f54:	e0fffd17 	ldw	r3,-12(fp)
   15f58:	1805883a 	mov	r2,r3
   15f5c:	1085883a 	add	r2,r2,r2
   15f60:	10c5883a 	add	r2,r2,r3
   15f64:	100490ba 	slli	r2,r2,2
   15f68:	00c00074 	movhi	r3,1
   15f6c:	18ded104 	addi	r3,r3,31556
   15f70:	10c5883a 	add	r2,r2,r3
   15f74:	00000106 	br	15f7c <write+0x4c>
   15f78:	0005883a 	mov	r2,zero
   15f7c:	e0bfff15 	stw	r2,-4(fp)
  
  if (fd)
   15f80:	e0bfff17 	ldw	r2,-4(fp)
   15f84:	10002126 	beq	r2,zero,1600c <write+0xdc>
     * If the file has not been opened with write access, or if the driver does
     * not provide an implementation of write(), generate an error. Otherwise
     * call the drivers write() function to process the request.
     */

    if (((fd->fd_flags & O_ACCMODE) != O_RDONLY) && fd->dev->write)
   15f88:	e0bfff17 	ldw	r2,-4(fp)
   15f8c:	10800217 	ldw	r2,8(r2)
   15f90:	108000cc 	andi	r2,r2,3
   15f94:	10001826 	beq	r2,zero,15ff8 <write+0xc8>
   15f98:	e0bfff17 	ldw	r2,-4(fp)
   15f9c:	10800017 	ldw	r2,0(r2)
   15fa0:	10800617 	ldw	r2,24(r2)
   15fa4:	10001426 	beq	r2,zero,15ff8 <write+0xc8>
    {
      
      /* ALT_LOG - see altera_hal/HAL/inc/sys/alt_log_printf.h */
      ALT_LOG_WRITE_FUNCTION(ptr,len);

      if ((rval = fd->dev->write(fd, ptr, len)) < 0)
   15fa8:	e0bfff17 	ldw	r2,-4(fp)
   15fac:	10800017 	ldw	r2,0(r2)
   15fb0:	10800617 	ldw	r2,24(r2)
   15fb4:	e0fffb17 	ldw	r3,-20(fp)
   15fb8:	180d883a 	mov	r6,r3
   15fbc:	e17ffc17 	ldw	r5,-16(fp)
   15fc0:	e13fff17 	ldw	r4,-4(fp)
   15fc4:	103ee83a 	callr	r2
   15fc8:	e0bffe15 	stw	r2,-8(fp)
   15fcc:	e0bffe17 	ldw	r2,-8(fp)
   15fd0:	1000070e 	bge	r2,zero,15ff0 <write+0xc0>
      {
        ALT_ERRNO = -rval;
   15fd4:	0015ef40 	call	15ef4 <alt_get_errno>
   15fd8:	1007883a 	mov	r3,r2
   15fdc:	e0bffe17 	ldw	r2,-8(fp)
   15fe0:	0085c83a 	sub	r2,zero,r2
   15fe4:	18800015 	stw	r2,0(r3)
        return -1;
   15fe8:	00bfffc4 	movi	r2,-1
   15fec:	00000c06 	br	16020 <write+0xf0>
      }
      return rval;
   15ff0:	e0bffe17 	ldw	r2,-8(fp)
   15ff4:	00000a06 	br	16020 <write+0xf0>
    }
    else
    {
      ALT_ERRNO = EACCES;
   15ff8:	0015ef40 	call	15ef4 <alt_get_errno>
   15ffc:	1007883a 	mov	r3,r2
   16000:	00800344 	movi	r2,13
   16004:	18800015 	stw	r2,0(r3)
   16008:	00000406 	br	1601c <write+0xec>
    }
  }
  else  
  {
    ALT_ERRNO = EBADFD;
   1600c:	0015ef40 	call	15ef4 <alt_get_errno>
   16010:	1007883a 	mov	r3,r2
   16014:	00801444 	movi	r2,81
   16018:	18800015 	stw	r2,0(r3)
  }
  return -1;
   1601c:	00bfffc4 	movi	r2,-1
}
   16020:	e037883a 	mov	sp,fp
   16024:	dfc00117 	ldw	ra,4(sp)
   16028:	df000017 	ldw	fp,0(sp)
   1602c:	dec00204 	addi	sp,sp,8
   16030:	f800283a 	ret
